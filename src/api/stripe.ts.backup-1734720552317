/* eslint-disable no-console */
import cors from 'cors';
import { config } from 'dotenv';
import express, { Request, Response, NextFunction } from 'express';
import Stripe from 'stripe';

export interface PaymentIntentRequest;

export interface ServiceQueueRequest;

export interface ConfirmPaymentRequest;

export interface PaymentErrorRequest;


config();

// Type definitions
interface PaymentIntentRequest {
  amount: number;
  currency?: string;
  description?: string;
  metadata?: Record<string, unknown>;
}

interface ServiceQueueRequest {
  customerId: string;
  serviceId: string;
}

interface ConfirmPaymentRequest {
  paymentIntentId: string;
}

interface PaymentErrorRequest {
  error: string;
}

// Environment variable validation
const requiredEnvVars = {
  VITE_STRIPE_SECRET_KEY: import.meta.env.VITE_STRIPE_SECRET_KEY,
  VITE_FRONTEND_URL: import.meta.env.VITE_FRONTEND_URL,
  STRIPE_WEBHOOK_SECRET: import.meta.env.STRIPE_WEBHOOK_SECRET,
};

Object.entries(requiredEnvVars).forEach(([key, value]) => {
  if (!value) {
    throw new Error(`Missing required environment variable: ${key}`);
  }
});

const stripe = new Stripe(requiredEnvVars.VITE_STRIPE_SECRET_KEY, {
  apiVersion: '2023-10-16'
});

const router = express.Router();

// Enable CORS for frontend domain
router.use(cors({
  origin: requiredEnvVars.VITE_FRONTEND_URL || 'http://localhost:5173'
}));

// Request logging middleware
router.use((req: Request, res: Response, next: NextFunction) => {
  console.log(`${req.method} ${req.path}`, {
    body: req.body
  });
  next();
});

// Create payment intent
router.post('/create-payment-intent', async (req: Request, res: Response) => {
  try {
    const paymentIntentRequest: PaymentIntentRequest = req.body;

    if (!paymentIntentRequest.amount) {
      console.log('Missing amount in request');
      return res.status(400).json({
        error: 'Missing required parameter: amount'
      });
    }

    // Amount should already be in cents from the client
    const amountInCents = Math.round(paymentIntentRequest.amount);
    console.log('Creating payment intent for amount: ', amountInCents, 'currency: ', paymentIntentRequest.currency);

    // Validate amount
    if (amountInCents <= 0) {
      return res.status(400).json({
        error: 'Amount must be greater than 0'
      });
    }

    if (amountInCents > 1000000) {
      return res.status(400).json({
        error: 'Amount exceeds maximum allowed value'
      });
    }

    // Create payment intent with metadata
    const paymentIntent = await stripe.paymentIntents.create({
      amount: amountInCents,
      currency: paymentIntentRequest.currency,
      description: paymentIntentRequest.description,
      metadata: paymentIntentRequest.metadata,
      automatic_payment_methods: {
        enabled: true
      }
    });

    console.log('Payment intent created: ', paymentIntent.id);
    res.json({
      clientSecret: paymentIntent.client_secret
    });
  } catch (error) {
    console.error('Error creating payment intent: ', error);
    res.status(500).json({
      error: 'Failed to create payment intent'
    });
  }
});

// Consolidated payment confirmation endpoint
router.post('/confirm', async (req: Request, res: Response) => {
  try {
    const confirmPaymentRequest: ConfirmPaymentRequest = req.body;

    if (!confirmPaymentRequest.paymentIntentId) {
      return res.status(400).json({
        error: 'Missing payment intent ID'
      });
    }

    // Retrieve and verify payment intent
    const paymentIntent = await stripe.paymentIntents.retrieve(confirmPaymentRequest.paymentIntentId);

    if (paymentIntent.status === 'succeeded') {
      // Payment successful, send confirmation with metadata
      res.json({
        success: true,
        paymentIntent: {
          id: paymentIntent.id
        }
      });
    } else {
      // Payment not successful
      res.status(400).json({
        error: 'Payment not successful'
      });
    }
  } catch (error) {
    console.error('Error confirming payment: ', error);
    res.status(500).json({
      error: 'Failed to confirm payment'
    });
  }
});

// Service queue endpoint
router.post('/queue', async (req: Request, res: Response) => {
  try {
    const serviceQueueRequest: ServiceQueueRequest = req.body;

    // Log the received data
    console.log('Queue request received: ', req.body);

    // More flexible validation
    if (!serviceQueueRequest.serviceId) {
      return res.status(400).json({
        error: 'Missing service ID'
      });
    }

    // Create service request with available data
    const serviceRequest = {
      serviceId: serviceQueueRequest.serviceId,
      customerId: serviceQueueRequest.customerId
    };

    // Here you would typically add the service request to your database
    console.log('Adding service request to queue: ', serviceRequest);

    res.json({
      success: true
    });
  } catch (error) {
    console.error('Error adding to service queue: ', error);
    res.status(500).json({
      error: 'Failed to add to service queue'
    });
  }
});

// Payment error logging endpoint
router.post('/error', async (req: Request, res: Response) => {
  try {
    const paymentErrorRequest: PaymentErrorRequest = req.body;

    if (!paymentErrorRequest.error) {
      return res.status(400).json({
        error: 'Missing error message'
      });
    }

    // Here you would typically log the error to your database or logging service
    // For now, we'll just return success
    res.json({
      success: true
    });
  } catch (error) {
    console.error('Error logging payment error: ', error);
    res.status(500).json({
      error: 'Failed to log payment error'
    });
  }
});

// Webhook endpoint for handling Stripe events
router.post('/webhook', express.raw({ type: 'application/json' }), async (req: Request, res: Response) => {
  const sig = req.headers['stripe-signature'];

  if (!sig || !requiredEnvVars.STRIPE_WEBHOOK_SECRET) {
    return res.status(400).json({
      error: 'Missing signature or webhook secret'
    });
  }

  try {
    const event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      requiredEnvVars.STRIPE_WEBHOOK_SECRET
    );

    // Handle different event types
    switch (event.type) {
      case 'payment_intent.succeeded':
        // Handle successful payment
        console.log('Payment succeeded: ', event.data.object);
        break;
      case 'payment_intent.payment_failed':
        // Handle failed payment
        console.log('Payment failed: ', event.data.object);
        break;
      default:
        console.log(`Unhandled event type: ${event.type}`);
    }

    res.json({ received: true });
  } catch (error) {
    console.error('Webhook error: ', error);
    res.status(400).json({
      error: 'Webhook signature verification failed'
    });
  }
});

export default router;
undefined.displayName = 'undefined';