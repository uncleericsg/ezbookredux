import { configureStore, combineReducers, AnyAction, Reducer } from '@reduxjs/toolkit';
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';

import adminReducer from './slices/adminSlice';
import authReducer from './slices/authSlice';
import userReducer from './slices/userSlice';

const RESET_STORE = 'app/resetStore';

// Define the app state type
export interface RootState {
  user: ReturnType<typeof userReducer>;
  auth: ReturnType<typeof authReducer>;
  admin: ReturnType<typeof adminReducer>;
}

// Create individual reducers
const reducers = {
  user: userReducer,
  auth: authReducer,
  admin: adminReducer
};

// Root reducer that handles store reset
const combinedReducer = combineReducers<RootState>(reducers);

const rootReducer: Reducer = (state: RootState | undefined, action: AnyAction) => {
  if (action.type === RESET_STORE) {
    state = undefined;
  }
  return combinedReducer(state, action);
};

// Configure the store
export const store = configureStore({
  reducer: rootReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: false
    })
});

// Export types and hooks
export type AppDispatch = typeof store.dispatch;
export const useAppDispatch = () => useDispatch<AppDispatch>();
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// Action to reset the store
export const resetStore = () => ({
  type: RESET_STORE
});
