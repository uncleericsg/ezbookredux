import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';

import { authenticateUser } from '../../services/auth';

import type { User } from '../../types/user';

export interface UserState;

export interface UserState;

export interface UserState;

/**
 * Interface for user state
 */
interface UserState {
  /**
   * Current user
   */
  currentUser: User | null;
  /**
   * Loading state
   */
  loading: boolean;
  /**
   * Error message
   */
  error: string | null;
  /**
   * Payment status
   */
  paymentStatus: 'idle' | 'processing' | 'success' | 'error';
}

/**
 * Initial user state
 */
const initialState: UserState = {
  currentUser: null,
  loading: false,
  error: null,
  paymentStatus: 'idle',
};

/**
 * Async thunk for user login
 */
export const loginUser = createAsyncThunk(
  'user/login',
  async ({ email, password }: { email: string; password: string }) => {
    const user = await authenticateUser(email, password);
    if (!user) {
      throw new Error('Invalid credentials');
    }
    return user;
  }
);

/**
 * User slice for managing user state
 */
const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    /**
     * Set current user
     */
    setUser(state, action: PayloadAction<User | null>) {
      state.currentUser = action.payload;
    },
    /**
     * Set loading state
     */
    setLoading(state, action: PayloadAction<boolean>) {
      state.loading = action.payload;
    },
    /**
     * Set error message
     */
    setError(state, action: PayloadAction<string | null>) {
      state.error = action.payload;
    },
    /**
     * Update user profile
     */
    updateUserProfile(state, action: PayloadAction<Partial<User>>) {
      if (state.currentUser) {
        state.currentUser = { ...state.currentUser, ...action.payload };
      }
    },
    /**
     * Clear user state
     */
    clearUser(state) {
      state.currentUser = null;
      state.error = null;
    },
    /**
     * Set payment status
     */
    setPaymentStatus(state, action: PayloadAction<UserState['paymentStatus']>) {
      state.paymentStatus = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(loginUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.loading = false;
        state.currentUser = action.payload;
        state.error = null;
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to login';
      });
  },
});

/**
 * Export user actions
 */
export const { setUser, setLoading, setError, updateUserProfile, clearUser, setPaymentStatus } =
  userSlice.actions;

/**
 * Export user reducer
 */
export default userSlice.reducer;
