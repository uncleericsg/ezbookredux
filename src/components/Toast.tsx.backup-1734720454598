import { type FC, type CSSProperties , HTMLAttributes } from 'react';
import { Toaster } from 'sonner';

export type FC;
export type CSSProperties;
export type if;
export interface ToastProps;

export type FC;
export type CSSProperties;
export type if;
export interface ToastProps;

export type FC;
export type CSSProperties;
export type if;
export interface ToastProps;

export type FC;
export type CSSProperties;
export type if;
export interface ToastProps;

/**
 * Toast notification component for displaying temporary messages.
 * 
 * @component Toast
 * @description A feedback component that shows temporary notifications with configurable duration and animation.
 * Built on top of the Sonner toast library with custom styling and behavior.
 * 
 * State Transitions:
 * 1. Mount:
 *    - Initial state:
 *    - Entry animation:
 *    - Active state:
 * 
 * 2. Update:
 *    - Resets duration timer
 *    - Maintains current visual state
 *    - Updates message/type if changed
 * 
 * 3. Dismiss:
 *    - Trigger:
 *    - Exit animation:
 *    - Final state:
 * 
 * Timing Configuration:
 * - Default display duration:
 * - Animation duration:
 * - Hover pause duration:
 * - Minimum display time:
 * - Maximum queue size:
 * 
 * Dismissal Behavior:
 * - Auto-dismiss:
 * - Manual dismiss:
 * - Hover behavior:
 * - Swipe dismiss:
 * - Queue behavior: FIFO (First In, First Out)
 * 
 * @example
 * // Basic success toast
 * <Toast
 *   message="Settings saved successfully"
 *   type="success"
 *   duration={3000}
 *   onDismiss={() => console.log('Toast dismissed')}
 * />;
 * 
 * // Error toast with custom duration
 * <Toast
 *   message="Failed to save settings"
 *   type="error"
 *   duration={5000}
 *   position="top-center"
 * />;
 */

interface ToastProps extends HTMLAttributes<HTMLDivElement> {
  /**
   * Position of the toast on the screen.
   * @default "top-right"
   */
  position?: 'top-left' | 'top-right' | 'top-center' | 'bottom-left' | 'bottom-right' | 'bottom-center';

  /**
   * Customization options for the toast.
   */
  toastOptions?: {
    /**
     * Custom styles for the toast container.
     */
    style?: CSSProperties;

    /**
     * Success toast variant configuration.
     */
    success?: {
      /**
       * Success icon character.
       */
      icon?: string;

      /**
       * Custom CSS classes for success variant.
       */
      className?: string;
    };

    /**
     * Error toast variant configuration.
     */
    error?: {
      /**
       * Error icon character.
       */
      icon?: string;

      /**
       * Custom CSS classes for error variant.
       */
      className?: string;
    };

    /**
     * Warning toast variant configuration.
     */
    warning?: {
      /**
       * Warning icon character.
       */
      icon?: string;

      /**
       * Custom CSS classes for warning variant.
       */
      className?: string;
    };
  };
}

const Toast: FC<ToastProps> = ({
  position = "top-right",
  toastOptions = {
    style: {
      background: 'rgb(31, 41, 55)',
      color: 'rgb(229, 231, 235)',
      border: '1px solid rgb(75, 85, 99)'
    },
    success: {
      icon: '✓',
      className: 'bg-green-500/10 text-green-400'
    },
    error: {
      icon: '✕',
      className: 'bg-red-500/10 text-red-400'
    },
    warning: {
      icon: '⚠',
      className: 'bg-yellow-500/10 text-yellow-400'
    }
  }
}) => {
  return (
    <Toaster
      position={position}
      toastOptions={toastOptions}
    />
  );
};
export { ToastProps, Toast };

undefined.displayName = 'undefined';