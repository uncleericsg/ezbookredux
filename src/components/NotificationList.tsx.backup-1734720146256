import { format } from 'date-fns';
import { Bell, Calendar, Shield, AlertTriangle, ChevronRight } from 'lucide-react';
import React from 'react';
import { useNavigate } from 'react-router-dom';

import { cn } from '@/lib/utils';
import { useAppSelector } from '@/store';
import { Notification } from '@/types';

/**
 * Shows a list of user notifications
 * 
 * @example
 * ```tsx
 * <NotificationList
 *   notifications={notifications}
 *   isLoading={isLoading}
 *   onMarkAsRead={(id) => handleMarkAsRead(id)}
 *   onMarkAllRead={() => handleMarkAllRead()}
 *   onClearAll={() => handleClearAll()}
 * />
 * ```
 */
interface NotificationListProps {
  /** Array of notifications to display */
  notifications: Notification[];
  /** Loading state */
  isLoading: boolean;
  /** Callback when a notification is marked as read */
  onMarkAsRead?: (notificationId: string) => void;
  /** Callback when all notifications are marked as read */
  onMarkAllRead?: () => void;
  /** Callback when all notifications are cleared */
  onClearAll?: () => void;
  /** Optional className for styling */
  className?: string;
}

const NotificationList: React.FC<NotificationListProps> = ({
  notifications,
  isLoading,
  onMarkAsRead,
  onMarkAllRead,
  onClearAll,
  className
}) => {
  const navigate = useNavigate();
  // Removed unused currentUser variable
  useAppSelector((state) => state.user);

  const getIcon = (type: string): React.FC => {
    switch (type) {
      case 'appointment_confirmation':
        return Calendar;
      case 'amc_expiry':
        return Shield;
      case 'service_reminder':
        return Bell;
      default:
        return AlertTriangle;
    }
  };

  const handleNotificationClick = (notification: Notification): void => {
    if (notification.actionUrl) {
      navigate(notification.actionUrl);
    }
    if (onMarkAsRead) {
      onMarkAsRead(notification.id);
    }
  };

  if (isLoading) {
    return (
      <div className="space-y-4" role="status" aria-label="Loading notifications">
        {[1, 2, 3].map((i) => (
          <div key={i} className="animate-pulse">
            <div className="h-20 rounded-lg bg-gray-800" />
          </div>
        ))}
      </div>
    );
  }

  if (!notifications.length) {
    return (
      <div className="py-8 text-center" role="status" aria-label="No notifications">
        <Bell className="mx-auto h-12 w-12 text-gray-400" aria-hidden="true" />
        <h3 className="mt-2 text-sm font-medium text-gray-200">No notifications</h3>
        <p className="mt-1 text-sm text-gray-500">You're all caught up!</p>
      </div>
    );
  }

  return (
    <div className={cn('space-y-4', className)} role="feed" aria-label="Notifications list">
      {notifications.length > 0 && (
        <div className="mb-4 flex items-center justify-between">
          <h2 className="text-lg font-semibold">Notifications</h2>
          <div className="space-x-2">
            {onMarkAllRead && (
              <button
                onClick={onMarkAllRead}
                className="text-sm text-blue-400 hover:text-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                aria-label="Mark all notifications as read"
              >
                Mark all read
              </button>
            )}
            {onClearAll && (
              <button
                onClick={onClearAll}
                className="text-sm text-gray-400 hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                aria-label="Clear all notifications"
              >
                Clear all
              </button>
            )}
          </div>
        </div>
      )}
      <div className="space-y-2">
        {notifications.map((notification) => {
          const Icon = getIcon(notification.type);
          const formattedDate = format(new Date(notification.createdAt), 'MMM d, h:mm a');
          
          return (
            <button
              key={notification.id}
              onClick={() => handleNotificationClick(notification)}
              className={cn(
                'flex w-full items-start gap-4 rounded-lg border p-4 text-left',
                'transition-all duration-200',
                notification.read
                  ? 'border-gray-700 bg-gray-800/50'
                  : 'border-blue-500/50 bg-blue-500/5',
                'hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'
              )}
              role="article"
              aria-label={`${notification.title} - ${notification.read ? 'Read' : 'Unread'}`}
            >
              <div className="flex-shrink-0">
                <Icon
                  className={cn(
                    'h-6 w-6',
                    notification.read ? 'text-gray-400' : 'text-blue-400'
                  )}
                  aria-hidden="true"
                />
              </div>

              <div className="min-w-0 flex-grow">
                <div className="flex items-start justify-between gap-2">
                  <h3
                    className={cn(
                      'font-medium',
                      notification.read ? 'text-gray-300' : 'text-white'
                    )}
                  >
                    {notification.title}
                  </h3>
                  <span className="whitespace-nowrap text-xs text-gray-400">
                    {formattedDate}
                  </span>
                </div>
                <p className="mt-1 line-clamp-2 text-sm text-gray-400">{notification.message}</p>

                {notification.actionUrl && (
                  <div className="mt-2 flex items-center text-sm text-blue-400">
                    <span>View details</span>
                    <ChevronRight className="ml-1 h-4 w-4" aria-hidden="true" />
                  </div>
                )}
              </div>
            </button>
          );
        })}
      </div>
    </div>
  );
};

// Set display name for debugging
NotificationList.displayName = 'NotificationList';
export { NotificationListProps, NotificationList };
