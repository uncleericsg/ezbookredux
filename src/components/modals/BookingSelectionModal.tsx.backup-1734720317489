'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { Check } from 'lucide-react';
import React, { useState } from 'react';

import { Button } from '@/components/ui/Button';
import { Calendar as CalendarComponent } from '@/components/ui/Calendar';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter
} from '@/components/ui/Dialog';
import { Input } from '@/components/ui/Input';
import { Label } from '@/components/ui/Label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/Select';
import { cn } from '@/lib/utils';

export interface BookingData;
export interface BookingSelectionModalProps;

export interface BookingData;
export interface BookingSelectionModalProps;

export interface BookingData {
  serviceType: string;
  date: Date;
  time: string;
  location: string;
  unitType: string;
  unitCount: number;
  notes?: string;
}

export interface BookingSelectionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (bookingData: BookingData) => void;
}

const timeSlots = [
  '09:00',
  '10:00',
  '11:00',
  '12:00',
  '13:00',
  '14:00',
  '15:00',
  '16:00',
  '17:00'
] as const;

const serviceTypes = [
  'Regular Maintenance',
  'Deep Cleaning',
  'Repair',
  'Installation',
  'Emergency Service'
] as const;

const unitTypes = [
  'Window Type',
  'Split Type',
  'Cassette Type',
  'Package Type',
  'VRF System'
] as const;

export const BookingSelectionModal: React.FC<BookingSelectionModalProps> = ({
  isOpen,
  onClose,
  onSubmit
}) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [bookingData, setBookingData] = useState<BookingData>({
    serviceType: '',
    date: new Date(),
    time: '',
    location: '',
    unitType: '',
    unitCount: 1,
    notes: ''
  });
  const [errors, setErrors] = useState<Partial<BookingData>>({});

  const validateStep = (step: number): boolean => {
    const newErrors: Partial<BookingData> = {};
    let isValid = true;

    switch (step) {
      case 1:
        if (!bookingData.serviceType) {
          newErrors.serviceType = 'Please select a service type';
          isValid = false;
        }
        break;
      case 2:
        if (!bookingData.date || !bookingData.time) {
          newErrors.date = 'Please select both date and time';
          isValid = false;
        }
        break;
      case 3:
        if (!bookingData.location) {
          newErrors.location = 'Please enter a location';
          isValid = false;
        }
        if (!bookingData.unitType) {
          newErrors.unitType = 'Please select a unit type';
          isValid = false;
        }
        if (bookingData.unitCount < 1) {
          newErrors.unitCount = 'Please enter a valid unit count';
          isValid = false;
        }
        break;
    }

    setErrors(newErrors);
    return isValid;
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      if (currentStep === 3) {
        onSubmit(bookingData);
        onClose();
      } else {
        setCurrentStep((prev) => prev + 1);
      }
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep((prev) => prev - 1);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Book a Service</DialogTitle>
          <DialogDescription>
            Please fill in the details for your service booking.
          </DialogDescription>
        </DialogHeader>

        <div className="mt-4">
          <div className="flex justify-between mb-8">
            {[1, 2, 3].map((step) => (
              <div
                key={step}
                className={cn(
                  'flex items-center',
                  step < 3 && 'flex-1'
                )}
              >
                <div
                  className={cn(
                    'w-8 h-8 rounded-full flex items-center justify-center border-2',
                    currentStep === step
                      ? 'border-blue-500 bg-blue-50 text-blue-500'
                      : currentStep > step
                      ? 'border-green-500 bg-green-50 text-green-500'
                      : 'border-gray-300 text-gray-500'
                  )}
                >
                  {currentStep > step ? (
                    <Check className="h-4 w-4" />
                  ) : (
                    <span>{step}</span>
                  )}
                </div>
                {step < 3 && (
                  <div
                    className={cn(
                      'flex-1 h-0.5 mx-2',
                      currentStep > step
                        ? 'bg-green-500'
                        : 'bg-gray-300'
                    )}
                  />
                )}
              </div>
            ))}
          </div>

          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.2 }}
            >
              {currentStep === 1 && (
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="serviceType">Service Type</Label>
                    <Select
                      value={bookingData.serviceType}
                      onValueChange={(value) =>
                        setBookingData({ ...bookingData, serviceType: value })
                      }
                    >
                      <SelectTrigger id="serviceType">
                        <SelectValue placeholder="Select a service type" />
                      </SelectTrigger>
                      <SelectContent>
                        {serviceTypes.map((type) => (
                          <SelectItem key={type} value={type}>
                            {type}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {errors.serviceType && (
                      <p className="text-red-500 text-sm mt-1" role="alert">
                        {errors.serviceType}
                      </p>
                    )}
                  </div>
                </div>
              )}

              {currentStep === 2 && (
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="dateTime">Date & Time</Label>
                    <div className="grid gap-4">
                      <CalendarComponent
                        mode="single"
                        selected={bookingData.date}
                        onSelect={(date) =>
                          date && setBookingData({ ...bookingData, date })
                        }
                        disabled={(date) =>
                          date < new Date() || date.getDay() === 0
                        }
                        className="rounded-md border"
                      />
                      <Select
                        value={bookingData.time}
                        onValueChange={(value) =>
                          setBookingData({ ...bookingData, time: value })
                        }
                      >
                        <SelectTrigger id="time">
                          <SelectValue placeholder="Select a time slot" />
                        </SelectTrigger>
                        <SelectContent>
                          {timeSlots.map((time) => (
                            <SelectItem key={time} value={time}>
                              {time}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    {errors.date && (
                      <p className="text-red-500 text-sm mt-1" role="alert">
                        {errors.date}
                      </p>
                    )}
                  </div>
                </div>
              )}

              {currentStep === 3 && (
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="location">Location</Label>
                    <Input
                      id="location"
                      value={bookingData.location}
                      onChange={(e) =>
                        setBookingData({
                          ...bookingData,
                          location: e.target.value
                        })
                      }
                      placeholder="Enter service location"
                    />
                    {errors.location && (
                      <p className="text-red-500 text-sm mt-1" role="alert">
                        {errors.location}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label htmlFor="unitType">Unit Type</Label>
                    <Select
                      value={bookingData.unitType}
                      onValueChange={(value) =>
                        setBookingData({ ...bookingData, unitType: value })
                      }
                    >
                      <SelectTrigger id="unitType">
                        <SelectValue placeholder="Select unit type" />
                      </SelectTrigger>
                      <SelectContent>
                        {unitTypes.map((type) => (
                          <SelectItem key={type} value={type}>
                            {type}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {errors.unitType && (
                      <p className="text-red-500 text-sm mt-1" role="alert">
                        {errors.unitType}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label htmlFor="unitCount">Number of Units</Label>
                    <Input
                      id="unitCount"
                      type="number"
                      value={bookingData.unitCount}
                      onChange={(e) =>
                        setBookingData({
                          ...bookingData,
                          unitCount: parseInt(e.target.value) || 0
                        })
                      }
                      min={1}
                    />
                    {errors.unitCount && (
                      <p className="text-red-500 text-sm mt-1" role="alert">
                        {errors.unitCount}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label htmlFor="notes">Additional Notes (Optional)</Label>
                    <textarea
                      id="notes"
                      className="w-full min-h-[100px] p-3 rounded-md border focus:outline-none focus:ring-2 focus:ring-blue-500"
                      value={bookingData.notes}
                      onChange={(e) =>
                        setBookingData({
                          ...bookingData,
                          notes: e.target.value
                        })
                      }
                      placeholder="Any special requirements or instructions..."
                      rows={3}
                    />
                  </div>
                </div>
              )}
            </motion.div>
          </AnimatePresence>
        </div>

        <DialogFooter>
          <div className="flex justify-between w-full">
            <Button
              type="button"
              variant="outline"
              onClick={handleBack}
              disabled={currentStep === 1}
            >
              Back
            </Button>
            <Button type="button" onClick={handleNext}>
              {currentStep === 3 ? 'Submit' : 'Next'}
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
