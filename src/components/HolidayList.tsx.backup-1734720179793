import { format, parseISO } from 'date-fns';
import { Calendar, Bell, AlertCircle } from 'lucide-react';
import React from 'react';

import { useHolidayNotifications } from '@/hooks/notifications/useHolidayNotifications';

/**
 * Interface for a holiday item
 */
interface Holiday {
  id: string;
  holiday: string;
  date: string;
  dayOfWeek: string;
}

/**
 * Props for the HolidayList component
 */
interface HolidayListProps extends React.HTMLAttributes<HTMLDivElement> {
  /** Optional custom class name */
  className?: string;
}

/**
 * HolidayList component for the iAircon Easy Booking system
 * Displays a list of upcoming holidays with their dates and notifications
 * 
 * @example
 * ```tsx
 * <HolidayList className="mt-4" />
 * ```
 */
const HolidayList: React.FC<HolidayListProps> = ({
  className = '',
  ...props
}) => {
  const { upcomingHolidays, loading, error } = useHolidayNotifications();

  if (loading) {
    return (
      <div 
        className={`animate-pulse space-y-4 ${className}`}
        role="status"
        aria-label="Loading holidays"
        {...props}
      >
        {[1, 2, 3].map(i => (
          <div 
            key={i} 
            className="bg-gray-800 rounded-lg p-4 border border-gray-700"
          >
            <div className="h-4 bg-gray-700 rounded w-1/4 mb-2" />
            <div className="h-4 bg-gray-700 rounded w-1/2" />
          </div>
        ))}
        <span className="sr-only">Loading...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div 
        className={`bg-red-500/10 border border-red-500/20 rounded-lg p-4 text-red-400 flex items-center space-x-2 ${className}`}
        role="alert"
        {...props}
      >
        <AlertCircle className="h-5 w-5" aria-hidden="true" />
        <span>{error}</span>
      </div>
    );
  }

  if (upcomingHolidays.length === 0) {
    return (
      <div 
        className={`text-center py-8 text-gray-400 ${className}`}
        role="status"
        aria-label="No upcoming holidays"
        {...props}
      >
        No upcoming holidays in the next 30 days
      </div>
    );
  }

  return (
    <div 
      className={`space-y-4 ${className}`}
      role="list"
      aria-label="Upcoming holidays"
      {...props}
    >
      {upcomingHolidays.map((holiday: Holiday) => (
        <div
          key={holiday.id}
          className="bg-gray-800 rounded-lg p-4 border border-gray-700 hover:border-gray-600 transition-colors"
          role="listitem"
        >
          <div className="flex items-start justify-between">
            <div className="flex items-start space-x-3">
              <Calendar className="h-5 w-5 text-blue-400 mt-1" aria-hidden="true" />
              <div>
                <h3 className="font-medium">{holiday.holiday}</h3>
                <div className="flex items-center space-x-2 text-sm text-gray-400 mt-1">
                  <span>{format(parseISO(holiday.date), 'MMMM d, yyyy')}</span>
                  <span aria-hidden="true">â€¢</span>
                  <span>{holiday.dayOfWeek}</span>
                </div>
              </div>
            </div>
            <Bell 
              className="h-5 w-5 text-gray-400" 
              aria-hidden="true" 
              title="Holiday notification"
            />
          </div>
        </div>
      ))}
    </div>
  );
};

// Set display name for debugging
HolidayList.displayName = 'HolidayList';
export { HolidayListProps, HolidayList };
