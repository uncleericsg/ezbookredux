import { format } from 'date-fns';
import { AlertCircle, CheckCircle, Clock } from 'lucide-react';
import type { FC, ReactElement } from 'react';

import { useServiceHistory } from '../hooks/useServiceHistory';
import type { ServiceVisit } from '../types';

export interface ServiceHistoryProps;





interface ServiceHistoryProps {
  userId?: string;
  limit?: number;
  className?: string;
}

/**
 * Displays service history and past appointments
 *
 * @component ServiceHistory
 * @description Shows a list of past and upcoming service appointments
 */
const ServiceHistory: FC<ServiceHistoryProps> = ({ userId, limit, className, ...props }) => {
  const { visits, loading } = useServiceHistory(userId || '');

  if (loading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 3 }, (_, i) => (
          <div
            key={i}
            className="animate-pulse rounded-lg border border-gray-700 bg-gray-800 p-4"
          >
            <div className="mb-2 h-4 w-1/4 rounded bg-gray-700" />
            <div className="h-4 w-1/2 rounded bg-gray-700" />
          </div>
        ))}
      </div>
    );
  }

  const displayedVisits = limit ? visits.slice(0, limit) : visits;

  if (displayedVisits.length === 0) {
    return (
      <div className="py-8 text-center text-gray-400">
        No service history available
      </div>
    );
  }

  const getStatusStyles = (status: ServiceVisit['status']): string => {
    switch (status) {
      case 'completed':
        return 'bg-green-500/10 text-green-400';
      case 'scheduled':
        return 'bg-blue-500/10 text-blue-400';
      default:
        return 'bg-red-500/10 text-red-400';
    }
  };

  const getStatusIcon = (status: ServiceVisit['status']): ReactElement => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="mt-1 h-5 w-5 text-green-400" />;
      case 'scheduled':
        return <Clock className="mt-1 h-5 w-5 text-blue-400" />;
      default:
        return <AlertCircle className="mt-1 h-5 w-5 text-red-400" />;
    }
  };

  return (
    <div className={`space-y-4 ${className ?? ''}`} {...props}>
      {displayedVisits.map((visit) => (
        <div
          key={visit.id}
          className="rounded-lg border border-gray-700 bg-gray-800 p-4"
        >
          <div className="flex items-start justify-between">
            <div className="flex items-start space-x-4">
              {getStatusIcon(visit.status)}
              <div>
                <h4 className="font-medium">{visit.label}</h4>
                <p className="text-sm text-gray-400">
                  {format(new Date(visit.date), 'PPP')}
                </p>
                {visit.technician && (
                  <p className="mt-1 text-sm text-gray-400">
                    Technician: {visit.technician}
                  </p>
                )}
              </div>
            </div>
            <span
              className={`rounded-full px-3 py-1 text-sm ${getStatusStyles(visit.status)}`}
            >
              {visit.status.charAt(0).toUpperCase() + visit.status.slice(1)}
            </span>
          </div>
          {visit.notes && (
            <p className="mt-3 rounded-lg bg-gray-700/50 p-3 text-sm text-gray-400">
              {visit.notes}
            </p>
          )}
        </div>
      ))}
    </div>
  );
};
export { ServiceHistoryProps, ServiceHistory };

undefined.displayName = 'undefined';