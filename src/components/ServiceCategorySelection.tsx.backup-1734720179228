import { differenceInDays } from 'date-fns';
import { AirVent, Wrench, ShieldCheck, Star, Clock } from 'lucide-react';
import type { FC, useState, createElement } from 'react';
import { toast } from 'sonner';

import { useServiceHistory } from '@/hooks/useServiceHistory';
import { useAppSelector } from '@/store';

interface PricingTier {
  units: string;
  price: number;
  highlight?: string;
}

interface ServiceCategory {
  id: string;
  name: string;
  description: string;
  type: string;
  price: PricingTier[];
  icon: FC;
  duration?: string;
  rating?: number;
  reviewCount?: number;
  popular?: boolean;
}

interface ServiceCategorySelectionProps {
  onCategorySelect?: (category: ServiceCategory) => void;
  preSelectedCategory?: string;
  className?: string;
}

const ServiceCategorySelection: FC<ServiceCategorySelectionProps> = ({
  onCategorySelect,
  preSelectedCategory,
  className
}) => {
  const { currentUser } = useAppSelector((state) => state.user);
  const { data: serviceHistory } = useServiceHistory(currentUser?.id);
  const [selectedCategory, setSelectedCategory] = useState<string | null>(
    preSelectedCategory || null
  );

  const serviceCategories: ServiceCategory[] = [
    {
      id: 'general-service',
      name: 'General Service',
      description: 'Regular maintenance and cleaning for optimal performance',
      type: 'service',
      icon: AirVent,
      duration: '1-2 hours',
      rating: 4.8,
      reviewCount: 1200,
      popular: true,
      price: [
        { units: '1 unit', price: 40 },
        { units: '2 units', price: 70 },
        { units: '3 units', price: 100 },
        { units: '4+ units', price: 30 }
      ]
    },
    {
      id: 'repair-service',
      name: 'Repair Service',
      description: 'Professional diagnosis and repair of AC issues',
      type: 'repair',
      icon: Wrench,
      duration: '2-4 hours',
      rating: 4.9,
      reviewCount: 800,
      price: [
        { units: '1 unit', price: 80 },
        { units: '2 units', price: 150 },
        { units: '3 units', price: 220 },
        { units: '4+ units', price: 70 }
      ]
    },
    {
      id: 'amc-package',
      name: 'AMC Package',
      description: 'Annual maintenance contract with priority service',
      type: 'amc',
      icon: ShieldCheck,
      rating: 4.9,
      reviewCount: 500,
      popular: true,
      price: [
        { units: 'Basic', price: 188, highlight: '4 services/year' },
        { units: 'Premium', price: 288, highlight: '6 services/year' },
        { units: 'Elite', price: 388, highlight: '8 services/year' }
      ]
    }
  ];

  const handleCategorySelect = (category: ServiceCategory) => {
    setSelectedCategory(category.id);

    // Check if user has recent service
    if (serviceHistory?.length) {
      const lastService = serviceHistory[0];
      const daysSinceLastService = differenceInDays(new Date(), new Date(lastService.date));

      if (daysSinceLastService < 30) {
        toast.warning('You had a service recently. Are you sure you need another one?');
      }
    }

    onCategorySelect?.(category);
  };

  return (
    <div className={`grid gap-6 ${className || ''}`}>
      {serviceCategories.map((category) => (
        <button
          key={category.id}
          type="button"
          onClick={() => handleCategorySelect(category)}
          className={`
            relative flex flex-col items-start gap-4 rounded-lg border p-6 transition-all
            duration-200 hover:border-blue-400 hover:shadow-lg
            ${
              selectedCategory === category.id
                ? 'border-blue-500 bg-blue-500/5'
                : 'border-gray-700 bg-gray-800 hover:bg-gray-700/50'
            }
          `}
        >
          <div className="flex w-full items-center justify-between">
            <div className="flex items-center gap-3">
              {createElement(category.icon, {
                className: 'h-6 w-6 text-blue-400'
              })}
              <h3 className="text-lg font-semibold">{category.name}</h3>
              {category.popular && (
                <span className="rounded-full bg-blue-500/20 px-2 py-1 text-xs text-blue-400">
                  Popular
                </span>
              )}
            </div>
          </div>

          <p className="text-sm text-gray-400">{category.description}</p>

          {category.rating && (
            <div className="flex items-center gap-2 text-sm text-gray-400">
              <Star className="h-4 w-4 text-yellow-400" />
              <span>{category.rating}</span>
              <span>({category.reviewCount}+ reviews)</span>
            </div>
          )}

          {category.duration && (
            <div className="flex items-center gap-2 text-sm text-gray-400">
              <Clock className="h-4 w-4" />
              <span>{category.duration}</span>
            </div>
          )}

          <div className="mt-4 space-y-2">
            {category.price.map((tier, index) => (
              <div key={index} className="flex items-center justify-between text-sm">
                <span>{tier.units}</span>
                <div className="flex items-center gap-2">
                  {tier.highlight && (
                    <span className="text-xs text-gray-400">{tier.highlight}</span>
                  )}
                  <span className="font-semibold">${tier.price}</span>
                </div>
              </div>
            ))}
          </div>
        </button>
      ))}
    </div>
  );
};

ServiceCategorySelection.displayName = 'ServiceCategorySelection';
export { PricingTier, ServiceCategory, ServiceCategorySelectionProps };
