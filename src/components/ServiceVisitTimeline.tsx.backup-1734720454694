import { format } from 'date-fns';
import { CheckCircle, Clock, AlertCircle, Star } from 'lucide-react';
import type { HTMLAttributes , type FC, useState } from 'react';

import { ServiceRating } from '../components/ServiceRating';
import { useServiceRating } from '../hooks/useServiceRating';
import type { ServiceVisit } from '../types';

export type FC;
export interface ServiceVisitTimelineProps;

export type FC;
export interface ServiceVisitTimelineProps;

export type FC;
export interface ServiceVisitTimelineProps;

export type FC;
export interface ServiceVisitTimelineProps;

interface ServiceVisitTimelineProps extends HTMLAttributes<HTMLDivElement> {
  visits: ServiceVisit[];
  loading?: boolean;
};


ServiceVisitTimeline.displayName = 'ServiceVisitTimeline';
const ServiceVisitTimeline: FC<ServiceVisitTimelineProps> = ({
  visits = [],
  loading = false
}) => {
  const [ratingVisit, setRatingVisit] = useState<string | null>(null);
  const { submitRating } = useServiceRating();

  if (loading) {
    return (
      <div className="space-y-4">
        {[1, 2, 3].map((i) => (
          <div
            key={i}
            className="animate-pulse bg-gray-800 rounded-lg p-4 border border-gray-700"
          >
            <div className="h-4 bg-gray-700 rounded w-1/4 mb-2" />
            <div className="h-4 bg-gray-700 rounded w-1/2" />
          </div>
        ))}
      </div>
    );
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-400" aria-hidden="true" />;
      case 'scheduled':
        return <Clock className="h-5 w-5 text-blue-400" aria-hidden="true" />;
      default:
        return <AlertCircle className="h-5 w-5 text-red-400" aria-hidden="true" />;
    }
  };

  const getStatusClass = (status: string) => {
    switch (status) {
      case 'completed':
        return 'bg-green-500/10 text-green-400';
      case 'scheduled':
        return 'bg-blue-500/10 text-blue-400';
      default:
        return 'bg-red-500/10 text-red-400';
    }
  };

  return (
    <div className="relative">
      <div 
        className="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-700" 
        aria-hidden="true"
      />
      <div className="space-y-6">
        {visits.map((visit) => (
          <div key={visit.id} className="relative pl-10">
            <div 
              className="absolute left-0 p-2 rounded-full bg-gray-800 border border-gray-700"
              aria-hidden="true"
            >
              {getStatusIcon(visit.status)}
            </div>
            <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
              <div className="flex items-start justify-between">
                <div>
                  <h4 className="font-medium">{visit.label}</h4>
                  <p className="text-sm text-gray-400">
                    {format(new Date(visit.date), 'PPP')}
                  </p>
                  {visit.technician && (
                    <p className="text-sm text-gray-400 mt-1">
                      Technician: {visit.technician.name}
                    </p>
                  )}
                  {visit.status === 'completed' && !visit.rating && (
                    <button
                      type="button"
                      onClick={() => setRatingVisit(visit.id)}
                      className="mt-3 flex items-center space-x-2 text-sm text-blue-400 hover:text-blue-300"
                      aria-label={`Rate service visit ${visit.label}`}
                    >
                      <Star className="h-4 w-4" aria-hidden="true" />
                      <span>Rate this service</span>
                    </button>
                  )}
                </div>
                <span
                  className={`px-3 py-1 rounded-full text-sm ${getStatusClass(visit.status)}`}
                >
                  {visit.status.charAt(0).toUpperCase() + visit.status.slice(1)}
                </span>
              </div>
              {visit.notes && (
                <p className="mt-3 text-sm text-gray-400 bg-gray-700/50 p-3 rounded-lg">
                  {visit.notes}
                </p>
              )}
            </div>
          </div>
        ))}
        {ratingVisit && (
          <ServiceRating
            serviceId={ratingVisit}
            onSubmit={async (rating: number, feedback: string) => {
              await submitRating(ratingVisit, rating, feedback);
              setRatingVisit(null);
            }}
            onClose={() => setRatingVisit(null)}
          />
        )}
      </div>
    </div>
  );

getStatusIcon.displayName = 'getStatusIcon';
};
export { ServiceVisitTimelineProps, ServiceVisitTimeline };

undefined.displayName = 'undefined';