'use client';

import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import { Save, Plus, Trash2, Loader2, GripVertical, Link, Image } from 'lucide-react';
import React, { useState } from 'react';
import { toast } from 'sonner';

import { useSettingsForm } from '../../hooks/useSettingsForm';
import type { AppointmentType } from '../../services/categoryMapping';
import type { ServiceCategory } from '../../types';

import { CategoryMappingModal } from './CategoryMappingModal';

export interface CategoryWithChildren;

export interface CardSettings;

export interface HomepageSettings;

export interface HomepageManagerProps;


}

  title: string;
  description: string;
  imageUrl?: string;
  ctaText: string;
  ctaLink: string;
  appointmentTypeId?: string;
  order: number;
  visible: boolean;
}

  acuityIntegration: {
    enabled: boolean;
    appointmentTypes: AppointmentType[];
  };
  categories?: CategoryWithChildren[];
}

const defaultSettings: HomepageSettings = {
  cards: [
    {
      id: 'default-card',
      title: 'Welcome',
      description: 'Book your service appointment today',
      ctaText: 'Book Now',
      ctaLink: '/booking',
      order: 0,
      visible: true
    }
  ],
  acuityIntegration: {
    enabled: false,
    appointmentTypes: []
  }
};

const updateCategoryAppointmentType = (
  categories: CategoryWithChildren[] = [],
  categoryId: string,
  appointmentTypeId: string | null
): CategoryWithChildren[] => {
  return categories.map(category => {
    if (category.id === categoryId) {
      return { ...category, appointmentTypeId };
    }
    if (category.children?.length) {
      return {
        ...category,
        children: updateCategoryAppointmentType(category.children, categoryId, appointmentTypeId)
      };
    }
    return category;
  });
};

  const [mappingCategory, setMappingCategory] = useState<CategoryWithChildren | null>(null);

  const handleDragEnd = (result: { destination: { index: number } | null; source: { index: number } }) => {
    if (!result.destination) return;

    const items = Array.from(settings.cards);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    const updatedItems = items.map((item, index) => ({
      ...item,
      order: index
    }));

    updateSettings({ cards: updatedItems });
  };

  const addCard = () => {
    const newCard: CardSettings = {
      id: `card-${Date.now()}`,
      title: 'New Card',
      description: 'Card description',
      ctaText: 'Learn More',
      ctaLink: '/',
      order: settings.cards.length,
      visible: true
    };

    updateSettings({
      cards: [...settings.cards, newCard]
    });
  };

  const updateCard = (id: string, updates: Partial<CardSettings>) => {
    updateSettings({
      cards: settings.cards.map(card =>
        card.id === id ? { ...card, ...updates } : card
      )
    });
  };

  const deleteCard = (id: string) => {
    updateSettings({
      cards: settings.cards.filter(card => card.id !== id)
    });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-8" {...props}>
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-white">Homepage Cards</h2>
          <button
            type="button"
            onClick={addCard}
            className="btn btn-primary btn-sm"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Card
          </button>
        </div>

        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId="cards">
            {(provided) => (
              <div
                {...provided.droppableProps}
                ref={provided.innerRef}
                className="space-y-4"
              >
                {settings.cards.map((card, index) => (
                  <Draggable key={card.id} draggableId={card.id} index={index}>
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        className="bg-gray-700/50 rounded-lg p-4 border border-gray-600"
                      >
                        <div className="flex items-start space-x-4">
                          <div {...provided.dragHandleProps} className="mt-2">
                            <GripVertical className="h-5 w-5 text-gray-400" />
                          </div>
                          <div className="flex-1 space-y-4">
                            <input
                              type="text"
                              value={card.title}
                              onChange={(e) => updateCard(card.id, { title: e.target.value })}
                              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2"
                              placeholder="Card Title"
                            />
                            <textarea
                              value={card.description}
                              onChange={(e) => updateCard(card.id, { description: e.target.value })}
                              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 h-24"
                              placeholder="Card Description"
                            />
                            <div>
                              <label className="block text-sm font-medium text-gray-300 mb-1">
                                <div className="flex items-center space-x-2">
                                  <Image className="h-4 w-4 text-blue-400" />
                                  <span>Image URL</span>
                                </div>
                              </label>
                              <input
                                type="text"
                                value={card.imageUrl || ''}
                                onChange={(e) => updateCard(card.id, { imageUrl: e.target.value })}
                                className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2"
                                placeholder="https://example.com/image.jpg"
                              />
                            </div>
                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-300 mb-1">
                                  <div className="flex items-center space-x-2">
                                    <Link className="h-4 w-4 text-blue-400" />
                                    <span>CTA Text</span>
                                  </div>
                                </label>
                                <input
                                  type="text"
                                  value={card.ctaText}
                                  onChange={(e) => updateCard(card.id, { ctaText: e.target.value })}
                                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2"
                                  placeholder="Learn More"
                                />
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-300 mb-1">
                                  <div className="flex items-center space-x-2">
                                    <Link className="h-4 w-4 text-blue-400" />
                                    <span>CTA Link</span>
                                  </div>
                                </label>
                                <input
                                  type="text"
                                  value={card.ctaLink}
                                  onChange={(e) => updateCard(card.id, { ctaLink: e.target.value })}
                                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2"
                                  placeholder="/page"
                                />
                              </div>
                            </div>
                            <div className="flex items-center justify-between">
                              <label className="flex items-center space-x-2">
                                <input
                                  type="checkbox"
                                  checked={card.visible}
                                  onChange={(e) => updateCard(card.id, { visible: e.target.checked })}
                                  className="h-4 w-4 rounded border-gray-600 text-blue-500 focus:ring-blue-500"
                                />
                                <span className="text-sm text-gray-300">Visible</span>
                              </label>
                              <button
                                type="button"
                                onClick={() => deleteCard(card.id)}
                                className="btn-icon text-red-400"
                                title="Delete card"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>
      </div>

      <div className="flex justify-end">
        <button
          type="submit"
          disabled={loading}
          className="btn btn-primary"
        >
          {loading ? (
            <>
              <Loader2 className="h-5 w-5 animate-spin" />
              <span>Saving...</span>
            </>
          ) : (
            <>
              <Save className="h-5 w-5" />
              <span>Save Changes</span>
            </>
          )}
        </button>
      </div>

      {mappingCategory && (
        <CategoryMappingModal
          category={mappingCategory}
          appointmentTypes={settings.acuityIntegration.appointmentTypes}
          onClose={() => setMappingCategory(null)}
          onSave={(appointmentTypeId) => {
            const updatedCategories = updateCategoryAppointmentType(
              settings.categories,
              mappingCategory.id,
              appointmentTypeId
            );
            updateSettings({ categories: updatedCategories });
            setMappingCategory(null);
            toast.success('Category mapping updated');
          }}
        />
      )}
    </form>
  );
};

HomepageManager.displayName = 'HomepageManager';

export { HomepageManager };

undefined.displayName = 'undefined';