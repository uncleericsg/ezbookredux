'use client';

import { Calendar, ChevronDown } from 'lucide-react';
import type { FC, useEffect, useState } from 'react';

import type { Team } from '@/types/teams';

interface Assignment {
  id: string;
  bookingId: string;
  teamId: string;
  time: string;
  status: 'accepted' | 'completed' | 'cancelled' | 'pending';
  serviceType: string;
};


TeamAssignments.displayName = 'TeamAssignments';
const mockAssignments: Assignment[] = [
  {
    id: '1',
    bookingId: 'B001',
    teamId: 'T1',
    time: '09:00 AM',
    status: 'accepted',
    serviceType: 'MAINTENANCE'
  },
  {
    id: '2',
    bookingId: 'B002',
    teamId: 'T2',
    time: '10:30 AM',
    status: 'completed',
    serviceType: 'REPAIR'
  },
  {
    id: '3',
    bookingId: 'B003',
    teamId: 'T1',
    time: '02:00 PM',
    status: 'cancelled',
    serviceType: 'INSTALLATION'
  }
];

export interface TeamAssignmentsProps {
  teams: Team[];
  className?: string;
}

const getStatusBadgeClass = (status: Assignment['status']): string => {
  switch (status) {
    case 'accepted':
      return 'bg-green-500/20 text-green-400';
    case 'completed':
      return 'bg-blue-500/20 text-blue-400';
    case 'cancelled':
      return 'bg-red-500/20 text-red-400';
    default:
      return 'bg-gray-500/20 text-gray-400';
  }
};

export const TeamAssignments: FC<TeamAssignmentsProps> = ({ teams }) => {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [selectedTeam, setSelectedTeam] = useState<string>('all');
  const [loading, setLoading] = useState(false);
  const [assignments, setAssignments] = useState<Assignment[]>(mockAssignments);

  useEffect(() => {
    // Simulate loading when date or team changes
    setLoading(true);
    const timer = window.setTimeout(() => {
      setAssignments(mockAssignments.filter(a => 
        (selectedTeam === 'all' || a.teamId === selectedTeam)
      ));
      setLoading(false);
    }, 500);

    return () => window.clearTimeout(timer);
  }, [selectedDate, selectedTeam]);

  return (
    <div className="space-y-6 p-6 pb-48">
      {/* Filters */}
      <div className="flex flex-wrap gap-4">
        {/* Date Picker */}
        <div className="relative">
          <input
            type="date"
            value={selectedDate.toISOString().split('T')[0]}
            onChange={(e) => setSelectedDate(new Date(e.target.value))}
            className="rounded-lg border border-gray-600 bg-gray-700 py-2 pl-10 pr-4 text-white focus:ring-2 focus:ring-blue-500"
          />
          <Calendar className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" />
        </div>

        {/* Team Filter */}
        <div className="relative">
          <select
            value={selectedTeam}
            onChange={(e) => setSelectedTeam(e.target.value)}
            className="rounded-lg border border-gray-600 bg-gray-700 py-2 pl-4 pr-10 text-white focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">All Teams</option>
            {teams.map(team => (
              <option key={team.id} value={team.id}>
                {team.name}
              </option>
            ))}
          </select>
          <ChevronDown className="pointer-events-none absolute right-3 top-2.5 h-5 w-5 text-gray-400" />
        </div>
      </div>

      {/* Assignments Table */}
      <div className="overflow-hidden rounded-lg border border-gray-700 bg-gray-800 shadow-sm">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-700">
            <thead className="bg-gray-900/50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-400">
                  Booking ID
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-400">
                  Team
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-400">
                  Time
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-400">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-400">
                  Service Type
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-700">
              {loading ? (
                <tr>
                  <td colSpan={5} className="px-6 py-4 text-center text-sm text-gray-400">
                    Loading assignments...
                  </td>
                </tr>
              ) : assignments.length === 0 ? (
                <tr>
                  <td colSpan={5} className="px-6 py-4 text-center text-sm text-gray-400">
                    No assignments found for the selected date and team.
                  </td>
                </tr>
              ) : (
                assignments.map(assignment => (
                  <tr key={assignment.id} className="hover:bg-gray-700/50">
                    <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-200">
                      {assignment.bookingId}
                    </td>
                    <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-200">
                      {teams.find(t => t.id === assignment.teamId)?.name}
                    </td>
                    <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-200">
                      {assignment.time}
                    </td>
                    <td className="whitespace-nowrap px-6 py-4">
                      <span className={`rounded-full px-2 py-1 text-xs font-medium ${getStatusBadgeClass(assignment.status)}`}>
                        {assignment.status.charAt(0).toUpperCase() + assignment.status.slice(1)}
                      </span>
                    </td>
                    <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-200">
                      {assignment.serviceType.split('_').join(' ').toLowerCase()}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};



export { TeamAssignments, TeamAssignmentsProps };