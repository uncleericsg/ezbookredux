'use client';

import { motion } from 'framer-motion';
import { Save, Loader2, Palette } from 'lucide-react';
import { type HTMLAttributes } from 'react';

import { Button } from '../../components/ui/Button';
import { useBrandingSettings } from '../../hooks/useBrandingSettings';
import { cn } from '../../lib/utils';
import { ColorPicker } from '../ColorPicker';

import { BrandingPreview } from './BrandingPreview';
import { LogoUploader } from './LogoUploader';

export type HTMLAttributes;
export interface BrandingSettingsData;
export interface BrandingSettingsProps;

interface BrandingSettingsData {
  primaryColor: string;
  secondaryColor: string;
  logo?: string;
  darkModeLogo?: string;
}

interface BrandingSettingsProps extends HTMLAttributes<HTMLDivElement> {
  // Add any specific props here if needed
}

const BrandingSettings = ({ className, ...props }: BrandingSettingsProps) => {
  const { preview, loading, updateSettings, handleLogoChange } = useBrandingSettings();

  return (
    <div className={cn('space-y-6', className)} {...props}>
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Palette className="h-5 w-5" />
          <h2 className="text-xl font-semibold">Branding Settings</h2>
        </div>
        <Button
          onClick={() => updateSettings(preview)}
          disabled={loading}
          className="flex items-center space-x-2"
        >
          {loading ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : (
            <Save className="h-4 w-4" />
          )}
          <span>Save Changes</span>
        </Button>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <div className="space-y-6">
          <div className="space-y-4">
            <h3 className="text-lg font-medium">Colors</h3>
            <div className="space-y-4">
              <ColorPicker
                label="Primary Color"
                value={preview.primaryColor}
                onChange={(color) => updateSettings({ ...preview, primaryColor: color })}
              />
              <ColorPicker
                label="Secondary Color"
                value={preview.secondaryColor}
                onChange={(color) => updateSettings({ ...preview, secondaryColor: color })}
              />
            </div>
          </div>

          <div className="space-y-4">
            <h3 className="text-lg font-medium">Logo</h3>
            <LogoUploader
              currentLogo={preview.logo}
              onLogoChange={(logo) => handleLogoChange(logo)}
            />
          </div>
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          <BrandingPreview {...preview} />
        </motion.div>
      </div>
    </div>
  );
};

BrandingSettings.displayName = 'BrandingSettings';

export type { BrandingSettingsData };
export { BrandingSettings };
