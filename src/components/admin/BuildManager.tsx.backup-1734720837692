'use client';

import { format } from 'date-fns';
import { Upload, History, Loader2, Check, Trash2 } from 'lucide-react';
import { type HTMLAttributes } from 'react';

import { Button } from '../../components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/Card';
import { Checkbox } from '../../components/ui/Checkbox';
import { useBuildManager } from '../../hooks/useBuildManager';
import { cn } from '../../lib/utils';
import { type BuildVersion } from '../../types';

export type HTMLAttributes } from 'react';

export type BuildVersion } from '../../types';

export interface BuildManagerProps;


interface BuildManagerProps extends HTMLAttributes<HTMLDivElement> {}

const BuildManager = ({ className, ...props }: BuildManagerProps) => {
  const {
    versions,
    loading,
    uploading,
    uploadProgress,
    selectedVersions,
    handleUpload,
    handleRollback,
    handleBulkDelete,
    toggleVersionSelection
  } = useBuildManager();

  const confirmRollback = async (version: BuildVersion) => {
    const confirmed = window.confirm(
      `Are you sure you want to rollback to version ${version.version}? This will restart the application.`
    );
    if (confirmed) {
      await handleRollback(version);
    }
  };

  return (
    <Card className={cn('', className)} {...props}>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Upload className="h-5 w-5" />
            <span>Build Manager</span>
          </div>
          {selectedVersions.length > 0 && (
            <Button
              variant="destructive"
              size="sm"
              onClick={handleBulkDelete}
              className="flex items-center space-x-2"
            >
              <Trash2 className="h-4 w-4" />
              <span>Delete Selected</span>
            </Button>
          )}
        </CardTitle>
      </CardHeader>

      <CardContent>
        {/* Upload Section */}
        <div className="mb-6">
          <input
            type="file"
            accept=".zip"
            onChange={(e) => {
              if (e.target.files) {
                handleUpload(e.target.files[0]);
              }
            }}
            className="hidden"
            id="build-upload"
          />
          <label
            htmlFor="build-upload"
            className={cn(
              'flex cursor-pointer items-center justify-center space-x-2 rounded-lg border-2 border-dashed border-gray-600 p-6',
              'hover:border-blue-500 hover:bg-blue-500/10'
            )}
          >
            {uploading ? (
              <>
                <Loader2 className="h-5 w-5 animate-spin" />
                <span>Uploading... {uploadProgress}%</span>
              </>
            ) : (
              <>
                <Upload className="h-5 w-5" />
                <span>Upload New Build</span>
              </>
            )}
          </label>
        </div>

        {/* Versions List */}
        <div className="space-y-4">
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : versions.length === 0 ? (
            <div className="flex items-center justify-center py-8 text-gray-500">
              No versions found
            </div>
          ) : (
            versions.map((version) => (
              <div
                key={version.id}
                className={cn(
                  'flex items-center justify-between rounded-lg border border-gray-700 p-4',
                  'hover:border-blue-500 hover:bg-blue-500/10'
                )}
              >
                <div className="flex items-center space-x-4">
                  <Checkbox
                    checked={selectedVersions.includes(version.id)}
                    onCheckedChange={() => toggleVersionSelection(version.id)}
                  />
                  <div>
                    <div className="flex items-center space-x-2">
                      <span className="font-medium">Version {version.version}</span>
                      {version.current && (
                        <span className="flex items-center space-x-1 rounded-full bg-green-500/20 px-2 py-1 text-xs text-green-500">
                          <Check className="h-3 w-3" />
                          <span>Current</span>
                        </span>
                      )}
                    </div>
                    <div className="text-sm text-gray-500">
                      Uploaded {format(new Date(version.uploadedAt), 'PPp')}
                    </div>
                  </div>
                </div>

                <div className="flex items-center space-x-2">
                  {!version.current && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => confirmRollback(version)}
                      className="flex items-center space-x-2"
                    >
                      <History className="h-4 w-4" />
                      <span>Rollback</span>
                    </Button>
                  )}
                </div>
              </div>
            ))
          )}
        </div>
      </CardContent>
    </Card>
  );
};

BuildManager.displayName = 'BuildManager';

export { BuildManager };

undefined.displayName = 'undefined';