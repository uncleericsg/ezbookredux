'use client';

import { Key, Loader2, Save, MessageSquare } from 'lucide-react';
import React from 'react';

import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { Input } from '@/components/ui/Input';
import { Label } from '@/components/ui/Label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/Select';
import { Slider } from '@/components/ui/Slider';
import { Switch } from '@/components/ui/Switch';
import { cn } from '@/lib/utils';
import type { ChatGPTSettings as ChatGPTSettingsType } from '@/types';

export interface ChatGPTSettingsProps;






  loading?: boolean;
  updateSettings: (settings: Partial<ChatGPTSettingsType>) => void;
  onSave: () => Promise<void>;
  onTest?: () => Promise<void>;
}

const ChatGPTSettings = ({
  settings,
  loading = false,
  updateSettings,
  onSave,
  onTest,
  className,
  ...props
}: ChatGPTSettingsProps) => {
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await onSave();
  };

  return (
    <Card className={cn('', className)} {...props}>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <MessageSquare className="h-5 w-5" />
            <span>ChatGPT Integration</span>
          </div>
          <Button
            type="submit"
            disabled={loading}
            onClick={handleSubmit}
            className="flex items-center space-x-2"
          >
            {loading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Save className="h-4 w-4" />
            )}
            <span>Save Changes</span>
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <Label>API Key</Label>
              <div className="flex items-center space-x-2">
                <Input
                  type="password"
                  value={settings.apiKey}
                  onChange={(e) => updateSettings({ apiKey: e.target.value })}
                  placeholder="sk-..."
                />
                {onTest && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={onTest}
                    disabled={loading || !settings.apiKey}
                  >
                    <Key className="h-4 w-4" />
                  </Button>
                )}
              </div>
            </div>

            <div>
              <Label>Model</Label>
              <Select
                value={settings.model}
                onValueChange={(value) => updateSettings({ model: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select model" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="gpt-4">GPT-4</SelectItem>
                  <SelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>Temperature</Label>
              <Slider
                value={[settings.temperature]}
                onValueChange={([value]) => updateSettings({ temperature: value })}
                min={0}
                max={2}
                step={0.1}
              />
            </div>

            <div className="flex items-center justify-between">
              <Label>Stream Responses</Label>
              <Switch
                checked={settings.stream}
                onCheckedChange={(checked) => updateSettings({ stream: checked })}
              />
            </div>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

ChatGPTSettings.displayName = 'ChatGPTSettings';

export { ChatGPTSettings };

undefined.displayName = 'undefined';