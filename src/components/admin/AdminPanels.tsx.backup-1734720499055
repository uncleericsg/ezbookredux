'use client';

import { NavigateNext as NavigateNextIcon } from '@mui/icons-material';
import { Box, Typography, Paper, Fade, useTheme, Breadcrumbs, Link } from '@mui/material';
import type { FC, HTMLAttributes } from 'react';

import { tabs } from './AdminNav';
import { AdminPanelLoader } from './AdminPanelLoader';
import type { AdminPanelType } from './AdminPanelLoader';

export interface AdminPanelsProps;
export interface BreadcrumbItem;









interface AdminPanelsProps extends HTMLAttributes<HTMLDivElement> {
  activeTab: number;
}

const getTabTitle = (tab: number): string => {
  const validTab = Math.max(0, Math.min(tab, tabs.length - 1));
  return tabs[validTab].label;
};

interface BreadcrumbItem {
  label: string;
  href: string;
}

const getBreadcrumbPath = (currentTab: (typeof tabs)[number]): BreadcrumbItem[] => {
  return [
    { label: 'Admin', href: '/admin' },
    { label: currentTab.label, href: `/admin/${currentTab.id}` }
  ];
};

const AdminPanels: FC<AdminPanelsProps> = ({ activeTab }) => {
  const _theme = useTheme();
  const validTab = Math.max(0, Math.min(activeTab, tabs.length - 1));
  const currentTab = tabs[validTab];
  const panelType = currentTab.id as AdminPanelType;
  const breadcrumbs = getBreadcrumbPath(currentTab);

  return (
    <Fade in timeout={300}>
      <Box sx={{ width: '100%', height: '100%', p: 3 }}>
        <Paper 
          elevation={0}
          sx={{
            p: 3,
            height: '100%',
            backgroundColor: 'background.paper',
            borderRadius: (_theme) => _theme.shape.borderRadius
          }}
        >
          <Box sx={{ mb: 4 }}>
            <Breadcrumbs separator={<NavigateNextIcon fontSize="small" />} aria-label="breadcrumb">
              {breadcrumbs.map((crumb, index) => {
                const isLast = index === breadcrumbs.length - 1;
                return isLast ? (
                  <Typography key={crumb.label} color="text.primary" sx={{ fontWeight: 'medium' }}>
                    {crumb.label}
                  </Typography>
                ) : (
                  <Link
                    key={crumb.label}
                    href={crumb.href}
                    color="inherit"
                    sx={{
                      textDecoration: 'none',
                      '&:hover': { 
                        textDecoration: 'underline',
                        color: 'primary.main'
                      }
                    }}
                  >
                    {crumb.label}
                  </Link>
                );
              })}
            </Breadcrumbs>
            <Typography variant="h4" component="h1" sx={{ mt: 1 }}>
              {getTabTitle(validTab)}
            </Typography>
          </Box>
          <AdminPanelLoader panel={panelType} />
        </Paper>
      </Box>
    </Fade>
  );
};

AdminPanels.displayName = 'AdminPanels';

export { AdminPanels };

undefined.displayName = 'undefined';