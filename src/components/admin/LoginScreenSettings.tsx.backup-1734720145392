'use client';

import { motion } from 'framer-motion';
import { Save, Loader2, AlertTriangle } from 'lucide-react';
import React from 'react';

import type { AppSettings } from '../../types/appSettings';

export interface LoginScreenSettingsProps extends React.HTMLAttributes<HTMLDivElement> {
  settings: AppSettings;
  loading?: boolean;
  updateSettings: (settings: Partial<AppSettings>) => void;
  onSave: () => Promise<void>;
}

const LoginScreenSettings = ({
  settings,
  loading = false,
  updateSettings,
  onSave,
  className,
  ...props
}: LoginScreenSettingsProps) => {
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await onSave();
  };

  const handleToggle = () => {
    updateSettings({
      loginScreenEnabled: !settings.loginScreenEnabled
    });
  };

  return (
    <form onSubmit={handleSubmit} className={`space-y-6 ${className}`} {...props}>
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-xl font-semibold text-white">Login Screen</h2>
            <p className="text-gray-400 text-sm mt-1">
              Configure the login screen settings for your application
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                className="sr-only peer"
                checked={settings.loginScreenEnabled}
                onChange={handleToggle}
              />
              <motion.div
                className={`w-11 h-6 rounded-full peer ${
                  settings.loginScreenEnabled ? 'bg-blue-500' : 'bg-gray-600'
                } peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-800`}
                initial={false}
                animate={{
                  backgroundColor: settings.loginScreenEnabled ? '#3B82F6' : '#4B5563'
                }}
              >
                <motion.div
                  className="w-4 h-4 bg-white rounded-full"
                  initial={false}
                  animate={{
                    x: settings.loginScreenEnabled ? 24 : 4,
                    y: 4
                  }}
                  transition={{
                    type: 'spring',
                    stiffness: 500,
                    damping: 30
                  }}
                />
              </motion.div>
              <span className="ml-3 text-sm font-medium text-gray-300">
                {settings.loginScreenEnabled ? 'Enabled' : 'Disabled'}
              </span>
            </label>
          </div>
        </div>

        {settings.loginScreenEnabled && (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Welcome Message
              </label>
              <input
                type="text"
                value={settings.loginWelcomeMessage || ''}
                onChange={(e) =>
                  updateSettings({ loginWelcomeMessage: e.target.value })
                }
                className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2"
                placeholder="Welcome to our app!"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Login Instructions
              </label>
              <textarea
                value={settings.loginInstructions || ''}
                onChange={(e) =>
                  updateSettings({ loginInstructions: e.target.value })
                }
                className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 h-24"
                placeholder="Please enter your credentials to continue..."
              />
            </div>

            {!settings.loginInstructions && (
              <div className="flex items-center space-x-2 text-yellow-500">
                <AlertTriangle className="h-4 w-4" />
                <span className="text-sm">
                  Adding login instructions helps users understand how to log in
                </span>
              </div>
            )}
          </div>
        )}
      </div>

      <div className="flex justify-end">
        <button
          type="submit"
          disabled={loading}
          className="btn btn-primary"
        >
          {loading ? (
            <>
              <Loader2 className="h-5 w-5 animate-spin" />
              <span>Saving...</span>
            </>
          ) : (
            <>
              <Save className="h-5 w-5" />
              <span>Save Changes</span>
            </>
          )}
        </button>
      </div>
    </form>
  );
};

LoginScreenSettings.displayName = 'LoginScreenSettings';

export { LoginScreenSettings };
