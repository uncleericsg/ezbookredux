'use client';

import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import classNames from 'classnames';
import { Plus, Trash2, Loader2, GripVertical, Search, Bell, ToggleLeft, ToggleRight, Link } from 'lucide-react';
import React, { useState, useCallback } from 'react';
import { toast } from 'sonner';

import type { PushTemplate } from '../../types/notifications';

export type DragEndResult;
export interface PushManagerProps;

export type DragEndResult;
export interface PushManagerProps;

export type DragEndResult;
export interface PushManagerProps;

export type DragEndResult;
export interface PushManagerProps;

type DragEndResult = {
  destination?: {
    index: number;
  };
  source: {
    index: number;
  };
};

export interface PushManagerProps extends React.HTMLAttributes<HTMLDivElement> {
  // Add any specific props here if needed
}

export const PushManager = ({ className, ...props }: PushManagerProps) => {
  const [templates, setTemplates] = useState<PushTemplate[]>([]);
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());
  const [isDeleting, setIsDeleting] = useState(false);

  const handleDragEnd = useCallback((result: DragEndResult) => {
    if (!result.destination) return;

    const items = Array.from(templates);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    setTemplates(items);
  }, [templates]);

  const handleDeleteSelected = async () => {
    try {
      setIsDeleting(true);
      // Here you would typically make an API call to delete the templates
      setTemplates(prev => prev.filter(t => !selectedItems.has(t.id)));
      toast.success('Selected templates deleted');
      setSelectedItems(new Set());
    } catch (error) {
      toast.error('Failed to delete templates');
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <div className={classNames("space-y-6", className)} {...props}>
      {/* Header Controls */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div className="relative flex-1 max-w-md">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search templates..."
            className="w-full pl-10 pr-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <div className="flex items-center space-x-4">
          {selectedItems.size > 0 && (
            <button
              onClick={handleDeleteSelected}
              disabled={isDeleting}
              className="flex items-center space-x-2 px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg text-white disabled:opacity-50"
            >
              {isDeleting ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Trash2 className="h-4 w-4" />
              )}
              <span>Delete Selected</span>
            </button>
          )}
          <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white">
            <Plus className="h-4 w-4" />
            <span>Add Template</span>
          </button>
        </div>
      </div>

      {/* Templates List */}
      <DragDropContext onDragEnd={handleDragEnd}>
        <Droppable droppableId="templates">
          {(provided) => (
            <div
              {...provided.droppableProps}
              ref={provided.innerRef}
              className="space-y-4"
            >
              {templates.map((template, index) => (
                <Draggable
                  key={template.id}
                  draggableId={template.id}
                  index={index}
                >
                  {(provided, snapshot) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.draggableProps}
                      className={classNames(
                        "group relative rounded-lg border border-gray-700 bg-gray-800 p-4",
                        snapshot.isDragging && "shadow-lg"
                      )}
                    >
                      <div className="flex items-start space-x-4">
                        <div
                          {...provided.dragHandleProps}
                          className="mt-1 cursor-grab active:cursor-grabbing"
                        >
                          <GripVertical className="h-5 w-5 text-gray-500" />
                        </div>
                        <input
                          type="checkbox"
                          checked={selectedItems.has(template.id)}
                          onChange={() => {
                            const newSelected = new Set(selectedItems);
                            if (!selectedItems.has(template.id)) {
                              newSelected.add(template.id);
                            } else {
                              newSelected.delete(template.id);
                            }
                            setSelectedItems(newSelected);
                          }}
                          className="mt-1 rounded border-gray-600 bg-gray-700 text-blue-500 focus:ring-blue-500"
                        />
                        <div className="flex-1 space-y-2">
                          <div className="flex items-center justify-between">
                            <input
                              type="text"
                              value={template.title}
                              onChange={(e) => {
                                const newTemplates = [...templates];
                                newTemplates[index] = {
                                  ...template,
                                  title: e.target.value,
                                };
                                setTemplates(newTemplates);
                              }}
                              className="flex-1 bg-transparent text-lg font-semibold focus:outline-none"
                              placeholder="Template Title"
                            />
                            <button
                              onClick={() => {
                                const newTemplates = [...templates];
                                newTemplates[index] = {
                                  ...template,
                                  enabled: !template.enabled,
                                };
                                setTemplates(newTemplates);
                              }}
                              className="ml-2 p-1 hover:text-blue-500"
                            >
                              {template.enabled ? (
                                <ToggleRight className="h-5 w-5" />
                              ) : (
                                <ToggleLeft className="h-5 w-5 text-gray-500" />
                              )}
                            </button>
                          </div>
                          <div className="flex items-center justify-between text-sm text-gray-400">
                            <div className="flex items-center space-x-4">
                              <select
                                value={template.triggerType}
                                onChange={(e) => {
                                  const newTemplates = [...templates];
                                  newTemplates[index] = {
                                    ...template,
                                    triggerType: e.target.value,
                                  };
                                  setTemplates(newTemplates);
                                }}
                                className="bg-gray-700 border-gray-600 rounded-md text-sm"
                              >
                                <option value="manual">Manual</option>
                                <option value="scheduled">Scheduled</option>
                                <option value="event">Event-based</option>
                              </select>
                              <div className="flex items-center space-x-1">
                                <Bell className="h-4 w-4" />
                                <span>{template.notificationType}</span>
                              </div>
                              {template.linkedService && (
                                <div className="flex items-center space-x-1">
                                  <Link className="h-4 w-4" />
                                  <span>{template.linkedService}</span>
                                </div>
                              )}
                            </div>
                            <span>Last modified: {template.lastModified}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>
    </div>
  );
};



PushManager.displayName = 'PushManager';

undefined.displayName = 'undefined';