'use client';

import classNames from 'classnames';
import { Key, CreditCard, MessageSquare, Bell, TestTube, Archive, Users } from 'lucide-react';
import React from 'react';

import { useSettingsForm } from '@/hooks/useSettingsForm';
import { useSettingsSections, SECTION_IDS } from '@/hooks/useSettingsSections';
import { updateAppSettings, fetchAppSettings } from '@/services/appSettings';
import { defaultAppSettings, type AppSettings } from '@/types/appSettings';

import { ChatGPTSettings } from './ChatGPTSettings';
import { CypressSettings } from './CypressSettings';
import { FCMTester } from './FCMTester';
import { LoginScreenSettings } from './LoginScreenSettings';
import { RepairShoprSettings } from './RepairShoprSettings';
import { SettingsBackup } from './SettingsBackup';
import { SettingsSection } from './SettingsSection';
import { StripeSettings } from './StripeSettings';

export type AppSettings;
export interface AdminSettingsProps;

export interface AdminSettingsProps extends React.HTMLAttributes<HTMLDivElement> {}

export const AdminSettings = React.memo(function AdminSettings({
  className,
  ...props
}: AdminSettingsProps) {
  const {
    settings: appSettings,
    loading: appLoading,
    updateSettings: updateAppSettingsState,
    handleSubmit: handleAppSave
  } = useSettingsForm<AppSettings>({
    defaultValues: defaultAppSettings,
    onSubmit: updateAppSettings,
    onLoad: fetchAppSettings
  });

  const { isSectionExpanded, toggleSection } = useSettingsSections();

  return (
    <div className={classNames('space-y-6 pb-32', className)} {...props}>
      <SettingsSection
        id={SECTION_IDS.APP_SETTINGS}
        title="Application Settings"
        icon={<Users />}
        expanded={isSectionExpanded(SECTION_IDS.APP_SETTINGS)}
        onToggle={() => toggleSection(SECTION_IDS.APP_SETTINGS)}
      >
        <LoginScreenSettings
          settings={appSettings}
          loading={appLoading}
          updateSettings={updateAppSettingsState}
          onSave={handleAppSave}
        />
      </SettingsSection>

      <SettingsSection
        id={SECTION_IDS.REPAIR_SHOPR}
        title="RepairShopr Integration"
        icon={<Key />}
        expanded={isSectionExpanded(SECTION_IDS.REPAIR_SHOPR)}
        onToggle={() => toggleSection(SECTION_IDS.REPAIR_SHOPR)}
      >
        <RepairShoprSettings
          settings={appSettings}
          loading={appLoading}
          updateSettings={updateAppSettingsState}
        />
      </SettingsSection>

      <SettingsSection
        id={SECTION_IDS.STRIPE}
        title="Stripe Integration"
        icon={<CreditCard />}
        expanded={isSectionExpanded(SECTION_IDS.STRIPE)}
        onToggle={() => toggleSection(SECTION_IDS.STRIPE)}
      >
        <StripeSettings
          settings={appSettings}
          loading={appLoading}
          updateSettings={updateAppSettingsState}
        />
      </SettingsSection>

      <SettingsSection
        id={SECTION_IDS.CHATGPT}
        title="ChatGPT Integration"
        icon={<MessageSquare />}
        expanded={isSectionExpanded(SECTION_IDS.CHATGPT)}
        onToggle={() => toggleSection(SECTION_IDS.CHATGPT)}
      >
        <ChatGPTSettings
          settings={appSettings.chatGPTSettings}
          loading={appLoading}
          updateSettings={(updates) => updateAppSettingsState({ chatGPTSettings: updates })}
        />
      </SettingsSection>

      <SettingsSection
        id={SECTION_IDS.NOTIFICATIONS}
        title="Push Notifications"
        icon={<Bell />}
        expanded={isSectionExpanded(SECTION_IDS.NOTIFICATIONS)}
        onToggle={() => toggleSection(SECTION_IDS.NOTIFICATIONS)}
      >
        <FCMTester />
      </SettingsSection>

      <SettingsSection
        id={SECTION_IDS.CYPRESS}
        title="Cypress Testing"
        icon={<TestTube />}
        expanded={isSectionExpanded(SECTION_IDS.CYPRESS)}
        onToggle={() => toggleSection(SECTION_IDS.CYPRESS)}
      >
        <CypressSettings
          settings={appSettings}
          loading={appLoading}
          updateSettings={updateAppSettingsState}
        />
      </SettingsSection>

      <SettingsSection
        id={SECTION_IDS.BACKUP}
        title="Settings Backup"
        icon={<Archive />}
        expanded={isSectionExpanded(SECTION_IDS.BACKUP)}
        onToggle={() => toggleSection(SECTION_IDS.BACKUP)}
      >
        <SettingsBackup settings={appSettings} />
      </SettingsSection>
    </div>
  );
});

AdminSettings.displayName = 'AdminSettings';
