'use client';

import { Box, Typography } from '@mui/material';
import { motion } from 'framer-motion';
import { Eye, Save, Loader2 } from 'lucide-react';
import React, { useState } from 'react';
import { toast } from 'sonner';

import { cn } from '@/lib/utils';

export interface BannerConfig;
export interface BannerSettingsProps;

export interface BannerConfig;
export interface BannerSettingsProps;

interface BannerConfig {
  enabled: boolean;
  serviceDueThreshold: number;
  regularUsers: {
    enabled: boolean;
    threshold: number;
    message: string;
  };
  amcUsers: {
    enabled: boolean;
    threshold: number;
    message: string;
  };
  style: {
    backgroundColor: string;
    textColor: string;
  };
}

const defaultConfig: BannerConfig = {
  enabled: false,
  serviceDueThreshold: 7,
  regularUsers: {
    enabled: false,
    threshold: 7,
    message: '{days} days until service is due'
  },
  amcUsers: {
    enabled: false,
    threshold: 7,
    message: '{days} days until next AMC service'
  },
  style: {
    backgroundColor: '#1f2937',
    textColor: '#ffffff'
  }
};

interface BannerSettingsProps extends React.HTMLAttributes<HTMLDivElement> {}

const BannerSettings: React.FC<BannerSettingsProps> = (props) => {
  const [config, setConfig] = useState<BannerConfig>(defaultConfig);
  const [loading, setLoading] = useState(false);
  const [showPreview, setShowPreview] = useState(false);

  const handleSave = async () => {
    try {
      setLoading(true);
      // In a real app, this would be an API call
      await new Promise((resolve) => {
        window.setTimeout(resolve, 1000);
      });
      toast.success('Banner settings saved successfully');
    } catch (error) {
      toast.error('Failed to save banner settings');
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setConfig(defaultConfig);
    toast.success('Settings reset to default');
  };

  return (
    <Box>
      <Typography variant="h5" gutterBottom>
        Service Due Banner Settings
      </Typography>
      <div className="rounded-lg border border-gray-700 bg-gray-800 p-6">
        <div className="mb-6 flex items-center justify-between">
          <h2 className="text-xl font-semibold">Service Due Banner Settings</h2>
          <button
            onClick={() => setShowPreview(!showPreview)}
            className={cn(
              'inline-flex items-center rounded-md px-4 py-2',
              'bg-gray-700 text-gray-100 transition-colors',
              'hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500'
            )}
          >
            <Eye className="mr-2 h-4 w-4" />
            <span>{showPreview ? 'Hide' : 'Show'} Preview</span>
          </button>
        </div>

        {showPreview && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="mb-6 rounded-lg p-4"
            style={{ backgroundColor: config.style.backgroundColor }}
          >
            <p className="text-right" style={{ color: config.style.textColor }}>
              {config.regularUsers.message.replace('{days}', '7')}
            </p>
          </motion.div>
        )}

        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <label className="text-sm font-medium text-gray-300">Enable Service Due Banner</label>
            <label className="relative inline-flex cursor-pointer items-center">
              <input
                type="checkbox"
                checked={config.enabled}
                onChange={(e) => setConfig({ ...config, enabled: e.target.checked })}
                className="peer sr-only"
              />
              <div className={cn(
                'h-6 w-11 rounded-full bg-gray-600 transition-colors',
                'after:absolute after:left-[2px] after:top-[2px]',
                'after:h-5 after:w-5 after:rounded-full after:bg-white after:transition-all',
                'peer-checked:bg-blue-500 peer-checked:after:translate-x-full',
                'peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-500'
              )} />
            </label>
          </div>

          <div className="space-y-4">
            <label className="block text-sm font-medium text-gray-300">
              Service Due Threshold (days)
            </label>
            <input
              type="number"
              value={config.serviceDueThreshold}
              onChange={(e) => setConfig({
                ...config,
                serviceDueThreshold: parseInt(e.target.value, 10)
              })}
              className={cn(
                'block w-full rounded-md border-gray-600 bg-gray-700 px-4 py-2',
                'text-gray-100 placeholder-gray-400',
                'focus:border-blue-500 focus:ring-blue-500'
              )}
            />
          </div>

          <div className="space-y-4">
            <h3 className="text-lg font-medium">Regular Users</h3>
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-gray-300">Enable for Regular Users</label>
              <label className="relative inline-flex cursor-pointer items-center">
                <input
                  type="checkbox"
                  checked={config.regularUsers.enabled}
                  onChange={(e) => setConfig({
                    ...config,
                    regularUsers: {
                      ...config.regularUsers,
                      enabled: e.target.checked
                    }
                  })}
                  className="peer sr-only"
                />
                <div className={cn(
                  'h-6 w-11 rounded-full bg-gray-600 transition-colors',
                  'after:absolute after:left-[2px] after:top-[2px]',
                  'after:h-5 after:w-5 after:rounded-full after:bg-white after:transition-all',
                  'peer-checked:bg-blue-500 peer-checked:after:translate-x-full',
                  'peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-500'
                )} />
              </label>
            </div>
            <input
              type="text"
              value={config.regularUsers.message}
              onChange={(e) => setConfig({
                ...config,
                regularUsers: {
                  ...config.regularUsers,
                  message: e.target.value
                }
              })}
              className={cn(
                'block w-full rounded-md border-gray-600 bg-gray-700 px-4 py-2',
                'text-gray-100 placeholder-gray-400',
                'focus:border-blue-500 focus:ring-blue-500'
              )}
            />
          </div>

          <div className="space-y-4">
            <h3 className="text-lg font-medium">AMC Users</h3>
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-gray-300">Enable for AMC Users</label>
              <label className="relative inline-flex cursor-pointer items-center">
                <input
                  type="checkbox"
                  checked={config.amcUsers.enabled}
                  onChange={(e) => setConfig({
                    ...config,
                    amcUsers: {
                      ...config.amcUsers,
                      enabled: e.target.checked
                    }
                  })}
                  className="peer sr-only"
                />
                <div className={cn(
                  'h-6 w-11 rounded-full bg-gray-600 transition-colors',
                  'after:absolute after:left-[2px] after:top-[2px]',
                  'after:h-5 after:w-5 after:rounded-full after:bg-white after:transition-all',
                  'peer-checked:bg-blue-500 peer-checked:after:translate-x-full',
                  'peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-500'
                )} />
              </label>
            </div>
            <input
              type="text"
              value={config.amcUsers.message}
              onChange={(e) => setConfig({
                ...config,
                amcUsers: {
                  ...config.amcUsers,
                  message: e.target.value
                }
              })}
              className={cn(
                'block w-full rounded-md border-gray-600 bg-gray-700 px-4 py-2',
                'text-gray-100 placeholder-gray-400',
                'focus:border-blue-500 focus:ring-blue-500'
              )}
            />
          </div>

          <div className="flex items-center justify-end space-x-4">
            <button
              onClick={handleReset}
              className={cn(
                'rounded-md px-4 py-2 text-sm font-medium',
                'bg-gray-700 text-gray-100 transition-colors',
                'hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500'
              )}
            >
              Reset to Default
            </button>
            <button
              onClick={handleSave}
              disabled={loading}
              className={cn(
                'inline-flex items-center rounded-md px-4 py-2',
                'bg-blue-500 text-white transition-colors',
                'hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500',
                'disabled:cursor-not-allowed disabled:opacity-50'
              )}
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  <span>Saving...</span>
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  <span>Save Changes</span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </Box>
  );
};

BannerSettings.displayName = 'BannerSettings';

export type { BannerConfig };
export { BannerSettings };
