'use client';

import { motion } from 'framer-motion';
import { Loader2, TrendingUp, Users, Star } from 'lucide-react';
import { type FC, type HTMLAttributes } from 'react';

import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/Card';
import { useAnalytics } from '../../hooks/useAnalytics';
import { cn } from '../../lib/utils';

export type FC;
export type HTMLAttributes;
export interface AnalyticsProps;

export type FC;
export type HTMLAttributes;
export interface AnalyticsProps;

export type FC;
export type HTMLAttributes;
export interface AnalyticsProps;

export type FC;
export type HTMLAttributes;
export interface AnalyticsProps;

interface AnalyticsProps extends HTMLAttributes<HTMLDivElement> {}

const Analytics: FC<AnalyticsProps> = ({ className, ...props }) => {
  const { data, loading, error } = useAnalytics();

  if (loading) {
    return (
      <div className="flex h-64 items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="rounded-lg border border-red-500/20 bg-red-500/10 p-4 text-red-400">
        {error}
      </div>
    );
  }

  return (
    <div className={cn('space-y-4', className)} {...props}>
      <div className="grid gap-4 md:grid-cols-3">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Active AMCs</CardTitle>
              <TrendingUp className="h-4 w-4 text-green-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{data.metrics?.activeAMCs || 0}</div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Completed Services</CardTitle>
              <Users className="h-4 w-4 text-blue-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{data.metrics?.completedServices || 0}</div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Average Rating</CardTitle>
              <Star className="h-4 w-4 text-yellow-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {data.metrics?.averageRating?.toFixed(1) || 0}
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      <div className="rounded-lg border border-gray-700 bg-gray-800 p-6">
        <h2 className="mb-6 text-xl font-semibold">Service Bookings</h2>
        <div className="flex h-64 items-end space-x-2">
          {data.bookings.map((booking) => (
            <div key={booking.month} className="flex flex-1 flex-col items-center">
              <div
                className={cn(
                  'w-full rounded-t-lg bg-blue-500 transition-all',
                  'hover:bg-blue-400 hover:shadow-lg'
                )}
                style={{
                  height: `${(booking.count / Math.max(...data.bookings.map((b) => b.count))) * 100}%`,
                  minHeight: '4px'
                }}
              />
              <p className="mt-2 text-sm text-gray-400">{booking.month}</p>
              <p className="text-sm font-medium">{booking.count}</p>
            </div>
          ))}
        </div>
      </div>

      <div className="rounded-lg border border-gray-700 bg-gray-800 p-6">
        <h2 className="mb-6 text-xl font-semibold">Customer Satisfaction</h2>
        <div className="flex h-64 items-end space-x-2">
          {data.satisfaction.map((rating) => (
            <div key={rating.rating} className="flex flex-1 flex-col items-center">
              <div
                className={cn(
                  'w-full rounded-t-lg bg-green-500 transition-all',
                  'hover:bg-green-400 hover:shadow-lg'
                )}
                style={{
                  height: `${(rating.count / Math.max(...data.satisfaction.map((r) => r.count))) * 100}%`,
                  minHeight: '4px'
                }}
              />
              <p className="mt-2 text-sm text-gray-400">{rating.rating}â˜…</p>
              <p className="text-sm font-medium">{rating.count}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

Analytics.displayName = 'Analytics';

export { Analytics };

undefined.displayName = 'undefined';