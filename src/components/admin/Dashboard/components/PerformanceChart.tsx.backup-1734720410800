import { Box, Skeleton, useTheme } from '@mui/material';
import { format } from 'date-fns';
import React from 'react';
import {

export interface PerformanceData;
export interface PerformanceChartProps;
export interface CustomTooltipProps;

export interface PerformanceData;
export interface PerformanceChartProps;
export interface CustomTooltipProps;

export interface PerformanceData;
export interface PerformanceChartProps;
export interface CustomTooltipProps;
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend
} from 'recharts';

export interface PerformanceData {
  date: string;
  contracts: number;
  revenue: number;
  serviceRate: number;
};


PerformanceChart.displayName = 'PerformanceChart';
export interface PerformanceChartProps {
  data: PerformanceData[];
  timeRange: 'daily' | 'weekly' | 'monthly';
  loading?: boolean;
}

export const formatDate = (dateStr: string, timeRange: string): string => {
  const date = new Date(dateStr);
  switch (timeRange) {
    case 'daily':
      return format(date, 'MMM d');
    case 'weekly':
      return format(date, 'MMM d');
    case 'monthly':
      return format(date, 'MMM yyyy');
    default:
      return dateStr;
  }
};

interface CustomTooltipProps {
  active?: boolean;
  payload?: Array<{
    value: number;
    name: string;
    color: string;
  }>;
  label?: string;
}

const CustomTooltip: React.FC<CustomTooltipProps> = ({ active, payload, label }) => {
  if (!active || !payload) return null;

  return (
    <Box sx={{ 
      bgcolor: 'background.paper',
      p: 2,
      border: 1,
      borderColor: 'divider',
      borderRadius: 1
    }}>
      <div>{label}</div>
      {payload.map((entry, index) => (
        <div key={index} style={{ color: entry.color }}>
          {entry.name}: {entry.value}
        </div>
      ))}
    </Box>
  );
};

const PerformanceChart: React.FC<PerformanceChartProps> = ({
  data,
  timeRange,
  loading = false
}) => {
  const theme = useTheme();

  if (loading) {
    return <Skeleton variant="rectangular" height={400} />;
  }

  return (
    <Box sx={{ width: '100%', height: 400 }}>
      <ResponsiveContainer>
        <LineChart
          data={data}
          margin={{
            top: 20,
            right: 30,
            left: 20,
            bottom: 20
          }}
        >
          <CartesianGrid
            strokeDasharray="3 3"
            stroke="rgba(255, 255, 255, 0.1)"
          />
          <XAxis
            dataKey="date"
            tickFormatter={(value) => formatDate(value, timeRange)}
            stroke="rgba(255, 255, 255, 0.5)"
          />
          <YAxis
            yAxisId="left"
            stroke="rgba(255, 255, 255, 0.5)"
            tickFormatter={(value) =>
              new Intl.NumberFormat('en-SG', {
                style: 'currency',
                currency: 'SGD',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              }).format(value)
            }
          />
          <YAxis
            yAxisId="right"
            orientation="right"
            stroke="rgba(255, 255, 255, 0.5)"
            tickFormatter={(value) => `${value}%`}
          />
          <Tooltip content={<CustomTooltip />} />
          <Legend
            wrapperStyle={{
              paddingTop: '20px'
            }}
          />
          <Line
            yAxisId="left"
            type="monotone"
            dataKey="revenue"
            stroke={theme.palette.primary.main}
            name="Revenue"
            strokeWidth={2}
            dot={false}
          />
          <Line
            yAxisId="right"
            type="monotone"
            dataKey="serviceRate"
            stroke={theme.palette.secondary.main}
            name="Service Rate"
            strokeWidth={2}
            dot={false}
          />
        </LineChart>
      </ResponsiveContainer>
    </Box>
  );
};



export { PerformanceChart, PerformanceData, PerformanceChartProps };