export type { PerformanceData, PerformanceChartProps };

import { Box, useTheme } from '@mui/material';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ChartOptions
} from 'chart.js';
import React from 'react';
import { Line } from 'react-chartjs-2';

export interface PerformanceData;
export interface PerformanceChartProps;

export interface PerformanceData;
export interface PerformanceChartProps;

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface PerformanceData {
  date: string;
  contracts: number;
  revenue: number;
  serviceRate: number;
}

interface PerformanceChartProps extends React.HTMLAttributes<HTMLDivElement> {
  data: PerformanceData[];
  loading?: boolean;
}

const PerformanceChart: React.FC<PerformanceChartProps> = ({ data, loading = false }) => {
  const theme = useTheme();

  if (loading) {
    return (
      <Box sx={{ height: 400, width: '100%' }}>
        <Box sx={{ width: '100%', height: '100%' }}>
          <Box sx={{ borderRadius: 1, height: '100%', backgroundColor: 'background.paper' }} />
        </Box>
      </Box>
    );
  }

  const chartData = {
    labels: data.map((item) => item.date),
    datasets: [
      {
        label: 'Contracts',
        data: data.map((item) => item.contracts),
        borderColor: theme.palette.primary.main,
        backgroundColor: theme.palette.primary.light,
        tension: 0.4
      },
      {
        label: 'Revenue',
        data: data.map((item) => item.revenue),
        borderColor: theme.palette.success.main,
        backgroundColor: theme.palette.success.light,
        tension: 0.4
      },
      {
        label: 'Service Rate',
        data: data.map((item) => item.serviceRate),
        borderColor: theme.palette.info.main,
        backgroundColor: theme.palette.info.light,
        tension: 0.4
      }
    ]
  };

  const options: ChartOptions<'line'> = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const
      },
      title: {
        display: true,
        text: 'Performance Metrics'
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        grid: {
          color: theme.palette.divider
        }
      },
      x: {
        grid: {
          color: theme.palette.divider
        }
      }
    }
  };

  return (
    <Box sx={{ height: 400, width: '100%' }}>
      <Line options={options} data={chartData} />
    </Box>
  );
};

PerformanceChart.displayName = 'PerformanceChart';

export { PerformanceChart };
