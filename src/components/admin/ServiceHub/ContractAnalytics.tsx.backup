import React from 'react';
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from 'recharts';

import { Card } from "@/components/ui/Card";
import { ServiceContract, ContractAnalytics as Analytics } from '@/types/contracts';

export interface ContractAnalyticsProps {
  contracts: ServiceContract[];
  analytics: Analytics;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'] as const;

const ContractAnalytics: React.FC<ContractAnalyticsProps> = ({
  contracts = [],
  analytics
}) => {
  // Prepare data for charts
  const contractsByType = (contracts || []).reduce((acc, contract) => {
    acc[contract.contractType] = (acc[contract.contractType] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const pieData = Object.entries(contractsByType).map(([name, value]) => ({
    name,
    value
  }));

  const monthlyRevenue = Array.from({ length: 12 }, (_, i) => ({
    month: new Date(2024, i).toLocaleString('default', { month: 'short' }),
    revenue: Math.round(Math.random() * 10000) // Mock data
  }));

  const serviceCompletion = Array.from({ length: 12 }, (_, i) => ({
    month: new Date(2024, i).toLocaleString('default', { month: 'short' }),
    completed: Math.round(Math.random() * 50), // Mock data
    scheduled: Math.round(Math.random() * 50) // Mock data
  }));

  if (!analytics) {
    return (
      <div className="flex items-center justify-center h-[400px]">
        <p className="text-gray-500 dark:text-gray-400">Loading analytics data...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="p-4 bg-white dark:bg-gray-800">
          <h3 className="text-sm font-medium text-gray-600 dark:text-gray-300">Renewal Rate</h3>
          <p className="text-2xl font-bold mt-1 text-gray-900 dark:text-white">
            {analytics.renewalRate}%
          </p>
        </Card>
        <Card className="p-4 bg-white dark:bg-gray-800">
          <h3 className="text-sm font-medium text-gray-600 dark:text-gray-300">Customer Retention</h3>
          <p className="text-2xl font-bold mt-1 text-gray-900 dark:text-white">
            {analytics.retentionRate}%
          </p>
        </Card>
        <Card className="p-4 bg-white dark:bg-gray-800">
          <h3 className="text-sm font-medium text-gray-600 dark:text-gray-300">Service Efficiency</h3>
          <p className="text-2xl font-bold mt-1 text-gray-900 dark:text-white">
            {analytics.serviceEfficiency}%
          </p>
        </Card>
        <Card className="p-4 bg-white dark:bg-gray-800">
          <h3 className="text-sm font-medium text-gray-600 dark:text-gray-300">Average Response Time</h3>
          <p className="text-2xl font-bold mt-1 text-gray-900 dark:text-white">
            {analytics.avgResponseTime}h
          </p>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        {/* Revenue Trends */}
        <Card className="p-4 bg-white dark:bg-gray-800">
          <h3 className="text-lg font-medium mb-4 text-gray-900 dark:text-white">Revenue Trends</h3>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={monthlyRevenue}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Line
                  type="monotone"
                  dataKey="revenue"
                  stroke="#0088FE"
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </Card>

        {/* Contract Distribution */}
        <Card className="p-4 bg-white dark:bg-gray-800">
          <h3 className="text-lg font-medium mb-4 text-gray-900 dark:text-white">Contract Distribution</h3>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={pieData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {pieData.map((_, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </Card>

        {/* Service Completion */}
        <Card className="p-4 bg-white dark:bg-gray-800">
          <h3 className="text-lg font-medium mb-4 text-gray-900 dark:text-white">Service Completion</h3>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={serviceCompletion}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="completed" name="Completed" fill="#00C49F" />
                <Bar dataKey="scheduled" name="Scheduled" fill="#0088FE" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </Card>

        {/* Growth Metrics */}
        <Card className="p-4 bg-white dark:bg-gray-800">
          <h3 className="text-lg font-medium mb-4 text-gray-900 dark:text-white">Growth Metrics</h3>
          <div className="space-y-4">
            <div>
              <p className="text-sm text-gray-600 dark:text-gray-400">Total Revenue</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">
                ${analytics.revenueMetrics.totalRevenue.toLocaleString()}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-600 dark:text-gray-400">Recurring Revenue</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">
                ${analytics.revenueMetrics.recurringRevenue.toLocaleString()}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-600 dark:text-gray-400">Growth Rate</p>
              <p className="text-2xl font-bold text-green-500">
                +{analytics.revenueMetrics.growthRate}%
              </p>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

ContractAnalytics.displayName = 'ContractAnalytics';

export type { ContractAnalyticsProps };
export default ContractAnalytics;
