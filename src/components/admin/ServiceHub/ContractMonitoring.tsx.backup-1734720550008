'use client';

import { type FC, useState } from 'react';
import {
  Bell,
  Ban,
  Calendar,
  FileText,
  Maximize2,
  Minimize2,
  Search,
} from 'lucide-react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { ScrollArea } from '@/components/ui/ScrollArea';
import { Badge } from '@/components/ui/Badge';
import { cn } from '@/lib/utils';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/Table";
import { Progress } from '@/components/ui/Progress';
import { Pagination } from '@/components/ui/Pagination';
import { ContractDetails } from './ContractDetails';
import { AnimatePresence } from 'framer-motion';

export type FC, useState } from 'react';

export interface ServiceContract;

export interface ServiceHistory;

export interface ContractMonitoringProps;


// Types

  customerName: string;
  contractType: string;
  startDate: Date;
  endDate: Date;
  status: string;
  lastService?: Date;
  nextService?: Date;
  servicesCompleted: number;
  servicesTotal: number;
  contactNumber?: string;
  email?: string;
  location?: string;
  isBlocked?: boolean;
  overdueStatus?: '1-30' | '31-60' | '60+';
}

  date: Date;
  type: string;
  technician: string;
  status: string;
  notes?: string;
  feedback?: {
    rating: number;
    comment?: string;
  };
}

  serviceHistory: Record<string, ServiceHistory[]>;
  onBlockContract: (id: string, reason: string) => void;
  onUnblockContract: (id: string) => void;
  onSendReminder: (id: string) => void;
  onScheduleService: (id: string) => void;
  expanded?: boolean;
  onExpand?: () => void;
}

export const ContractMonitoring: React.FC<ContractMonitoringProps> = ({
  contracts,
  serviceHistory,
  onBlockContract,
  onUnblockContract,
  onSendReminder,
  onScheduleService,
  expanded = false,
  onExpand,
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedContract, setSelectedContract] = useState<ServiceContract | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredContracts = contracts.filter((contract) => {
    const matchesSearch = contract.customerName
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    return matchesSearch;
  });

  const paginatedContracts = filteredContracts.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  const totalPages = Math.ceil(filteredContracts.length / itemsPerPage);

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case 'active':
        return 'success';
      case 'expiring':
        return 'warning';
      case 'overdue':
        return 'destructive';
      default:
        return 'default';
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
    setCurrentPage(1);
  };

  return (
    <motion.div
      className={cn(
        'bg-background rounded-lg shadow-sm border p-4',
        { 'h-[calc(100vh-2rem)]': expanded }
      )}
      layout
    >
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Contract Monitoring</h2>
        <Button
          variant="ghost"
          size="sm"
          onClick={onExpand}
          className="p-2"
        >
          {expanded ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
        </Button>
      </div>

      <div className="space-y-4">
        <div className="flex gap-2">
          <div className="relative flex-1">
            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search contracts..."
              value={searchQuery}
              onChange={(e) => handleSearch(e)}
              className="pl-8"
            />
          </div>
        </div>

        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Customer</TableHead>
              <TableHead>Contract Type</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Progress</TableHead>
              <TableHead>Next Service</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {paginatedContracts.map((contract) => (
              <TableRow key={contract.id}>
                <TableCell>
                  <div className="flex items-center gap-4">
                    <div className="flex flex-col">
                      <span className="font-medium">{contract.customerName}</span>
                      <span className="text-sm text-muted-foreground">{contract.location}</span>
                    </div>
                  </div>
                </TableCell>
                <TableCell>{contract.contractType}</TableCell>
                <TableCell>
                  <Badge variant={getStatusBadgeVariant(contract.status)}>
                    {contract.status}
                  </Badge>
                </TableCell>
                <TableCell>
                  <div className="flex flex-col gap-1">
                    <Progress
                      value={(contract.servicesCompleted / contract.servicesTotal) * 100}
                      className="h-2"
                    />
                    <span className="text-sm text-muted-foreground">
                      {contract.servicesCompleted}/{contract.servicesTotal} Services
                    </span>
                  </div>
                </TableCell>
                <TableCell>
                  {contract.nextService ? (
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-muted-foreground" />
                      <span>{contract.nextService.toLocaleDateString()}</span>
                    </div>
                  ) : (
                    <span className="text-muted-foreground">Not scheduled</span>
                  )}
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => setSelectedContract(contract)}
                      title="View Details"
                    >
                      <FileText className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => onScheduleService(contract.id)}
                      title="Schedule Service"
                    >
                      <Calendar className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => onSendReminder(contract.id)}
                      title="Send Reminder"
                    >
                      <Bell className="h-4 w-4" />
                    </Button>
                    {contract.isBlocked ? (
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => onUnblockContract(contract.id)}
                        className="text-red-500"
                        title="Unblock Contract"
                      >
                        <CheckCircle className="h-4 w-4" />
                      </Button>
                    ) : (
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => onBlockContract(contract.id, '')}
                        title="Block Contract"
                      >
                        <Ban className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>

        {totalPages > 1 && (
          <div className="flex justify-center mt-4">
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={handlePageChange}
            />
          </div>
        )}
      </div>

      <AnimatePresence>
        {selectedContract && (
          <ContractDetails
            contract={selectedContract}
            serviceHistory={serviceHistory[selectedContract.id] || []}
            isOpen={!!selectedContract}
            onClose={() => setSelectedContract(null)}
            onScheduleService={() => {
              onScheduleService(selectedContract.id);
              setSelectedContract(null);
            }}
            onSendReminder={() => {
              onSendReminder(selectedContract.id);
              setSelectedContract(null);
            }}
          />
        )}
      </AnimatePresence>
    </motion.div>
  );
};

ContractMonitoring.displayName = 'ContractMonitoring';

export { ContractMonitoring };
undefined.displayName = 'undefined';