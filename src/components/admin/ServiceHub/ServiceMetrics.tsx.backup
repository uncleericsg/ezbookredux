'use client';

import { Box, Typography, Select, MenuItem, Paper, Grid } from '@mui/material';
import { styled } from '@mui/material/styles';
import { TrendingUp, Clock, CheckCircle } from 'lucide-react';
import React, { type FC, type ReactNode } from 'react';

import { cn } from '@/lib/utils';

export interface MetricCardProps {
  title: string;
  value: string | number;
  trend?: number;
  icon: ReactNode;
  color: string;
}

export interface ServiceMetricsProps {
  className?: string;
}

const MetricBox = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(3),
  border: `1px solid ${theme.palette.divider}`,
  borderRadius: theme.shape.borderRadius,
}));

const TimeSelect = styled(Select)(({ theme }) => ({
  backgroundColor: theme.palette.background.paper,
  '& .MuiSelect-select': {
    padding: theme.spacing(1),
  },
}));

const metrics: MetricCardProps[] = [
  {
    title: 'Total Services',
    value: 100,
    trend: 10,
    icon: <TrendingUp />,
    color: 'primary.main',
  },
  {
    title: 'Pending Services',
    value: 200,
    trend: -5,
    icon: <Clock />,
    color: 'secondary.main',
  },
  {
    title: 'Completed Services',
    value: 300,
    trend: 20,
    icon: <CheckCircle />,
    color: 'success.main',
  },
];

export const ServiceMetrics: FC<ServiceMetricsProps> = ({ className }) => {
  return (
    <MetricBox className={cn(className)}>
      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
        <TimeSelect defaultValue={7} size="small">
          <MenuItem value={7}>Last 7 days</MenuItem>
          <MenuItem value={30}>Last 30 days</MenuItem>
          <MenuItem value={90}>Last 90 days</MenuItem>
        </TimeSelect>
      </Box>

      <Grid container spacing={3}>
        {metrics.map((metric, index) => (
          <Grid item xs={12} md={4} key={index}>
            <Box
              sx={{
                p: 3,
                borderRadius: 1,
                transition: 'background-color 0.2s ease-in-out',
                '&:hover': {
                  bgcolor: 'primary.light',
                  '& .metric-icon': {
                    transform: 'scale(1.1)',
                  },
                },
              }}
            >
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                <Typography color="text.secondary" variant="body2">
                  {metric.title}
                </Typography>
                <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                  {metric.value}
                </Typography>
                {metric.trend !== undefined && (
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <Typography
                      variant="body2"
                      sx={{
                        color: metric.trend >= 0 ? 'success.main' : 'error.main',
                        fontWeight: 'medium',
                      }}
                    >
                      {metric.trend >= 0 ? '+' : ''}
                      {metric.trend}%
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      vs last period
                    </Typography>
                  </Box>
                )}
              </Box>
              <Box
                className="metric-icon"
                sx={{
                  mt: 2,
                  color: metric.color,
                  transition: 'transform 0.2s ease-in-out',
                }}
              >
                {React.cloneElement(metric.icon as React.ReactElement, {
                  size: 24,
                })}
              </Box>
            </Box>
          </Grid>
        ))}
      </Grid>
    </MetricBox>
  );
};

export default ServiceMetrics;
