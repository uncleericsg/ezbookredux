import { motion, AnimatePresence } from 'framer-motion';
import { 
  Search, 
  Calendar, 
  FileText, 
  Maximize2, 
  Minimize2, 
  Bell, 
  Ban, 
  CheckCircle 
} from 'lucide-react';
import React, { useState, useMemo } from 'react';

import { Badge } from '@/components/ui/Badge';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Pagination } from '@/components/ui/Pagination';
import { Progress } from '@/components/ui/Progress';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/Table";
import { cn } from '@/lib/utils';

import { ContractDetails } from './ContractDetails';

export interface ServiceContract {
  id: string;
  customerName: string;
  contractType: string;
  startDate: Date;
  endDate: Date;
  status: string;
  lastService?: Date;
  nextService?: Date;
  servicesCompleted: number;
  servicesTotal: number;
  contactNumber?: string;
  email?: string;
  location?: string;
  isBlocked?: boolean;
  overdueStatus?: '1-30' | '31-60' | '60+';
}

export interface ServiceHistory {
  id: string;
  date: Date;
  type: string;
  technician: string;
  status: string;
  notes?: string;
  feedback?: {
    rating: number;
    comment?: string;
  };
}

export interface ContractMonitoringProps {
  contracts: ServiceContract[];
  serviceHistory: Record<string, ServiceHistory[]>;
  onBlockContract: (id: string, reason: string) => void;
  onUnblockContract: (id: string) => void;
  onSendReminder: (id: string) => void;
  onScheduleService: (id: string) => void;
  expanded?: boolean;
  onExpand?: () => void;
}

export const ContractMonitoring: React.FC<ContractMonitoringProps> = ({
  contracts,
  serviceHistory,
  onBlockContract,
  onUnblockContract,
  onSendReminder,
  onScheduleService,
  expanded = false,
  onExpand
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedContract, setSelectedContract] = useState<ServiceContract | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredContracts = useMemo(() => {
    return contracts.filter(contract =>
      contract.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      contract.contractType.toLowerCase().includes(searchQuery.toLowerCase()) ||
      contract.status.toLowerCase().includes(searchQuery.toLowerCase())
    );
  }, [contracts, searchQuery]);

  const paginatedContracts = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return filteredContracts.slice(startIndex, startIndex + itemsPerPage);
  }, [filteredContracts, currentPage]);

  const totalPages = Math.ceil(filteredContracts.length / itemsPerPage);

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'active':
        return 'bg-green-500';
      case 'expiring':
        return 'bg-yellow-500';
      case 'expired':
        return 'bg-red-500';
      default:
        return 'bg-gray-500';
    }
  };

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
    setCurrentPage(1);
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className={cn(
        'bg-gray-800 rounded-lg p-6 space-y-6',
        expanded ? 'col-span-2' : 'col-span-1'
      )}
    >
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-4">
          <h2 className="text-2xl font-bold text-white">Contract Monitoring</h2>
          <Badge variant="secondary" className="text-sm">
            {contracts.length} Contracts
          </Badge>
        </div>
        <Button
          variant="ghost"
          size="icon"
          onClick={onExpand}
          className="text-gray-400 hover:text-white"
        >
          {expanded ? <Minimize2 /> : <Maximize2 />}
        </Button>
      </div>

      <div className="flex items-center gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <Input
            placeholder="Search contracts..."
            value={searchQuery}
            onChange={handleSearch}
            className="pl-10 bg-gray-700 border-gray-600 text-white"
          />
        </div>
      </div>

      <div className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Customer</TableHead>
              <TableHead>Contract Type</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Progress</TableHead>
              <TableHead>Next Service</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {paginatedContracts.map((contract) => (
              <TableRow key={contract.id}>
                <TableCell>
                  <div className="flex items-center gap-4">
                    <div className="flex flex-col">
                      <span className="font-medium text-white">{contract.customerName}</span>
                      <span className="text-sm text-gray-400">{contract.location}</span>
                    </div>
                  </div>
                </TableCell>
                <TableCell>{contract.contractType}</TableCell>
                <TableCell>
                  <Badge
                    variant="outline"
                    className={cn('capitalize', getStatusColor(contract.status))}
                  >
                    {contract.status}
                  </Badge>
                </TableCell>
                <TableCell>
                  <div className="flex flex-col gap-1">
                    <Progress
                      value={(contract.servicesCompleted / contract.servicesTotal) * 100}
                      className="h-2"
                    />
                    <span className="text-sm text-gray-400">
                      {contract.servicesCompleted}/{contract.servicesTotal} Services
                    </span>
                  </div>
                </TableCell>
                <TableCell>
                  {contract.nextService ? (
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-gray-400" />
                      <span>{contract.nextService.toLocaleDateString()}</span>
                    </div>
                  ) : (
                    <span className="text-gray-400">Not scheduled</span>
                  )}
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => setSelectedContract(contract)}
                      title="View Details"
                    >
                      <FileText className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => onScheduleService(contract.id)}
                      title="Schedule Service"
                    >
                      <Calendar className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => onSendReminder(contract.id)}
                      title="Send Reminder"
                    >
                      <Bell className="h-4 w-4" />
                    </Button>
                    {contract.isBlocked ? (
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => onUnblockContract(contract.id)}
                        className="text-red-500"
                        title="Unblock Contract"
                      >
                        <CheckCircle className="h-4 w-4" />
                      </Button>
                    ) : (
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => onBlockContract(contract.id, '')}
                        title="Block Contract"
                      >
                        <Ban className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {totalPages > 1 && (
        <div className="flex justify-center mt-4">
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={handlePageChange}
          />
        </div>
      )}

      <AnimatePresence>
        {selectedContract && (
          <ContractDetails
            contract={selectedContract}
            serviceHistory={serviceHistory[selectedContract.id] || []}
            isOpen={!!selectedContract}
            onClose={() => setSelectedContract(null)}
            onScheduleService={() => {
              onScheduleService(selectedContract.id);
              setSelectedContract(null);
            }}
            onSendReminder={() => {
              onSendReminder(selectedContract.id);
              setSelectedContract(null);
            }}
          />
        )}
      </AnimatePresence>
    </motion.div>
  );
};
