import { 
  Paper, 
  Box, 
  Grid, 
  Typography, 
  Select, 
  MenuItem, 
  CircularProgress, 
  TrendingUp, 
  TrendingDown, 
  Clock, 
  CheckCircle 
} from '@mui/material';
import { styled } from '@mui/material/styles';
import React, { useState } from 'react';
import { type FC, type ReactNode, type SelectChangeEvent } from 'react';

export type FC;
export type ReactNode;
export type SelectChangeEvent;
export interface MetricCardProps;
export interface ServiceMetricsProps;





















// Types

  value: string | number;
  trend?: number;
  icon: ReactNode;
  color: string;
}


}

const MetricBox = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(3),
  border: `1px solid ${theme.palette.divider}`,
  borderRadius: theme.shape.borderRadius,
}));

const TimeSelect = styled(Select)(({ theme }) => ({
  backgroundColor: theme.palette.background.paper,
  '& .MuiSelect-select': {
    padding: theme.spacing(1),
  },
}));

const metrics: MetricCardProps[] = [
  {
    title: 'Total Services',
    value: 100,
    trend: 10,
    icon: <TrendingUp />,
    color: 'primary.main',
  },
  {
    title: 'Pending Services',
    value: 200,
    trend: -5,
    icon: <Clock />,
    color: 'secondary.main',
  },
  {
    title: 'Completed Services',
    value: 300,
    trend: 20,
    icon: <CheckCircle />,
    color: 'success.main',
  },
];

const ServiceMetrics: FC<ServiceMetricsProps> = ({ className }) => {
  const [timeRange, setTimeRange] = useState('week');
  const [isLoading, setIsLoading] = useState(false);
  const [metricsData, setMetricsData] = useState(metrics);

  const handleTimeRangeChange = (event: SelectChangeEvent) => {
    const newRange = event.target.value;
    setTimeRange(newRange);
    // Here you would typically fetch new data based on the time range
    setIsLoading(true);
    // Simulated API call
    setTimeout(() => {
      setMetricsData(metrics);
      setIsLoading(false);
    }, 1000);
  };

  return (
    <Box className={className}>
      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="h6">Service Metrics</Typography>
        <TimeSelect
          value={timeRange}
          onChange={handleTimeRangeChange}
          size="small"
        >
          <MenuItem value="day">Today</MenuItem>
          <MenuItem value="week">This Week</MenuItem>
          <MenuItem value="month">This Month</MenuItem>
          <MenuItem value="year">This Year</MenuItem>
        </TimeSelect>
      </Box>

      <Grid container spacing={3}>
        {isLoading ? (
          <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center', py: 3 }}>
            <CircularProgress />
          </Box>
        ) : (
          metricsData.map((metric, index) => (
            <Grid item xs={12} sm={6} md={4} key={index}>
              <MetricBox>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Box
                    sx={{
                      p: 1,
                      borderRadius: 1,
                      mr: 2,
                      backgroundColor: `${metric.color}15`,
                      color: metric.color,
                    }}
                  >
                    {metric.icon}
                  </Box>
                  <Typography color="textSecondary" variant="body2">
                    {metric.title}
                  </Typography>
                </Box>
                <Typography variant="h4" component="div" sx={{ mb: 1 }}>
                  {metric.value}
                </Typography>
                {metric.trend !== undefined && (
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    {metric.trend > 0 ? (
                      <TrendingUp sx={{ color: 'success.main', mr: 0.5 }} fontSize="small" />
                    ) : (
                      <TrendingDown sx={{ color: 'error.main', mr: 0.5 }} fontSize="small" />
                    )}
                    <Typography
                      variant="body2"
                      color={metric.trend > 0 ? 'success.main' : 'error.main'}
                    >
                      {Math.abs(metric.trend)}% from last {timeRange}
                    </Typography>
                  </Box>
                )}
              </MetricBox>
            </Grid>
          ))
        )}
      </Grid>
    </Box>
  );
};

ServiceMetrics.displayName = 'ServiceMetrics';
export { ServiceMetrics };
undefined.displayName = 'undefined';
