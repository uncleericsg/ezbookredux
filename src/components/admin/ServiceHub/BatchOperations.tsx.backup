import { Send, Loader2 } from 'lucide-react';
import React, { useState } from 'react';

import { Button } from '@/components/ui/Button';
import { Checkbox } from '@/components/ui/Checkbox';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/Dialog';
import { Progress } from '@/components/ui/Progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/Select';
import { Textarea } from '@/components/ui/Textarea';
import type { ServiceContract } from '@/types/contracts';

export interface BatchOperationsProps {
  contracts: ServiceContract[];
  isOpen: boolean;
  onClose: () => void;
  onSendNotifications: (data: { contractIds: string[]; message: string }) => Promise<void>;
}

const notificationTemplates = {
  'service-reminder': 'Your next service is due soon. Please schedule at your earliest convenience.',
  'contract-expiry': 'Your contract is expiring soon. Early renewal is recommended for more savings.',
  'maintenance-alert': 'Regular maintenance is recommended for optimal performance.',
  'custom': 'Custom message'
} as const;

type NotificationTemplate = keyof typeof notificationTemplates;

const BatchOperations: React.FC<BatchOperationsProps> = ({
  contracts,
  isOpen,
  onClose,
  onSendNotifications
}) => {
  const [selectedContracts, setSelectedContracts] = useState<Set<string>>(new Set());
  const [template, setTemplate] = useState<NotificationTemplate>('service-reminder');
  const [customMessage, setCustomMessage] = useState('');
  const [isSending, setIsSending] = useState(false);
  const [progress, setProgress] = useState(0);

  const handleSelectAll = () => {
    if (selectedContracts.size === contracts.length) {
      setSelectedContracts(new Set());
    } else {
      setSelectedContracts(new Set(contracts.map(c => c.id)));
    }
  };

  const toggleContract = (contractId: string) => {
    const newSelection = new Set(selectedContracts);
    if (newSelection.has(contractId)) {
      newSelection.delete(contractId);
    } else {
      newSelection.add(contractId);
    }
    setSelectedContracts(newSelection);
  };

  const handleSend = async () => {
    if (selectedContracts.size === 0) return;

    setIsSending(true);
    try {
      const message = template === 'custom' ? customMessage : notificationTemplates[template];
      const contractIds = Array.from(selectedContracts);
      
      // Simulate progress
      const total = selectedContracts.size;
      let current = 0;
      
      for (const _contractId of selectedContracts) {
        current++;
        setProgress((current / total) * 100);
        // Simulate delay for each notification
        await new Promise(resolve => window.setTimeout(resolve, 200));
      }

      await onSendNotifications({
        contractIds,
        message
      });
      onClose();
    } catch (error) {
      console.error('Failed to send notifications:', error);
    } finally {
      setIsSending(false);
      setProgress(0);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md bg-gray-800 text-white">
        <DialogHeader>
          <DialogTitle>Batch Operations</DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          {/* Contract Selection */}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Select Contracts</label>
              <Button
                variant="ghost"
                size="sm"
                onClick={handleSelectAll}
              >
                {selectedContracts.size === contracts.length ? 'Deselect All' : 'Select All'}
              </Button>
            </div>
            <div className="max-h-40 overflow-y-auto space-y-2 bg-gray-700 rounded-md p-2">
              {contracts.map((contract) => (
                <div key={contract.id} className="flex items-center space-x-2">
                  <Checkbox
                    checked={selectedContracts.has(contract.id)}
                    onCheckedChange={() => toggleContract(contract.id)}
                  />
                  <label className="text-sm">
                    {contract.customerName} - {contract.contractType}
                  </label>
                </div>
              ))}
            </div>
          </div>

          {/* Template Selection */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Notification Template</label>
            <Select value={template} onValueChange={(value: NotificationTemplate) => setTemplate(value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select template" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="service-reminder">Service Reminder</SelectItem>
                <SelectItem value="contract-expiry">Contract Expiry</SelectItem>
                <SelectItem value="maintenance-alert">Maintenance Alert</SelectItem>
                <SelectItem value="custom">Custom Message</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Custom Message */}
          {template === 'custom' && (
            <div className="space-y-2">
              <label className="text-sm font-medium">Custom Message</label>
              <Textarea
                value={customMessage}
                onChange={(e) => setCustomMessage(e.target.value)}
                placeholder="Enter your custom message..."
                className="h-24"
              />
            </div>
          )}

          {/* Preview */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Message Preview</label>
            <div className="bg-gray-700 rounded-md p-3 text-sm">
              {template === 'custom' ? customMessage : notificationTemplates[template]}
            </div>
          </div>

          {/* Progress */}
          {isSending && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Sending notifications...</span>
                <span>{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>
          )}

          {/* Actions */}
          <div className="flex gap-3 justify-end">
            <Button variant="outline" onClick={onClose} disabled={isSending}>
              Cancel
            </Button>
            <Button
              onClick={handleSend}
              disabled={selectedContracts.size === 0 || isSending || (template === 'custom' && !customMessage)}
              className="gap-2"
            >
              {isSending ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Send className="h-4 w-4" />
              )}
              Send Notifications
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

BatchOperations.displayName = 'BatchOperations';

export type { BatchOperationsProps };
export { BatchOperations };
export default BatchOperations;
