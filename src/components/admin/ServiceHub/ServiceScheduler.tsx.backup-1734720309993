import React from 'react';

export interface ServiceSchedulerProps;
export interface Technician;

export interface ServiceSchedulerProps;
export interface Technician;
'use client';
// Types
export interface ServiceSchedulerProps {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
  } from '@/components/ui/Select';

export interface Technician {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription
  } from '@/components/ui/Dialog';

  contract: ServiceContract;
  isOpen: boolean;
  onClose: () => void;
  onSchedule: (date:    Date, timeslot:    string, technicianid:    string) => void;
};
ServiceScheduler.displayName = 'ServiceScheduler';
  id: string;
  name: string;
  availability: string[];
}
const timeslots = [
  '09:00',
  '10:00',
  '11:00',
  '12:00',
  '13:00',
  '14:00',
  '15:00',
  '16:00',
  '17:00'
] as const;
const servicetypes = [
  'Regular Maintenance',
  'Deep Cleaning',
  'Repair',
  'System Check',
  'Filter Replacement'
] as const;
const ServiceScheduler: React.FC<ServiceSchedulerProps> = ({
  _contract,
  isOpen,
  onClose,
  onSchedule
}) => {
  const [selecteddate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [selectedtimeslot, setSelectedTimeSlot] = useState<string>('');
  const [selectedservicetype, setSelectedServiceType] = useState<string>(serviceTypes[0]);
  const [notes, setNotes] = useState<string>('');
  const { messages } = useCustomMessages();
  const { upcomingHolidays } = useHolidayNotifications();
  const handlescheduleselect = () => {
    if (selecteddate&&selectedtimeslot) {
      onSchedule(selecteddate, selectedtimeslot, '');
      onClose();
    }
  };
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Schedule Service</DialogTitle>
          <DialogDescription>
            {messages.scheduleService}
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid gap-2">
            <label htmlFor="date" className="text-sm font-medium">
              Date
            </label>
            <Calendar
              mode="single"
              selected={selectedDate}
              onSelect={setSelectedDate}
              disabled={(date) => {
                const isholiday = upcomingHolidays?.some(
                  (holiday) => holiday.date === date.toISOString().split('T')[0]
                );
                const ispast = date < new Date();
                const isweekend = date.getDay() === 0 || date.getDay() === 6;
                return isHoliday || isPast || isWeekend;
              }}
              className="rounded-md border"
            />
          </div>
          <div className="grid gap-2">
            <label htmlFor="timeSlot" className="text-sm font-medium">
              Time Slot
            </label>
            <Select
              value={selectedTimeSlot}
              onValueChange={setSelectedTimeSlot}
            >
              <SelectTrigger id="timeSlot">
                <SelectValue placeholder="Select time" />
              </SelectTrigger>
              <SelectContent>
                {timeSlots.map((slot) => (
                  <SelectItem key={slot} value={slot}>
                    <div className="flex items-center gap-2">
                      <Clock className="h-4 w-4" />
                      <span>{slot}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="grid gap-2">
            <label htmlFor="serviceType" className="text-sm font-medium">
              Service Type
            </label>
            <Select
              value={selectedServiceType}
              onValueChange={setSelectedServiceType}
            >
              <SelectTrigger id="serviceType">
                <SelectValue placeholder="Select service type" />
              </SelectTrigger>
              <SelectContent>
                {serviceTypes.map((type) => (
                  <SelectItem key={type} value={type}>
                    <div className="flex items-center gap-2">
                      <Wrench className="h-4 w-4" />
                      <span>{type}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="grid gap-2">
            <label htmlFor="notes" className="text-sm font-medium">
              Notes
            </label>
            <Textarea
              id="notes"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Add any special instructions or requirements"
              className="h-20"
            />
          </div>
          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button onClick={handleScheduleSelect}>
              Schedule Service
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
export { ServiceScheduler };
export default ServiceScheduler;