'use client';

import { Refresh as RefreshIcon } from '@mui/icons-material';
import { Box, Container, Grid, IconButton } from '@mui/material';
import { motion, AnimatePresence } from 'framer-motion';
import React, { useState } from 'react';

import { Button } from '@/components/ui/Button';
import { useToast } from '@/components/ui/use-toast';
import { cn } from '@/lib/utils';

import { ContractMonitoring } from './ContractMonitoring';
import { ServiceMetrics } from './ServiceMetrics';
import { ServiceQueue } from './ServiceQueue';

export interface Contract { 
  id: string;
  customerName: string;
  contractType: 'AMC1X' | 'AMC2X';
  startDate: Date;
  endDate: Date;
  status: 'active' | 'expiring';
  servicesCompleted: number;
  servicesTotal: number;
  contactNumber: string;
  email: string;
  location: string;
}

const mockContracts: Contract[] = [
  {
    id: '1',
    customerName: 'John Doe',
    contractType: 'AMC1X',
    startDate: new Date(),
    endDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),
    status: 'active',
    servicesCompleted: 0,
    servicesTotal: 4,
    contactNumber: '1234567890',
    email: 'john@example.com',
    location: 'Location A',
  },
  {
    id: '2',
    customerName: 'Jane Doe',
    contractType: 'AMC2X',
    startDate: new Date(),
    endDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),
    status: 'expiring',
    servicesCompleted: 1,
    servicesTotal: 6,
    contactNumber: '0987654321',
    email: 'jane@example.com',
    location: 'Location B',
  },
];

export interface ServiceHubProps {
  className?: string;
}

export interface MenuItem { 
  icon: React.ElementType;
  label: string;
  path: string;
}

export const ServiceHub: React.FC<ServiceHubProps> = ({ className }) => {
  const [refreshKey, setRefreshKey] = useState(0);
  const [viewMode, setViewMode] = useState<'split' | 'queue' | 'contracts'>('split');
  const { toast } = useToast();

  const handleRefresh = () => {
    setRefreshKey((prev) => prev + 1);
    toast({
      title: 'Refreshing...',
      description: 'Refreshing the page.',
    });
  };

  const handleBlockContract = async (contractId: string, _reason: string) => {
    try {
      // Mock implementation
      toast({
        title: 'Contract Blocked',
        description: `Contract ${contractId} has been blocked.`,
      });
      return Promise.resolve();
    } catch (error) {
      console.error('Failed to block contract:', error);
      toast({
        title: 'Error',
        description: 'Failed to block contract.',
        variant: 'destructive',
      });
      return Promise.reject(error);
    }
  };

  const handleUnblockContract = async (contractId: string) => {
    try {
      // Mock implementation
      toast({
        title: 'Contract Unblocked',
        description: `Contract ${contractId} has been unblocked.`,
      });
      return Promise.resolve();
    } catch (error) {
      console.error('Failed to unblock contract:', error);
      toast({
        title: 'Error',
        description: 'Failed to unblock contract.',
        variant: 'destructive',
      });
      return Promise.reject(error);
    }
  };

  const handleSendReminder = async (contractId: string) => {
    try {
      // Mock implementation
      toast({
        title: 'Reminder Sent',
        description: `Reminder sent for contract ${contractId}`,
      });
      return Promise.resolve();
    } catch (error) {
      console.error('Failed to send reminder:', error);
      toast({
        title: 'Error',
        description: 'Failed to send reminder.',
        variant: 'destructive',
      });
      return Promise.reject(error);
    }
  };

  return (
    <Container maxWidth="xl" className={cn('py-6', className)}>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Box className="mb-6 flex items-center justify-between">
            <h1 className="text-2xl font-bold">Service Hub</h1>
            <Box className="flex gap-2">
              <IconButton onClick={handleRefresh} size="medium">
                <RefreshIcon />
              </IconButton>
              <Button
                variant="outline"
                onClick={() => setViewMode('split')}
                className={cn(viewMode === 'split' && 'bg-primary text-primary-foreground')}
              >
                Split View
              </Button>
              <Button
                variant="outline"
                onClick={() => setViewMode('queue')}
                className={cn(viewMode === 'queue' && 'bg-primary text-primary-foreground')}
              >
                Queue
              </Button>
              <Button
                variant="outline"
                onClick={() => setViewMode('contracts')}
                className={cn(viewMode === 'contracts' && 'bg-primary text-primary-foreground')}
              >
                Contracts
              </Button>
            </Box>
          </Box>
        </Grid>

        <AnimatePresence mode="wait">
          {viewMode === 'split' && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="w-full"
            >
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <ServiceQueue
                    key={`queue-${refreshKey}`}
                    onBlockContract={handleBlockContract}
                    onUnblockContract={handleUnblockContract}
                    onSendReminder={handleSendReminder}
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <ContractMonitoring
                    key={`contracts-${refreshKey}`}
                    contracts={mockContracts}
                    serviceHistory={{}}
                    onBlockContract={handleBlockContract}
                    onUnblockContract={handleUnblockContract}
                    onSendReminder={handleSendReminder}
                    onScheduleService={handleSendReminder}
                  />
                </Grid>
              </Grid>
            </motion.div>
          )}

          {viewMode === 'queue' && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="w-full"
            >
              <ServiceQueue
                key={`queue-${refreshKey}`}
                onBlockContract={handleBlockContract}
                onUnblockContract={handleUnblockContract}
                onSendReminder={handleSendReminder}
              />
            </motion.div>
          )}

          {viewMode === 'contracts' && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="w-full"
            >
              <ContractMonitoring
                key={`contracts-${refreshKey}`}
                contracts={mockContracts}
                serviceHistory={{}}
                onBlockContract={handleBlockContract}
                onUnblockContract={handleUnblockContract}
                onSendReminder={handleSendReminder}
                onScheduleService={handleSendReminder}
              />
            </motion.div>
          )}
        </AnimatePresence>

        <Grid item xs={12}>
          <ServiceMetrics key={`metrics-${refreshKey}`} />
        </Grid>
      </Grid>
    </Container>
  );
};

export default ServiceHub;
