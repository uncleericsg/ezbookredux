"use client";

import {
  CalendarToday as CalendarIcon,
  LocationOn as LocationIcon,
  Person as PersonIcon,
  Visibility as ViewIcon,
  Edit as EditIcon
} from '@mui/icons-material';
import {
  Box,
  Grid,
  Paper,
  Typography,
  Chip,
  IconButton
} from '@mui/material';
import { GridColDef, GridRenderCellParams } from '@mui/x-data-grid';
import { format } from 'date-fns';
import React, { useMemo } from 'react';

import { BaseDataGrid } from '../material-ui/data-grid/BaseDataGrid';
import { useDataGridState } from '../material-ui/data-grid/hooks';

export interface ServiceRequest;
export interface ServiceQueueProps;
export interface StatCardProps;

export interface ServiceRequest;
export interface ServiceQueueProps;
export interface StatCardProps;

export interface ServiceRequest {
  id: string;
  customerName: string;
  service: string;
  location: string;
  scheduledTime: string;
  status: 'pending' | 'in-progress' | 'completed' | 'cancelled';
  priority: 'low' | 'medium' | 'high';
}

export interface ServiceQueueProps extends React.HTMLAttributes<HTMLDivElement> {
  requests?: ServiceRequest[];
  stats?: {
    pending: number;
    inProgress: number;
    completedToday: number;
    total: number;
  };
  loading?: boolean;
  onViewRequest?: (id: string) => void;
  onEditRequest?: (id: string) => void;
  onPageChange?: (page: number) => void;
  onPageSizeChange?: (pageSize: number) => void;
}

const mockRequests: ServiceRequest[] = [
  {
    id: '1',
    customerName: 'John Doe',
    service: 'AC Repair',
    location: 'New York',
    scheduledTime: '2024-01-01T10:00:00',
    status: 'pending',
    priority: 'high'
  }
];

const mockStats = {
  pending: 5,
  inProgress: 3,
  completedToday: 8,
  total: 16
};

const getStatusColor = (status: ServiceRequest['status']): string => {
  const colors: Record<ServiceRequest['status'], string> = {
    pending: '#ffd700',
    'in-progress': '#1e90ff',
    completed: '#32cd32',
    cancelled: '#ff6347'
  };
  return colors[status] || colors.pending;
};

const getPriorityColor = (priority: ServiceRequest['priority']): string => {
  const colors: Record<ServiceRequest['priority'], string> = {
    low: '#98fb98',
    medium: '#ffd700',
    high: '#ff6347'
  };
  return colors[priority] || colors.medium;
};

interface StatCardProps {
  title: string;
  value: number;
}

const StatCard: React.FC<StatCardProps> = ({ title, value }) => {
  return (
    <Paper
      sx={{
        p: 3,
        textAlign: 'center',
        transition: 'transform 0.2s',
        cursor: 'pointer',
        '&:hover': {
          transform: 'translateY(-4px)'
        }
      }}
    >
      <Typography color="text.secondary" variant="subtitle2" gutterBottom>
        {title}
      </Typography>
      <Typography variant="h4" color="text.primary" fontWeight="bold">
        {value}
      </Typography>
    </Paper>
  );
};

export const ServiceQueue = ({
  requests = mockRequests,
  stats = {
    pending: 0,
    inProgress: 0,
    completedToday: 0,
    total: 0
  },
  loading = false,
  onViewRequest,
  onEditRequest,
  onPageChange,
  onPageSizeChange,
  className,
  ...props
}: ServiceQueueProps) => {
  const { state, setPage, setPageSize } = useDataGridState();

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
    onPageChange?.(newPage + 1);
  };

  const handlePageSizeChange = (newPageSize: number) => {
    setPageSize(newPageSize);
    onPageSizeChange?.(newPageSize);
  };

  const columns = useMemo<GridColDef[]>(
    () => [
      {
        field: 'customerName',
        headerName: 'Customer',
        flex: 1,
        renderCell: (params: GridRenderCellParams) => (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <PersonIcon color="action" fontSize="small" />
            <Typography>{params.value}</Typography>
          </Box>
        )
      },
      {
        field: 'service',
        headerName: 'Service',
        flex: 1
      },
      {
        field: 'location',
        headerName: 'Location',
        flex: 1,
        renderCell: (params: GridRenderCellParams) => (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <LocationIcon color="action" fontSize="small" />
            <Typography>{params.value}</Typography>
          </Box>
        )
      },
      {
        field: 'scheduledTime',
        headerName: 'Scheduled Time',
        flex: 1,
        renderCell: (params: GridRenderCellParams) => (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <CalendarIcon color="action" fontSize="small" />
            <Typography>
              {format(new Date(params.value), 'PPp')}
            </Typography>
          </Box>
        )
      },
      {
        field: 'status',
        headerName: 'Status',
        flex: 1,
        renderCell: (params: GridRenderCellParams) => (
          <Chip
            label={params.value}
            size="small"
            sx={{
              bgcolor: getStatusColor(params.value as ServiceRequest['status']),
              color: 'text.primary'
            }}
          />
        )
      },
      {
        field: 'priority',
        headerName: 'Priority',
        flex: 1,
        renderCell: (params: GridRenderCellParams) => (
          <Chip
            label={params.value}
            size="small"
            sx={{
              bgcolor: getPriorityColor(params.value as ServiceRequest['priority']),
              color: 'text.primary'
            }}
          />
        )
      },
      {
        field: 'actions',
        headerName: 'Actions',
        flex: 1,
        renderCell: (params: GridRenderCellParams) => (
          <Box sx={{ display: 'flex', gap: 1 }}>
            <IconButton
              size="small"
              onClick={() => onViewRequest?.(params.row.id)}
              sx={{ color: 'primary.main' }}
            >
              <ViewIcon fontSize="small" />
            </IconButton>
            <IconButton
              size="small"
              onClick={() => onEditRequest?.(params.row.id)}
              sx={{ color: 'secondary.main' }}
            >
              <EditIcon fontSize="small" />
            </IconButton>
          </Box>
        )
      }
    ],
    [onViewRequest, onEditRequest]
  );

  return (
    <Box sx={{ width: '100%', p: 3, className }} {...props}>
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard title="Pending" value={stats.pending} />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard title="In Progress" value={stats.inProgress} />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard title="Completed Today" value={stats.completedToday} />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard title="Total Queue" value={stats.total} />
        </Grid>
      </Grid>
      <BaseDataGrid
        rows={requests}
        columns={columns}
        loading={loading}
        page={state.page}
        pageSize={state.pageSize}
        onPageChange={handlePageChange}
        onPageSizeChange={handlePageSizeChange}
        rowCount={stats.total}
        paginationMode="server"
      />
    </Box>
  );
};

ServiceQueue.displayName = 'ServiceQueue';


