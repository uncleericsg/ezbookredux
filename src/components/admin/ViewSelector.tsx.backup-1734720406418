'use client';

import React from 'react';

import type { UserViewType } from './AdminViewToggle';

export interface ViewOption;
export interface ViewSelectorProps;

export interface ViewOption;
export interface ViewSelectorProps;

export interface ViewOption;
export interface ViewSelectorProps;

interface ViewOption {
  type: UserViewType;
  label: string;
  description: string;
  bgColor: string;
  textColor: string;
  hoverColor: string;
}

const viewOptions: ViewOption[] = [
  {
    type: 'admin',
    label: 'Admin View',
    description: 'Full access to all features and settings',
    bgColor: 'bg-blue-900/20',
    textColor: 'text-blue-100',
    hoverColor: 'hover:bg-blue-900/30'
  },
  {
    type: 'user',
    label: 'User View',
    description: 'Limited access to basic features',
    bgColor: 'bg-green-900/20',
    textColor: 'text-green-100',
    hoverColor: 'hover:bg-green-900/30'
  },
  {
    type: 'guest',
    label: 'Guest View',
    description: 'View-only access to public content',
    bgColor: 'bg-yellow-900/20',
    textColor: 'text-yellow-100',
    hoverColor: 'hover:bg-yellow-900/30'
  }
];

export interface ViewSelectorProps extends React.HTMLAttributes<HTMLDivElement> {
  currentView: UserViewType;
  onViewChange: (view: UserViewType) => void;
  onClose: () => void;
}

export const ViewSelector = ({
  currentView,
  onViewChange,
  onClose,
  className,
  ...props
}: ViewSelectorProps) => {
  const handleViewChange = (type: UserViewType) => {
    onViewChange(type);
    // Add a small delay before closing to ensure the view change is processed
    window.setTimeout(onClose, 100);
  };

  return (
    <div
      className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 ${className}`}
      role="dialog"
      aria-modal="true"
      aria-labelledby="view-selector-title"
      {...props}
    >
      <div className="bg-gray-900 rounded-lg p-6 w-96 max-w-[90vw] border border-gray-700">
        <h2 id="view-selector-title" className="text-xl font-bold mb-2">
          Select View Mode
        </h2>
        <p className="text-gray-400 text-sm mb-4">Choose which user view to simulate</p>
        <div className="space-y-3">
          {viewOptions.map(({ type, label, description, bgColor, textColor, hoverColor }) => (
            <button
              key={type}
              onClick={() => handleViewChange(type)}
              className={`relative w-full p-4 rounded-lg transition-all duration-200 ${bgColor} ${textColor} ${hoverColor} 
                ${
                  currentView === type
                    ? 'ring-2 ring-offset-2 ring-blue-500 ring-offset-gray-900'
                    : ''
                }`}
              aria-pressed={currentView === type}
              aria-label={`Switch to ${label}`}
            >
              <div className="text-left">
                <div className="font-semibold">{label}</div>
                <div className="text-sm opacity-80">{description}</div>
              </div>
              {currentView === type && (
                <div className="absolute right-4 top-1/2 -translate-y-1/2">
                  <div className="bg-white/20 rounded-full p-1">
                    <svg
                      className="w-4 h-4"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                      aria-hidden="true"
                    >
                      <path
                        fillRule="evenodd"
                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </div>
                </div>
              )}
            </button>
          ))}
        </div>
        <button
          onClick={onClose}
          className="mt-4 w-full p-2 border border-gray-600 rounded-lg hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900"
          aria-label="Close view selector"
        >
          Close
        </button>
      </div>
    </div>
  );
};

ViewSelector.displayName = 'ViewSelector';



export type { ViewSelectorProps };
