import { motion, AnimatePresence } from 'framer-motion';
import React, { useState } from 'react';
import { FiX, FiPhone } from 'react-icons/fi';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

import { setAuthenticated, setToken } from '../store/slices/authSlice';
import { setUser } from '../store/slices/userSlice';

import { OTPInput } from './common/OTPInput';

export interface LoginModalProps;

export interface LoginModalProps;

export interface LoginModalProps;

/**
 * Mock user data for development
 */
const mockUser = {
  id: '1',
  name: 'John Doe',
  email: 'john@example.com',
  phone: '+65 1234 5678'
};

/**
 * Mock token for development
 */
const mockToken = 'mock-jwt-token';

/**
 * Props for the LoginModal component
 */
interface LoginModalProps extends React.HTMLAttributes<HTMLDivElement> {
  /** Whether the modal is open */
  isOpen: boolean;
  /** Callback function to close the modal */
  onClose: () => void;
}

/**
 * LoginModal component for the iAircon Easy Booking system
 * Handles user authentication with phone number and OTP
 * 
 * @example
 * ```tsx
 * <LoginModal
 *   isOpen={true}
 *   onClose={() => setIsOpen(false)}
 * />
 * ```
 */
const LoginModal: React.FC<LoginModalProps> = ({
  isOpen,
  onClose,
  className = '',
  ...props
}) => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [phoneNumber, setPhoneNumber] = useState('');
  const [showOtp, setShowOtp] = useState(false);
  const [loading, setLoading] = useState(false);

  const handlePhoneSubmit = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    if (!phoneNumber) {
      toast.error('Please enter your phone number');
      return;
    }
    setLoading(true);
    try {
      // Mock API call to send OTP
      await new Promise((resolve) => window.setTimeout(resolve, 1000));
      setShowOtp(true);
      toast.success('OTP sent successfully');
    } catch (error) {
      toast.error('Failed to send OTP');
    } finally {
      setLoading(false);
    }
  };

  const handleOtpComplete = async (otp: string): Promise<void> => {
    if (!otp) {
      toast.error('Please enter the OTP');
      return;
    }
    setLoading(true);
    try {
      // Mock API call to verify OTP
      await new Promise((resolve) => window.setTimeout(resolve, 1000));
      dispatch(setAuthenticated(true));
      dispatch(setToken(mockToken));
      dispatch(setUser(mockUser));
      toast.success('Login successful');
      onClose();
      navigate('/dashboard');
    } catch (error) {
      toast.error('Invalid OTP');
    } finally {
      setLoading(false);
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className={`fixed inset-0 z-50 flex items-center justify-center p-4 ${className}`}
          role="dialog"
          aria-modal="true"
          aria-labelledby="login-modal-title"
          {...props}
        >
          <div
            className="fixed inset-0 bg-black bg-opacity-50"
            onClick={onClose}
            aria-hidden="true"
          />
          <motion.div
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            className="relative w-full max-w-md rounded-lg bg-white p-6 shadow-xl"
          >
            <button
              onClick={onClose}
              className="absolute right-4 top-4 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              aria-label="Close modal"
            >
              <FiX className="h-6 w-6" aria-hidden="true" />
            </button>
            <div className="mt-3 text-center sm:mt-5">
              <h3
                id="login-modal-title"
                className="text-lg font-medium leading-6 text-gray-900"
              >
                {showOtp ? 'Enter OTP' : 'Login with Phone'}
              </h3>
              <div className="mt-4">
                {!showOtp ? (
                  <form onSubmit={handlePhoneSubmit}>
                    <div className="relative mt-1 rounded-md shadow-sm">
                      <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                        <FiPhone className="h-5 w-5 text-gray-400" aria-hidden="true" />
                      </div>
                      <input
                        type="tel"
                        id="phone-number"
                        name="phone-number"
                        className="block w-full rounded-md border-gray-300 pl-10 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        placeholder="+65 1234 5678"
                        value={phoneNumber}
                        onChange={(e) => setPhoneNumber(e.target.value)}
                        required
                        aria-label="Enter your phone number"
                        pattern="[+]?[0-9\s]*"
                        inputMode="tel"
                      />
                    </div>
                    <button
                      type="submit"
                      className="mt-4 inline-flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:text-sm"
                      disabled={loading}
                      aria-label="Send OTP"
                    >
                      {loading ? 'Sending...' : 'Send OTP'}
                    </button>
                  </form>
                ) : (
                  <div>
                    <OTPInput
                      length={6}
                      onComplete={handleOtpComplete}
                      loading={loading}
                      className="mt-4"
                    />
                    <button
                      type="button"
                      className="mt-4 text-sm text-indigo-600 hover:text-indigo-500"
                      onClick={() => setShowOtp(false)}
                      aria-label="Go back to phone number input"
                    >
                      Change Phone Number
                    </button>
                  </div>
                )}
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

// Set display name for debugging
LoginModal.displayName = 'LoginModal';
export { LoginModalProps, LoginModal };
