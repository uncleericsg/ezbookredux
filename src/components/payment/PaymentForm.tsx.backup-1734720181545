/* eslint-disable no-undef, no-unused-vars */
import { PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';
import React, { useState } from 'react';

export interface PaymentFormProps {
  clientSecret: string;
  onComplete: () => void;
  amount: number;
  onError?: (error: Error) => void;
}

const PaymentForm: React.FC<PaymentFormProps> = ({
  clientSecret, // required for Stripe setup
  onComplete,
  amount,
  onError
}) => {
  const stripe = useStripe();
  const elements = useElements();
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!stripe || !elements) {
      return;
    }
    setIsProcessing(true);
    setError(null);
    try {
      const { error: submitError } = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: 'https://example.com/order/success',
        },
      });
      if (submitError) {
        setError(submitError.message || 'An error occurred');
        onError?.(submitError);
      } else {
        onComplete();
      }
    } catch (e) {
      setError('An unexpected error occurred');
      onError?.(e);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <PaymentElement
        options={{
          defaultValues: {
            billingDetails: {
              name: '',
            },
          },
        }}
      />
      {error && (
        <div className="text-red-500 text-sm">{error}</div>
      )}
      <button
        type="submit"
        disabled={!stripe || isProcessing}
        className={`w-full py-2 px-4 rounded-lg font-semibold ${
          isProcessing
            ? 'bg-gray-500 cursor-not-allowed opacity-50'
            : 'bg-gradient-to-r from-[#FFD700] via-[#FFDF00] to-[#FFD700] text-black hover: '
        }`}
      >
        {isProcessing ? 'Processing...' : `Pay $${(amount / 100).toFixed(2)}`}
      </button>
    </form>
  );
};


export type { PaymentFormProps 
PaymentForm.displayName = 'PaymentForm';
};

export { PaymentForm, PaymentFormProps };
