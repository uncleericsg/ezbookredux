'use client';

import { AlertTriangle } from 'lucide-react';
import * as React from 'react';

export interface Props;
export interface State;

export interface Props;
export interface State;

export interface Props;
export interface State;

export interface Props;
export interface State;

export interface Props {
  children: React.ReactNode;
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;
  fallback?: React.ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
}

class PaymentErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null
    };
  }

  static getDerivedStateFromError(error: Error): State {
    return {
      hasError: true,
      error
    };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    globalThis.console.error('Payment error:', error, errorInfo);
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
  }

  render(): React.ReactNode {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <div className="p-4 rounded-md bg-red-50 border border-red-200">
          <div className="flex items-center">
            <AlertTriangle className="h-5 w-5 text-red-400 mr-2" />
            <h3 className="text-sm font-medium text-red-800">
              Payment Processing Error
            </h3>
          </div>
          <div className="mt-2 text-sm text-red-700">
            <p>
              We encountered an error while processing your payment. Please try again
              or contact support if the issue persists.
            </p>
            {this.state.error && (
              <p className="mt-1 font-mono text-xs">
                Error: {this.state.error.message}
              </p>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}


export { Props, State };

undefined.displayName = 'undefined';