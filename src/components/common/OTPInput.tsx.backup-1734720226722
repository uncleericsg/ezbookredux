"use client";

import React, { useState, useRef } from 'react';

import { cn } from '@/lib/utils';

export type OTPInputProps;

// Export types at the top
export type OTPInputProps = React.HTMLAttributes<HTMLDivElement> & {
  length?: number;
  onComplete: (value: string) => void;
  error?: string;
  isLoading?: boolean;
};

// Component declaration as const
const OTPInput = ({
  length = 6,
  onComplete,
  error,
  isLoading,
  className,
  ...props
}: OTPInputProps) => {
  const [otp, setOtp] = useState<string[]>(Array(length).fill(''));
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  const handleChange = (index: number, value: string) => {
    if (isLoading) return;

    const newOtp = [...otp];
    newOtp[index] = value.slice(-1);
    setOtp(newOtp);

    // Move to next input if value is entered
    if (value && index < length - 1) {
      inputRefs.current[index + 1]?.focus();
    }

    // Check if OTP is complete
    const otpValue = newOtp.join('');
    if (otpValue.length === length) {
      onComplete(otpValue);
    }
  };

  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {
    if (isLoading) return;

    // Move to previous input on backspace
    if (e.key === 'Backspace' && !otp[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    if (isLoading) return;

    e.preventDefault();
    const pastedData = e.clipboardData.getData('text');
    const pastedOtp = pastedData.slice(0, length).split('');
    
    const newOtp = [...otp];
    pastedOtp.forEach((value, index) => {
      if (index < length) {
        newOtp[index] = value;
      }
    });
    
    setOtp(newOtp);
    
    // Focus last input after paste
    if (pastedOtp.length > 0) {
      const focusIndex = Math.min(pastedOtp.length - 1, length - 1);
      inputRefs.current[focusIndex]?.focus();
    }

    const otpValue = newOtp.join('');
    if (otpValue.length === length) {
      onComplete(otpValue);
    }
  };

  return (
    <div
      className={cn('flex flex-col space-y-2', className)}
      {...props}
    >
      <div className="flex justify-center space-x-2">
        {Array(length)
          .fill(null)
          .map((_, index) => (
            <input
              key={index}
              ref={(el) => (inputRefs.current[index] = el)}
              type="text"
              maxLength={1}
              value={otp[index]}
              onChange={(e) => handleChange(index, e.target.value)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              onPaste={handlePaste}
              disabled={isLoading}
              className={cn(
                'h-12 w-12 rounded-lg border text-center text-lg focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary',
                isLoading && 'cursor-not-allowed opacity-50',
                error && 'border-red-500 focus:border-red-500 focus:ring-red-500'
              )}
            />
          ))}
      </div>
      {error && (
        <p className="text-center text-sm text-red-500">{error}</p>
      )}
    </div>
  );
};

// Add displayName
OTPInput.displayName = 'OTPInput';

// Both named and default exports at the bottom
export { OTPInput };
export default OTPInput;
