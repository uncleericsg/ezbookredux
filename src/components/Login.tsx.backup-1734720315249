import { motion } from 'framer-motion';
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';

import { LoadingScreen } from './LoadingScreen';

export interface for;
export interface UserData;
export interface LoginProps;

export interface for;
export interface UserData;
export interface LoginProps;

/**
 * User data interface for login callback
 */
interface UserData {
  id: string;
  name: string;
  email: string;
}

/**
 * Props for the Login component
 */
interface LoginProps {
  /** Callback function called after successful login */
  onLogin?: (userData: UserData) => void;
}

/**
 * Login component for the iAircon Easy Booking system
 * Handles user authentication with mobile number and OTP
 * 
 * @example
 * ```tsx
 * <Login
 *   onLogin={(userData) => {
 *     console.log('User logged in:', userData);
 *   }}
 * />
 * ```
 */
const Login: React.FC<LoginProps> = ({ onLogin }) => {
  const _dispatch = useDispatch();

  const [mobileNumber, setMobileNumber] = useState('');
  const [otp, setOtp] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleMobileNumberChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setMobileNumber(e.target.value);
  };

  const handleOtpChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setOtp(e.target.value);
  };

  const handleSendOtp = async (): Promise<void> => {
    try {
      setLoading(true);
      // Add your OTP sending logic here
      setError('');
    } catch (error) {
      setError('Failed to send OTP');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    try {
      setLoading(true);
      // Add your login logic here
      setError('');

      // Mock successful login
      const userData: UserData = {
        id: 'mock-id',
        name: 'John Doe',
        email: 'john.doe@example.com',
      };

      onLogin?.(userData);
    } catch (error) {
      setError('Login failed');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <LoadingScreen message="Logging in..." />;
  }

  return (
    <div 
      className="flex min-h-screen flex-col items-center justify-start px-4 pt-6 sm:px-6 lg:px-8"
      role="main"
      aria-label="Login page"
    >
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.5 }}
        className="w-full max-w-md"
      >
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.7 }}
        >
          <button
            type="button"
            className="w-full rounded-lg bg-[#FFD700] px-4 py-2 font-semibold text-black transition-colors hover:bg-[#FFC400] focus:outline-none focus:ring-2 focus:ring-[#FFD700] focus:ring-offset-2"
            onClick={() => window.location.href = '/booking'}
            aria-label="Book now"
          >
            Book Now
          </button>
        </motion.div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.9 }}
        >
          <form 
            onSubmit={handleSubmit} 
            className="space-y-4"
            aria-label="Login form"
          >
            <div>
              <label 
                htmlFor="mobile" 
                className="block text-sm font-medium text-gray-300"
              >
                Mobile Number
              </label>
              <input
                type="tel"
                id="mobile"
                name="mobile"
                value={mobileNumber}
                onChange={handleMobileNumberChange}
                className="mt-1 block w-full rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                required
                aria-required="true"
                aria-label="Enter your mobile number"
                pattern="[0-9]*"
                inputMode="numeric"
              />
            </div>
            <div>
              <label 
                htmlFor="otp" 
                className="block text-sm font-medium text-gray-300"
              >
                OTP
              </label>
              <input
                type="tel"
                id="otp"
                name="otp"
                value={otp}
                onChange={handleOtpChange}
                className="block w-full rounded-md border-gray-600 bg-gray-700 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                required
                aria-required="true"
                aria-label="Enter OTP"
                pattern="[0-9]*"
                inputMode="numeric"
              />
            </div>
            <button
              type="button"
              onClick={handleSendOtp}
              className="rounded-lg bg-[#FFD700] px-4 py-2 font-semibold text-black transition-colors hover:bg-[#FFC400] focus:outline-none focus:ring-2 focus:ring-[#FFD700] focus:ring-offset-2"
              aria-label="Send OTP to your mobile number"
            >
              Send OTP
            </button>
            <button
              type="submit"
              className="w-full rounded-lg bg-[#FFD700] px-4 py-2 font-semibold text-black transition-colors hover:bg-[#FFC400] focus:outline-none focus:ring-2 focus:ring-[#FFD700] focus:ring-offset-2"
              aria-label="Login with OTP"
            >
              Login
            </button>
          </form>
        </motion.div>
        {error && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            role="alert"
            aria-live="assertive"
          >
            <p className="mt-2 text-sm text-red-500">{error}</p>
          </motion.div>
        )}
      </motion.div>
    </div>
  );
};

// Set display name for debugging
Login.displayName = 'Login';

type { LoginProps, UserData };
export { LoginProps, UserData };
