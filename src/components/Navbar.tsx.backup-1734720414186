import { motion } from 'framer-motion';
import { Bell, User, Shield, Settings, LogOut } from 'lucide-react';
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

import { useNotifications } from '../hooks/useNotifications';
import { useAppDispatch, useAppSelector } from '../store';
import { setAuthenticated } from '../store/slices/authSlice';
import { clearUser } from '../store/slices/userSlice';

import GuestNotificationModal from './GuestNotificationModal';
import LoginModal from './LoginModal';
import NotificationBadge from './NotificationBadge';

export interface NavbarProps;

export interface NavbarProps;

export interface NavbarProps;


/**
 * Props for the Navbar component
 */
interface NavbarProps extends React.HTMLAttributes<HTMLDivElement> {
  /** Optional className for styling */
  className?: string;
}

/**
 * Navbar component for the iAircon Easy Booking system
 * Handles user navigation and authentication state
 * 
 * @example
 * ```tsx
 * <Navbar className="my-custom-class" />
 * ```
 */
const Navbar: React.FC<NavbarProps> = ({ className = '', ...props }) => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const { currentUser } = useAppSelector((state) => state.user);
  const { unreadCount } = useNotifications();
  const isAmcCustomer = currentUser?.subscription?.isActive;
  const isAdmin = currentUser?.role === 'admin';
  const [showGuestModal, setShowGuestModal] = useState(false);
  const [showLoginModal, setShowLoginModal] = useState(false);

  const handleLogout = async (): Promise<void> => {
    try {
      // First clear user data
      dispatch(clearUser());
      // Then clear auth state
      dispatch(setAuthenticated(false));
      // Clear all stored tokens and data
      window.localStorage.clear();
      // Show success message
      toast.success('Logged out successfully');
      // Force a page reload to clear any remaining state
      window.location.href = '/login';
    } catch (error) {
      console.error('Logout error:', error);
      toast.error('Failed to logout');
    }
  };

  return (
    <nav
      className={`bg-gray-800 dark:bg-gray-900 ${className}`}
      role="navigation"
      aria-label="Main navigation"
      {...props}
    >
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 justify-between">
          <div className="flex">
            <Link
              to="/"
              className="flex flex-shrink-0 items-center space-x-2 hover:opacity-90"
              aria-label="Home"
            >
              <motion.img
                whileHover={{ scale: 1.05 }}
                className="h-8 w-auto"
                src="/logo.png"
                alt="iAircon Logo"
              />
              <motion.span
                whileHover={{ scale: 1.05 }}
                className="text-xl font-bold text-white"
              >
                Easy Booking
              </motion.span>
            </Link>
          </div>
          <div className="flex items-center space-x-4">
            {!currentUser && (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setShowLoginModal(true)}
                className="flex items-center gap-2 rounded-lg bg-gradient-to-r from-[#FFD700] to-[#FFA500] px-3 py-1.5 text-sm font-medium text-gray-900 shadow-lg transition-all duration-200 hover:shadow-[0_0_15px_rgba(255,215,0,0.3)]"
                aria-label="Sign in"
              >
                <User className="h-4 w-4" aria-hidden="true" />
                <span>Sign In</span>
              </motion.button>
            )}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => currentUser ? navigate('/notifications') : setShowGuestModal(true)}
              className="p-2 text-gray-400 hover:text-white dark:text-gray-300 dark:hover:text-white"
              aria-label="Notifications"
            >
              <Bell className="h-5 w-5" aria-hidden="true" />
              {currentUser && unreadCount > 0 && (
                <NotificationBadge count={unreadCount} />
              )}
            </motion.button>
            {currentUser && (
              <div className="relative">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => navigate('/profile')}
                  className="p-2 text-gray-400 hover:text-white dark:text-gray-300 dark:hover:text-white"
                  aria-label="Profile"
                >
                  <User className="h-5 w-5" aria-hidden="true" />
                </motion.button>
              </div>
            )}
            {isAdmin && (
              <Link
                to="/admin"
                className="p-2 text-gray-400 hover:text-white dark:text-gray-300 dark:hover:text-white"
                aria-label="Admin"
              >
                <Shield className="h-5 w-5" aria-hidden="true" />
              </Link>
            )}
            {isAmcCustomer && (
              <Link
                to="/settings"
                className="p-2 text-gray-400 hover:text-white dark:text-gray-300 dark:hover:text-white"
                aria-label="Settings"
              >
                <Settings className="h-5 w-5" aria-hidden="true" />
              </Link>
            )}
            {currentUser && (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleLogout}
                className="p-2 text-gray-400 hover:text-white dark:text-gray-300 dark:hover:text-white"
                aria-label="Logout"
              >
                <LogOut className="h-5 w-5" aria-hidden="true" />
              </motion.button>
            )}
          </div>
        </div>
      </div>
      {showGuestModal && (
        <GuestNotificationModal
          isOpen={showGuestModal}
          onClose={() => setShowGuestModal(false)}
        />
      )}
      {showLoginModal && (
        <LoginModal
          isOpen={showLoginModal}
          onClose={() => setShowLoginModal(false)}
        />
      )}
    </nav>
  );
};

// Set display name for debugging
Navbar.displayName = 'Navbar';
export { NavbarProps, Navbar };
