import * as React from 'react';

import { Toast } from './toast';

export interface UseToastOptions;
export interface ToastState;

export interface UseToastOptions;
export interface ToastState;

export interface UseToastOptions {
  title?: string;
  description?: string;
  action?: React.ReactNode;
  duration?: number;
  variant?: 'default' | 'success' | 'error' | 'warning';
}

export interface ToastState {
  toasts: Toast[];
}

export function useToast() {
  const [state, setState] = React.useState<ToastState>({
    toasts: [],
  });

  const toast = React.useCallback(
    ({ title, description, action, duration = 5000, variant = 'default' }: UseToastOptions) => {
      const id = Math.random().toString(36).slice(2, 11);
      const newToast: Toast = {
        id,
        title,
        description,
        action,
        duration,
        variant
      };

      setState((prev) => ({
        toasts: [...prev.toasts, newToast]
      }));

      if (duration > 0) {
        globalThis.setTimeout(() => {
          setState((prev) => ({
            toasts: prev.toasts.filter((toast) => toast.id !== id)
          }));
        }, duration);
      }

      return id;
    },
    []
  );

  const dismiss = React.useCallback((toastId?: string) => {
    setState((prev) => ({
      toasts: prev.toasts.filter((toast) => toast.id !== toastId)
    }));
  }, []);

  return {
    toast,
    dismiss,
    toasts: state.toasts
  };
}
