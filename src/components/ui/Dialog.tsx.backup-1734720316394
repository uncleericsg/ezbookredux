import React, { useEffect, useRef } from 'react';

import { cn } from "@/lib/utils";

export type DialogProps;
export type DialogContentProps;
export type DialogHeaderProps;
export type DialogTitleProps;
export type DialogDescriptionProps;
export type DialogFooterProps;

export type DialogProps;
export type DialogContentProps;
export type DialogHeaderProps;
export type DialogTitleProps;
export type DialogDescriptionProps;
export type DialogFooterProps;

// Export types at the top
export type DialogProps = {
  /** Additional class names */
  className?: string;
  /** Dialog content */
  children?: React.ReactNode;
  /** Custom styles */
  style?: React.CSSProperties;
  /** Whether the dialog is open */
  open?: boolean;
  /** Callback when open state changes */
  onOpenChange?: (open: boolean) => void;
  /** Callback when dialog closes */
  onClose?: () => void;
};

export type DialogContentProps = {
  className?: string;
  children?: React.ReactNode;
};

export type DialogHeaderProps = {
  className?: string;
  children?: React.ReactNode;
};

export type DialogTitleProps = {
  className?: string;
  children?: React.ReactNode;
};

export type DialogDescriptionProps = {
  className?: string;
  children?: React.ReactNode;
};

export type DialogFooterProps = {
  className?: string;
  children?: React.ReactNode;
};

/**
 * Dialog component for modal dialogs and popovers
 * @example
 * <Dialog open={isOpen} onClose={() => setIsOpen(false)}>
 *   <h2>Dialog Title</h2>
 *   <p>Dialog content goes here</p>
 * </Dialog>
 */
const Dialog = React.forwardRef<HTMLDivElement, DialogProps>(
  ({ children, className, style, open = false, onOpenChange, onClose }, ref) => {
  const dialogRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && open) {
        onClose?.();
        onOpenChange?.(false);
      }
    };

    const handleClickOutside = (e: MouseEvent) => {
      if (dialogRef.current && !dialogRef.current.contains(e.target as Node) && open) {
        onClose?.();
        onOpenChange?.(false);
      }
    };

    document.addEventListener('keydown', handleEscape);
    document.addEventListener('mousedown', handleClickOutside);

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [open, onClose, onOpenChange]);

  if (!open) {
    return null;
  }

  return (
    <div
      ref={dialogRef}
      role="dialog"
      aria-modal="true"
      className={cn(
        'fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50',
        className
      )}
      style={style}
    >
      <DialogContent>
        {children}
      </DialogContent>
    </div>
  );
});

Dialog.displayName = 'Dialog';

/**
 * Dialog content component
 */
const DialogContent = React.forwardRef<HTMLDivElement, DialogContentProps>(
  ({ children, className }, ref) => (
    <div 
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 w-full max-w-lg translate-x-[-50%] translate-y-[-50%] rounded-lg bg-white p-6 shadow-lg",
        className
      )}
    >
      {children}
    </div>
  )
);
DialogContent.displayName = "DialogContent";

/**
 * Dialog header component
 */
const DialogHeader = React.forwardRef<HTMLDivElement, DialogHeaderProps>(
  ({ children, className }, ref) => (
    <div 
      ref={ref}
      className={cn("mb-4 flex flex-col space-y-1.5", className)}
    >
      {children}
    </div>
  )
);
DialogHeader.displayName = "DialogHeader";

/**
 * Dialog title component
 */
const DialogTitle = React.forwardRef<HTMLHeadingElement, DialogTitleProps>(
  ({ children, className }, ref) => (
    <h2 
      ref={ref}
      className={cn("text-lg font-semibold", className)}
    >
      {children}
    </h2>
  )
);
DialogTitle.displayName = "DialogTitle";

/**
 * Dialog description component
 */
const DialogDescription = React.forwardRef<HTMLParagraphElement, DialogDescriptionProps>(
  ({ children, className }, ref) => (
    <p 
      ref={ref}
      className={cn("text-sm text-gray-500", className)}
    >
      {children}
    </p>
  )
);
DialogDescription.displayName = "DialogDescription";

/**
 * Dialog footer component
 */
const DialogFooter = React.forwardRef<HTMLDivElement, DialogFooterProps>(
  ({ children, className }, ref) => (
    <div 
      ref={ref}
      className={cn("mt-6 flex justify-end space-x-2", className)}
    >
      {children}
    </div>
  )
);
DialogFooter.displayName = "DialogFooter";

// Both named and default exports at the bottom
export { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter };

