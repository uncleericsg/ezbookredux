'use client';

import { format } from 'date-fns';
import { CalendarIcon } from 'lucide-react';
import React from 'react';
import { DateRange } from 'react-day-picker';

import { cn } from '@/lib/utils';

import { Button } from './Button';
import { Calendar } from './Calendar';
import { Popover, PopoverContent, PopoverTrigger } from './Popover';

export type DateRangePickerProps;

// Export types at the top
export type DateRangePickerProps = {
  /** Additional class names */
  className?: string;
  /** Selected date range */
  value?: DateRange;
  /** Callback when date range changes */
  onChange?: (range: DateRange | undefined) => void;
  /** Placeholder text */
  placeholder?: string;
  /** Whether the picker is disabled */
  disabled?: boolean;
  /** Minimum selectable date */
  minDate?: Date;
  /** Maximum selectable date */
  maxDate?: Date;
  /** Custom date format */
  dateFormat?: string;
};

/**
 * DateRangePicker component for selecting a range of dates
 */
const DateRangePicker = React.forwardRef<HTMLDivElement, DateRangePickerProps>(
  ({ 
    className,
    value,
    onChange,
    placeholder = 'Select date range',
    disabled = false,
    minDate,
    maxDate,
    dateFormat = 'PPP',
  }, ref) => {
    const handleSelect = (range: DateRange | undefined) => {
      onChange?.(range);
    };

    return (
      <div 
        className={cn('grid gap-2', className)} 
        ref={ref}
      >
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              className={cn(
                'w-full justify-start text-left font-normal',
                !value && 'text-muted-foreground'
              )}
              disabled={disabled}
            >
              <CalendarIcon className="mr-2 h-4 w-4" />
              {value?.from ? (
                value.to ? (
                  <>
                    {format(value.from, dateFormat)} -{' '}
                    {format(value.to, dateFormat)}
                  </>
                ) : (
                  format(value.from, dateFormat)
                )
              ) : (
                <span>{placeholder}</span>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-auto p-0" align="start">
            <Calendar
              initialFocus
              mode="range"
              defaultMonth={value?.from}
              selected={value}
              onSelect={handleSelect}
              numberOfMonths={2}
              disabled={disabled}
              fromDate={minDate}
              toDate={maxDate}
            />
          </PopoverContent>
        </Popover>
      </div>
    );
  }
);

// Add displayName
DateRangePicker.displayName = 'DateRangePicker';

// Both named and default exports at the bottom
export { DateRangePicker };

