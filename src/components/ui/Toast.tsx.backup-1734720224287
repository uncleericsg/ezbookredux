'use client';

import { cva, type VariantProps } from 'class-variance-authority';
import { X } from 'lucide-react';
import * as React from 'react';
import { cn } from '@/lib/utils';

export type VariantProps;
export type ToastProps;

// Export types at the top
export const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive: 'destructive group border-destructive bg-destructive text-destructive-foreground',
        success: 'border-green-500 bg-green-100 text-green-900',
        warning: 'border-yellow-500 bg-yellow-100 text-yellow-900',
        info: 'border-blue-500 bg-blue-100 text-blue-900',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
);

export type ToastProps = React.HTMLAttributes<HTMLDivElement> &
  VariantProps<typeof toastVariants> & {
    /** Additional class names */
    className?: string;
    /** Callback when toast is closed */
    onClose?: () => void;
    /** Duration in milliseconds before auto-closing */
    duration?: number;
    /** Title of the toast */
    title?: string;
    /** Description of the toast */
    description?: string;
    /** Whether to show the close button */
    showClose?: boolean;
  };

/**
 * Toast component for displaying temporary notifications
 * @example
 * <Toast 
 *   title="Success"
 *   description="Your changes have been saved"
 *   variant="success"
 *   onClose={() => {}}
 * />
 */
const Toast = React.forwardRef<HTMLDivElement, ToastProps>(
  ({ 
    className,
    variant,
    onClose,
    title,
    description,
    showClose = true,
    children,
    ...props
  }, ref) => (
    <div
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      role="alert"
      aria-live="polite"
      {...props}
    >
      <div className="grid gap-1">
        {title && (
          <div className="text-sm font-semibold">
            {title}
          </div>
        )}
        {description && (
          <div className="text-sm opacity-90">
            {description}
          </div>
        )}
        {children}
      </div>
      {showClose && (
        <button
          className="absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100"
          onClick={onClose}
          aria-label="Close"
        >
          <X className="h-4 w-4" />
        </button>
      )}
    </div>
  )
);

// Add displayName
Toast.displayName = 'Toast';

// Both named and default exports at the bottom
export { Toast };

