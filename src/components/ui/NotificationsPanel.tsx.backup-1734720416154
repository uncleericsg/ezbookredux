'use client';

import { formatDistanceToNow } from 'date-fns';
import { Bell, X, Check, AlertCircle, Info } from 'lucide-react';
import React, { useState } from 'react';

import { useNotifications } from '@/hooks/useNotifications';
import { cn } from '@/lib/utils';

import { Badge } from './Badge';
import { Button } from './Button';
import { Popover, PopoverContent, PopoverTrigger } from './Popover';
import { ScrollArea } from './ScrollArea';

export type Notification;
export type NotificationsPanelProps;

export type Notification;
export type NotificationsPanelProps;

export type Notification;
export type NotificationsPanelProps;

// Export types at the top
export type Notification = {
  /** Unique identifier for the notification */
  id: string;
  /** Title of the notification */
  title: string;
  /** Message content of the notification */
  message: string;
  /** Type of notification */
  type: 'success' | 'warning' | 'error' | 'info';
  /** Timestamp when the notification was created */
  createdAt: Date;
  /** Whether the notification has been read */
  read: boolean;
};

export type NotificationsPanelProps = {
  /** Additional class names */
  className?: string;
};

/**
 * NotificationsPanel component for displaying and managing notifications
 * @example
 * <NotificationsPanel className="my-4" />
 */
const NotificationsPanel = React.forwardRef<HTMLDivElement, NotificationsPanelProps>(
  ({ className }, ref) => {
    const [open, setOpen] = useState(false);
    const { notifications, markAsRead, markAllAsRead, loading } = useNotifications();

    const getNotificationIcon = (type: Notification['type']) => {
      switch (type) {
        case 'success':
          return <Check className="h-4 w-4 text-green-500" />;
        case 'warning':
          return <AlertCircle className="h-4 w-4 text-yellow-500" />;
        case 'error':
          return <X className="h-4 w-4 text-red-500" />;
        case 'info':
          return <Info className="h-4 w-4 text-blue-500" />;
        default:
          return null;
      }
    };

    const unreadCount = notifications.filter(n => !n.read).length;

    return (
      <div 
        className={cn('relative', className)} 
        ref={ref}
        role="region"
        aria-label="Notifications"
      >
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="relative"
              aria-label={`${unreadCount} unread notifications`}
            >
              <Bell className="h-5 w-5" />
              {unreadCount > 0 && (
                <Badge
                  variant="destructive"
                  className="absolute -right-1 -top-1 h-5 w-5 rounded-full p-0"
                >
                  {unreadCount}
                </Badge>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80 p-0" align="end">
            <div className="flex items-center justify-between border-b px-4 py-2">
              <h4 className="text-sm font-semibold">Notifications</h4>
              {unreadCount > 0 && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={markAllAsRead}
                  disabled={loading}
                  aria-label="Mark all as read"
                >
                  Mark all read
                </Button>
              )}
            </div>
            <ScrollArea className="h-[300px]">
              {notifications.length === 0 ? (
                <div className="flex h-full items-center justify-center">
                  <p className="text-sm text-muted-foreground">
                    No notifications
                  </p>
                </div>
              ) : (
                <div className="grid gap-1 p-1">
                  {notifications.map((notification) => (
                    <button
                      key={notification.id}
                      className={cn(
                        'group relative flex items-center space-x-4 rounded-md p-3 hover:bg-accent',
                        !notification.read && 'bg-accent/50'
                      )}
                      onClick={() => markAsRead(notification.id)}
                      disabled={loading}
                      aria-label={`${notification.title} - ${notification.message}`}
                    >
                      <div className="flex-shrink-0">
                        {getNotificationIcon(notification.type)}
                      </div>
                      <div className="flex-1 space-y-1">
                        <p className="text-sm font-medium">
                          {notification.title}
                        </p>
                        <p className="text-sm text-muted-foreground">
                          {notification.message}
                        </p>
                        <p className="text-xs text-muted-foreground">
                          {formatDistanceToNow(notification.createdAt, {
                            addSuffix: true,
                          })}
                        </p>
                      </div>
                    </button>
                  ))}
                </div>
              )}
            </ScrollArea>
          </PopoverContent>
        </Popover>
      </div>
    );
  }
);

// Add displayName
NotificationsPanel.displayName = 'NotificationsPanel';

// Both named and default exports at the bottom
export { NotificationsPanel };

