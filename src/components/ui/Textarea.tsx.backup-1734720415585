'use client';

import * as React from 'react';

import { cn } from '@/lib/utils';

export type TextareaProps;

export type TextareaProps;

export type TextareaProps;

// Export types at the top
export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {
  /** Additional class names */
  className?: string;
  /** Error state */
  error?: boolean;
  /** Helper text */
  helperText?: string;
  /** Maximum character count */
  maxLength?: number;
  /** Minimum rows */
  minRows?: number;
  /** Maximum rows */
  maxRows?: number;
};

/**
 * Textarea component for multi-line text input
 * @example
 * <Textarea
 *   placeholder="Enter your message"
 *   maxLength={500}
 *   helperText="Please keep your message concise"
 * />
 */
const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ 
    className, 
    error,
    helperText,
    maxLength,
    minRows = 3,
    maxRows,
    ...props 
  }, ref) => {
    const [characterCount, setCharacterCount] = React.useState(0);

    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
      setCharacterCount(e.target.value.length);
      props.onChange?.(e);
    };

    return (
      <div className="relative">
        <textarea
          className={cn(
            'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
            error && 'border-destructive',
            className
          )}
          ref={ref}
          onChange={handleChange}
          rows={minRows}
          aria-invalid={error}
          aria-describedby={helperText ? 'textarea-helper-text' : undefined}
          {...props}
        />
        {(helperText || maxLength) && (
          <div className="mt-1 flex justify-between text-sm">
            {helperText && (
              <span 
                id="textarea-helper-text"
                className={cn(
                  'text-muted-foreground',
                  error && 'text-destructive'
                )}
              >
                {helperText}
              </span>
            )}
            {maxLength && (
              <span className="text-muted-foreground">
                {characterCount}/{maxLength}
              </span>
            )}
          </div>
        )}
      </div>
    );
  }
);

// Add displayName
Textarea.displayName = 'Textarea';

// Both named and default exports at the bottom
export { Textarea };

