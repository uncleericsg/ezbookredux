import { motion } from 'framer-motion';
import { Shield, CheckCircle, AlertTriangle } from 'lucide-react';
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

import { useUser } from '../contexts/UserContext';

/**
 * AMCSubscriptionFlow component for the iAircon Easy Booking system
 *
 * @component AMCSubscriptionFlow
 * @description Guides users through the AMC subscription process, including payment,
 * activation, and initial service scheduling
 *
 * @example
 * ```tsx
 * import { AMCSubscriptionFlow } from './components';
 * <AMCSubscriptionFlow />
 * ```
 */

export interface SubscriptionStep {
  id: string;
  title: string;
  description: string;
}

const steps: SubscriptionStep[] = [
  {
    id: 'payment',
    title: 'Payment',
    description: 'Complete payment for your selected AMC package',
  },
  {
    id: 'activation',
    title: 'Activation',
    description: 'Activate your AMC features and benefits',
  },
  {
    id: 'scheduling',
    title: 'Schedule Service',
    description: 'Schedule your first maintenance service',
  },
];

export interface AMCSubscriptionFlowProps extends React.HTMLAttributes<HTMLDivElement> {
  /** Optional callback when subscription flow is completed */
  onComplete?: () => void;
}

export const AMCSubscriptionFlow: React.FC<AMCSubscriptionFlowProps> = ({ onComplete, ...props }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const { user, updateUser } = useUser();

  const handlePaymentSuccess = async () => {
    try {
      setLoading(true);
      await updateUser({
        ...user,
        amcStatus: 'active',
        subscriptionStartDate: new Date().toISOString(),
      });
      toast.success('AMC Package activated successfully!');
      setCurrentStep(1);
    } catch (error) {
      toast.error('Failed to activate AMC package. Please try again.');
      console.error('Payment activation error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleActivation = async () => {
    try {
      setLoading(true);
      await Promise.all([
        updateUser({
          ...user,
          amcFeatures: {
            ...user.amcFeatures,
            enabled: true,
            activatedAt: new Date().toISOString(),
          },
        }),
      ]);
      toast.success('AMC features enabled successfully');
      setCurrentStep(2);
    } catch (error) {
      toast.error('Failed to enable AMC features. Please try again.');
      console.error('Feature activation error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleScheduling = async () => {
    try {
      setLoading(true);
      await updateUser({
        ...user,
        firstServiceScheduled: true,
      });
      toast.success('Initial service scheduled successfully');
      onComplete?.();
      navigate('/dashboard');
    } catch (error) {
      toast.error('Failed to schedule service. Please try again.');
      console.error('Scheduling error:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-6"
          >
            <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <Shield className="h-5 w-5 text-blue-400 mt-1" />
                <div>
                  <h3 className="font-medium text-blue-400">Complete Payment</h3>
                  <p className="text-sm text-gray-400 mt-1">
                    Please complete the payment to activate your AMC package
                  </p>
                </div>
              </div>
            </div>
            <button
              onClick={handlePaymentSuccess}
              disabled={loading}
              className="w-full rounded-lg bg-blue-600 px-4 py-3 text-white transition-colors hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Processing...' : 'Complete Payment'}
            </button>
          </motion.div>
        );
      case 1:
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-6"
          >
            <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <CheckCircle className="h-5 w-5 text-green-400 mt-1" />
                <div>
                  <h3 className="font-medium text-green-400">Payment Successful</h3>
                  <p className="text-sm text-gray-400 mt-1">
                    Your AMC package has been activated successfully
                  </p>
                </div>
              </div>
            </div>
            <button
              onClick={handleActivation}
              disabled={loading}
              className="w-full rounded-lg bg-blue-600 px-4 py-3 text-white transition-colors hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Activating...' : 'Enable AMC Features'}
            </button>
          </motion.div>
        );
      case 2:
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-6"
          >
            <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <AlertTriangle className="h-5 w-5 text-yellow-400 mt-1" />
                <div>
                  <h3 className="font-medium text-yellow-400">Schedule Service</h3>
                  <p className="text-sm text-gray-400 mt-1">
                    Schedule your first maintenance service to get started
                  </p>
                </div>
              </div>
            </div>
            <button
              onClick={handleScheduling}
              disabled={loading}
              className="w-full rounded-lg bg-blue-600 px-4 py-3 text-white transition-colors hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Scheduling...' : 'Schedule Service'}
            </button>
          </motion.div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="max-w-2xl mx-auto py-12 px-4" {...props}>
      <div className="mb-8">
        <div className="flex items-center justify-between relative">
          {steps.map((step, index) => (
            <React.Fragment key={step.id}>
              <div className="flex flex-col items-center">
                <div
                  className={`w-10 h-10 rounded-full flex items-center justify-center ${
                    index <= currentStep
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-200 text-gray-400'
                  }`}
                >
                  {index + 1}
                </div>
                <div className="text-center mt-2">
                  <p className="font-medium text-sm">{step.title}</p>
                  <p className="text-xs text-gray-500 mt-1">{step.description}</p>
                </div>
              </div>
              {index < steps.length - 1 && (
                <div
                  className={`flex-1 h-0.5 ${
                    index < currentStep ? 'bg-blue-600' : 'bg-gray-200'
                  }`}
                />
              )}
            </React.Fragment>
          ))}
        </div>
      </div>
      {renderStep()}
    </div>
  );
};

AMCSubscriptionFlow.displayName = 'AMCSubscriptionFlow';

export default AMCSubscriptionFlow;
