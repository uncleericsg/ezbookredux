'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { Check, AlertCircle, XCircle } from 'lucide-react';
import * as React from 'react';
import { type FC, useState, useEffect } from 'react';

import { Button } from '@/components/ui/Button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle
} from '@/components/ui/Dialog';
import { Input } from '@/components/ui/Input';
import { Label } from '@/components/ui/Label';
import { cn } from '@/lib/utils';

export type FC;
export interface PasswordCreationModalProps;
export interface PasswordRequirement;

interface PasswordCreationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (password: string) => void;
}

interface PasswordRequirement {
  id: string;
  label: string;
  validator: (password: string) => boolean;
}

const passwordRequirements: PasswordRequirement[] = [
  {
    id: 'length',
    label: 'At least 8 characters long',
    validator: (password) => password.length >= 8
  },
  {
    id: 'uppercase',
    label: 'Contains uppercase letter',
    validator: (password) => /[A-Z]/.test(password)
  },
  {
    id: 'lowercase',
    label: 'Contains lowercase letter',
    validator: (password) => /[a-z]/.test(password)
  },
  {
    id: 'number',
    label: 'Contains number',
    validator: (password) => /\d/.test(password)
  },
  {
    id: 'special',
    label: 'Contains special character',
    validator: (password) => /[!@#$%^&*(),.?":{}|<>]/.test(password)
  }
];

const PasswordCreationModal: FC<PasswordCreationModalProps> = ({
  isOpen,
  onClose,
  onSubmit
}) => {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [requirements, setRequirements] = useState<Record<string, boolean>>({});

  useEffect(() => {
    const newRequirements = passwordRequirements.reduce<Record<string, boolean>>((acc, req) => ({
      ...acc,
      [req.id]: req.validator(password)
    }), {});
    setRequirements(newRequirements);
  }, [password]);

  const handleSubmit = () => {
    if (password === confirmPassword && Object.values(requirements).every(Boolean)) {
      onSubmit(password);
      onClose();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Create Password</DialogTitle>
          <DialogDescription>
            Please create a strong password that meets all the requirements below.
          </DialogDescription>
        </DialogHeader>
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter your password"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="confirmPassword">Confirm Password</Label>
            <Input
              id="confirmPassword"
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="Confirm your password"
            />
          </div>
          <div className="space-y-2">
            <Label>Password Requirements</Label>
            <div className="space-y-2">
              <AnimatePresence>
                {passwordRequirements.map((req) => (
                  <motion.div
                    key={req.id}
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    className={cn(
                      'flex items-center space-x-2 text-sm',
                      requirements[req.id] ? 'text-green-500' : 'text-gray-500'
                    )}
                  >
                    {requirements[req.id] ? (
                      <Check className="h-4 w-4" />
                    ) : (
                      <XCircle className="h-4 w-4" />
                    )}
                    <span>{req.label}</span>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          </div>
          {password && confirmPassword && password !== confirmPassword && (
            <div className="flex items-center space-x-2 text-red-500 text-sm">
              <AlertCircle className="h-4 w-4" />
              <span>Passwords do not match</span>
            </div>
          )}
        </div>
        <div className="flex justify-end space-x-2">
          <Button variant="ghost" onClick={onClose}>
            Cancel
          </Button>
          <Button
            onClick={handleSubmit}
            disabled={
              !password ||
              !confirmPassword ||
              password !== confirmPassword ||
              !Object.values(requirements).every(Boolean)
            }
          >
            Create Password
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

PasswordCreationModal.displayName = 'PasswordCreationModal';

export { PasswordCreationModal, PasswordCreationModalProps, PasswordRequirement };
