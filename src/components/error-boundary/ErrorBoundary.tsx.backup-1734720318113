'use client';

import * as React from 'react';
import { ErrorBoundary as ReactErrorBoundary } from 'react-error-boundary';

export interface ErrorFallbackProps;
export interface ErrorBoundaryProps;
export type ErrorBoundaryProps;
export type ErrorFallbackProps;

export interface ErrorFallbackProps;
export interface ErrorBoundaryProps;
export type ErrorBoundaryProps;
export type ErrorFallbackProps;

interface ErrorFallbackProps {
  error: Error;
  resetErrorBoundary: () => void;
}

const ErrorFallback: React.FC<ErrorFallbackProps> = ({
  error,
  resetErrorBoundary
}) => {
  return (
    <div role="alert" className="rounded-lg border border-red-500/20 bg-red-500/10 p-4">
      <p className="font-medium text-red-500">Something went wrong</p>
      <p className="mt-1 text-sm text-red-400">{error.message}</p>
      <button
        onClick={resetErrorBoundary}
        className="mt-4 rounded-md bg-red-500 px-4 py-2 text-white transition-colors hover:bg-red-600"
      >
        Try again
      </button>
    </div>
  );
};

interface ErrorBoundaryProps {
  children: React.ReactNode;
  FallbackComponent?: React.ComponentType<ErrorFallbackProps>;
  onReset?: () => void;
}

const ErrorBoundary: React.FC<ErrorBoundaryProps> = ({
  children,
  FallbackComponent = ErrorFallback,
  onReset
}) => {
  return (
    <ReactErrorBoundary
      FallbackComponent={FallbackComponent}
      onReset={onReset}
    >
      {children}
    </ReactErrorBoundary>
  );
};

ErrorBoundary.displayName = 'ErrorBoundary';
ErrorFallback.displayName = 'ErrorFallback';

export { ErrorBoundary, type ErrorBoundaryProps, type ErrorFallbackProps };
export default ErrorBoundary;
