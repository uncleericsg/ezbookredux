import { motion } from 'framer-motion';
import { type FC, useEffect, useRef, useState , HTMLAttributes } from 'react';
import CountUp from 'react-countup';

export type FC, useEffect, useRef, useState , HTMLAttributes } from 'react';

export interface TrustIndicator;

export interface TrustIndicatorsProps;


interface TrustIndicator {
  value: number;
  startValue: number;
  label: string;
  suffix?: string;
}

interface TrustIndicatorsProps extends HTMLAttributes<HTMLDivElement> {
  indicators?: TrustIndicator[];
}

const defaultIndicators: TrustIndicator[] = [
  {
    value: 1000,
    startValue: 0,
    label: 'Happy Customers',
    suffix: '+'
  },
  {
    value: 95,
    startValue: 0,
    label: 'Customer Satisfaction',
    suffix: '%'
  },
  {
    value: 5000,
    startValue: 0,
    label: 'Services Completed',
    suffix: '+'
  },
  {
    value: 10,
    startValue: 0,
    label: 'Years Experience',
    suffix: '+'
  }
];

const TrustIndicators: FC<TrustIndicatorsProps> = ({
  indicators = defaultIndicators,
  className = ''
}) => {
  const [hasAnimated, setHasAnimated] = useState(false);
  const counterRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && !hasAnimated) {
          setHasAnimated(true);
        }
      },
      { threshold: 0.1 }
    );

    if (counterRef.current) {
      observer.observe(counterRef.current);
    }

    return () => observer.disconnect();
  }, [hasAnimated]);

  return (
    <div className={`mb-16 ${className}`}>
      <div
        ref={counterRef}
        className="bg-gradient-to-br from-cyan-500/20 to-blue-900/20 backdrop-blur-sm rounded-2xl border border-cyan-500/20 shadow-lg shadow-cyan-500/5"
      >
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 p-4 md:p-6">
          {indicators.map((indicator, index) => (
            <motion.div
              key={index}
              whileHover={{ scale: 1.05 }}
              transition={{ type: "spring", stiffness: 300 }}
              className="bg-gradient-to-br from-cyan-500/30 to-blue-800/20 border border-cyan-500/30 rounded-xl p-4 md:p-6 backdrop-blur-sm hover:shadow-lg"
            >
              <div className="text-2xl md:text-3xl font-bold text-center text-cyan-400">
                {hasAnimated ? (
                  <CountUp
                    start={indicator.startValue}
                    end={indicator.value}
                    duration={2.5}
                    separator=","
                    suffix={indicator.suffix}
                  />
                ) : `${indicator.value.toLocaleString()}${indicator.suffix}`}
              </div>
              <div className="text-sm md:text-base text-center text-gray-300 mt-2">
                {indicator.label}
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
};
export { TrustIndicator, TrustIndicatorsProps, TrustIndicators };

undefined.displayName = 'undefined';