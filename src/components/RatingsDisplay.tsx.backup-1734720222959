import { motion, AnimatePresence } from 'framer-motion';
import { Star, MessageSquare } from 'lucide-react';
import { type FC, useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { toast } from 'sonner';

import { useServiceRating } from '../hooks/useServiceRating';
import type { RootState } from '../store';

import ServiceRating from './ServiceRating';

export type FC;
export interface Rating;
export interface RatingsDisplayProps;

interface Rating {
  id: string;
  userName: string;
  rating: number;
  date: string;
}

const DISPLAY_DURATION = 5000;

const MOCK_RATINGS: Rating[] = [
  { id: '1', userName: 'John L.', rating: 5, date: '2024-01-01' },
  { id: '2', userName: 'Sarah T.', rating: 5, date: '2024-01-02' },
  { id: '3', userName: 'Michael W.', rating: 4, date: '2024-01-03' },
  { id: '4', userName: 'Emma K.', rating: 5, date: '2024-01-04' },
  { id: '5', userName: 'David C.', rating: 5, date: '2024-01-05' },
  { id: '6', userName: 'Lisa M.', rating: 4, date: '2024-01-06' },
  { id: '7', userName: 'James P.', rating: 5, date: '2024-01-07' },
  { id: '8', userName: 'Anna S.', rating: 5, date: '2024-01-08' },
  { id: '9', userName: 'Robert Y.', rating: 4, date: '2024-01-09' }
];

interface RatingsDisplayProps {
  className?: string;
}

const RatingsDisplay: FC<RatingsDisplayProps> = ({ className }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showRating, setShowRating] = useState(false);
  const [ratings, setRatings] = useState<Rating[]>([]);
  const [loading, setLoading] = useState(true);
  const [paused, setPaused] = useState(false);

  const currentUser = useSelector((state: RootState) => state.user.currentUser);
  const { submitRating } = useServiceRating();

  useEffect(() => {
    const loadRatings = async (): Promise<void> => {
      try {
        // In development, use mock data
        if (import.meta.env.DEV) {
          const shuffledRatings = [...MOCK_RATINGS]
            .sort(() => Math.random() - 0.5)
            .filter((r) => r.rating >= 4)
            .slice(0, 10);
          setRatings(shuffledRatings);
          return;
        }

        const response = await window.fetch('/api/ratings');
        const data = await response.json();
        
        // Shuffle the API response data before filtering and slicing
        const shuffledRatings = [...data]
          .sort(() => Math.random() - 0.5)
          .filter((r: Rating) => r.rating >= 4)
          .slice(0, 10);
        setRatings(shuffledRatings);
      } catch (error) {
        console.error('Failed to load ratings:', error);
      } finally {
        setLoading(false);
      }
    };

    void loadRatings();
  }, []);

  useEffect(() => {
    if (paused || ratings.length === 0) {
      return undefined;
    }

    const interval = window.setInterval(() => {
      setCurrentIndex((prev) => (prev + 1) % ratings.length);
    }, DISPLAY_DURATION);

    return () => window.clearInterval(interval);
  }, [ratings.length, paused]);

  if (loading || ratings.length === 0) {
    return null;
  }

  const currentRating = ratings[currentIndex];
  const messages = [
    'just rated our service',
    'gave us a fantastic rating',
    'shared their experience',
    'rated our team',
    'appreciated our service'
  ];
  const message = messages[currentIndex % messages.length];

  const handleRatingClick = (): void => {
    if (!currentUser) {
      toast.error('Please log in to rate our service');
      return;
    }
    setShowRating(true);
  };

  const handleRatingSubmit = async (rating: number, feedback?: string): Promise<void> => {
    await submitRating('latest-service', rating, feedback);
    setShowRating(false);

    // Prompt for Google review if rating is 4-5 stars
    if (rating >= 4 && typeof window !== 'undefined') {
      const shouldReview = window.confirm(
        'Thank you for your positive feedback! Would you like to share your experience on Google?'
      );
      if (shouldReview) {
        window.open('https://g.page/r/YOUR_GOOGLE_REVIEW_LINK', '_blank', 'noopener,noreferrer');
      }
    }
  };

  return (
    <div className={`relative h-20 overflow-hidden ${className ?? ''}`}>
      <AnimatePresence mode="wait">
        <motion.div
          key={currentRating.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.3 }}
          className="group flex h-full cursor-pointer flex-col items-center justify-center space-y-2 px-4"
          onClick={handleRatingClick}
          onMouseEnter={() => setPaused(true)}
          onMouseLeave={() => setPaused(false)}
          role="button"
          tabIndex={0}
          aria-label="View rating details"
          onKeyDown={(e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              handleRatingClick();
            }
          }}
        >
          <div className="text-center">
            <span className="font-medium text-gray-300">{currentRating.userName}</span>
            <span className="ml-2 text-gray-400">{message}</span>
          </div>
          <div className="flex items-center space-x-2">
            {Array.from({ length: currentRating.rating }).map((_, i) => (
              <motion.div
                key={i}
                whileHover={{ scale: 1.2 }}
                transition={{ type: 'spring', stiffness: 400, damping: 10 }}
              >
                <Star
                  className="h-6 w-6 fill-yellow-400 text-yellow-400 transition-all duration-300 group-hover:scale-110"
                  aria-hidden="true"
                />
              </motion.div>
            ))}
            <MessageSquare 
              className="h-4 w-4 text-blue-400 opacity-0 transition-opacity group-hover:opacity-100" 
              aria-hidden="true"
            />
          </div>
        </motion.div>
      </AnimatePresence>
      {showRating && (
        <ServiceRating
          serviceId="latest-service"
          onSubmit={handleRatingSubmit}
          onClose={() => setShowRating(false)}
        />
      )}
    </div>
  );
};
export { RatingsDisplayProps, RatingsDisplay };
