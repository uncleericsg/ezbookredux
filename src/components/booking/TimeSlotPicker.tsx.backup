'use client';

import { Box, Typography, Grid, Button, CircularProgress } from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers';
import React from 'react';

import { useTimeSlotPicker } from '@/hooks/useTimeSlotPicker';
import { TimeSlot } from '@/types/booking';

// Export types at the top
export type TimeSlotPickerProps = React.HTMLAttributes<HTMLDivElement> & {
  onSlotSelect?: (slot: TimeSlot) => void;
  initialDate?: Date;
  minDate?: Date;
  maxDate?: Date;
};

const formatTime = (date: Date): string => {
  return date.toLocaleTimeString('en-US', {
    hour: 'numeric',
    minute: '2-digit',
    hour12: true
  });
};

// Component declaration as const
const TimeSlotPicker = ({
  onSlotSelect,
  className
}: TimeSlotPickerProps) => {
  const {
    selectedDate,
    selectedSlot,
    availableSlots,
    loading,
    error,
    handleDateChange,
    handleSlotSelect
  } = useTimeSlotPicker({ onSlotSelect });

  return (
    <Box>
      <DatePicker
        label="Select Date"
        value={selectedDate}
        onChange={(date) => date && handleDateChange(date)}
        minDate={new Date()}
      />
      <Box mt={3}>
        {loading && (
          <Box display="flex" justifyContent="center">
            <CircularProgress />
          </Box>
        )}
        {error && (
          <Typography color="error" align="center">
            {error.message}
          </Typography>
        )}
        {!loading && !error && availableSlots.length === 0 && (
          <Typography align="center" color="textSecondary">
            No available time slots for the selected date
          </Typography>
        )}
        {!loading && !error && availableSlots.length > 0 && (
          <Grid container spacing={2}>
            {availableSlots.map((slot) => (
              <Grid item xs={6} sm={4} md={3} key={slot.id}>
                <Button
                  variant={selectedSlot?.id === slot.id ? 'contained' : 'outlined'}
                  fullWidth
                  onClick={() => handleSlotSelect(slot)}
                  disabled={!slot.available}
                >
                  {formatTime(new Date(slot.startTime))}
                </Button>
              </Grid>
            ))}
          </Grid>
        )}
      </Box>
    </Box>
  );
};

// Add displayName
TimeSlotPicker.displayName = 'TimeSlotPicker';

// Both named and default exports at the bottom
export { TimeSlotPicker };
export default TimeSlotPicker;
