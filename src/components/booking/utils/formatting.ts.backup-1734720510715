import type { BookingState } from '@/components/booking';
import type { CustomerFormData } from '@/components/booking/CustomerForm';
import type { FormattedAddress } from '@/types/booking';
import { sanitizeInput } from '@/utils/validation';

/**
 * Formats a phone number to Singapore format
 */
export const formatPhoneNumber = (phone: string, includeCountryCode = false): string => {
  const digits = sanitizeInput(phone, 'numeric');
  if (!digits) {
    return '';
  }

  // Remove country code if present
  const number = digits.replace(/^65/, '');

  // Handle partial input
  if (number.length < 8) {
    const parts = [
      number.slice(0, 4),
      number.slice(4)
    ].filter(Boolean);
    return parts.join(' ');
  }

  // Format complete number
  const formatted = number.replace(/(\d{4})(\d{4})/, '$1 $2');
  return includeCountryCode ? `+65 ${formatted}` : formatted;
};

/**
 * Formats a unit number with consistent formatting
 */
export const formatUnitNumber = (unit: string, includeHash = true): string => {
  if (!unit) {
    return '';
  }

  // Remove existing formatting
  const cleaned = unit.replace(/[#-]/g, '');

  // Split into level and unit
  const parts = cleaned.match(/^(\d{1,3})(\d{1,4})$/);
  if (!parts) {
    return unit; // Return original if format doesn't match
  }

  const [, level, number] = parts;
  const formatted = `${level}-${number}`;
  return includeHash ? `#${formatted}` : formatted;
};

/**
 * Formats an address based on the specified format
 */
export const formatAddress = (address: FormattedAddress): string => {
  const { street, unit, postal } = address;
  
  if (!street || !postal) {
    return '';
  }

  const formattedUnit = unit ? formatUnitNumber(unit) : '';
  
  const addressParts = [
    street,
    formattedUnit,
    `Singapore ${postal}`
  ].filter(Boolean);

  return addressParts.join(', ');
};

/**
 * Formats the customer data for display
 */
export const formatCustomerData = (data: CustomerFormData): CustomerFormData | null => {
  if (!data) {
    return null;
  }

  const formatted = {
    ...data,
    phone: formatPhoneNumber(data.phone),
    address: formatAddress(data.address)
  };

  return formatted;
};

/**
 * Formats a date for display
 */
export const formatDate = (date: Date, format: 'long' | 'short' = 'long'): string => {
  if (!date) {
    return '';
  }

  const d = new Date(date);
  if (isNaN(d.getTime())) {
    return '';
  }

  const options = format === 'long' ? {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  } : {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  };

  return d.toLocaleDateString('en-SG', options);
};

/**
 * Formats a time for display
 */
export const formatTime = (time: string, format: '12h' | '24h' = '12h'): string => {
  if (!time) {
    return '';
  }

  const [hours, minutes] = time.split(':').map(Number);
  if (isNaN(hours) || isNaN(minutes)) {
    return '';
  }

  if (format === '12h') {
    const period = hours < 12 ? 'AM' : 'PM';
    const hour12 = hours % 12 || 12;
    return `${hour12}:${minutes.toString().padStart(2, '0')} ${period}`;
  }

  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
};

/**
 * Formats the full booking data for submission
 */
export const formatBookingData = (state: BookingState): BookingState | null => {
  if (!state) {
    return null;
  }

  const { customerData, selectedBrands, selectedIssues, scheduleData } = state;

  return {
    customerData: formatCustomerData(customerData),
    selectedBrands,
    selectedIssues,
    scheduleData: {
      ...scheduleData,
      date: formatDate(scheduleData.date),
      time: formatTime(scheduleData.time)
    }
  };
};

undefined.displayName = 'undefined';