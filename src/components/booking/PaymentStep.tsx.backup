'use client';

import React from 'react';
import { Elements } from '@stripe/react-stripe-js';
import { Loader2 } from 'lucide-react';
import { useEffect, useState, useCallback } from 'react';
import { toast } from 'react-hot-toast';

import {
  initializeStripe,
  createPaymentIntent,
  addToServiceQueue
} from '../../services/paymentService';
import { useAppSelector } from '../../store';
import PasswordCreationModal from '../auth/PasswordCreationModal';
import PaymentErrorBoundary from '../payment/PaymentErrorBoundary';
import PaymentForm from '../payment/PaymentForm';
import PaymentSummary from '../payment/PaymentSummary';
import TermsAndConditions from '../payment/TermsAndConditions';

import { BookingConfirmation } from './BookingConfirmation';

/**
 * PaymentStep component for handling payment processing and booking confirmation.
 * 
 * Critical Features:
 * - Secure payment processing with Stripe
 * - Booking confirmation and reference generation
 * - User password creation for new users
 * - Terms and conditions acceptance
 * - Error handling and recovery
 */

// Export types at the top
export type PaymentStepProps = {
  bookingDetails: BookingDetails;
  onComplete: (reference: string) => void;
};

export type BookingDetails = {
  serviceType: string;
  date: string;
  time: string;
  duration: number;
  price: number;
  address: string;
  postalCode: string;
  unitNumber: string;
  customerInfo: {
    firstName: string;
    lastName: string;
    email: string;
    mobile: string;
  };
};

const PAYMENT_STATES = {
  INITIAL: 'initial',
  PROCESSING: 'processing',
  SUCCESS: 'success',
  ERROR: 'error',
} as const;

export type PaymentState = {
  status: typeof PAYMENT_STATES[keyof typeof PAYMENT_STATES];
  bookingReference?: string;
  error?: string;
  termsAccepted?: boolean;
  tipAmount?: number;
};

const stripePromise = initializeStripe();

// Component declaration as const
const PaymentStep = ({
  bookingDetails,
  onComplete
}: PaymentStepProps) => {
  const { currentUser } = useAppSelector((state) => state.user);

  // State management
  const [isLoading, setIsLoading] = useState(true);
  const [clientSecret, setClientSecret] = useState('');
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [tipAmount, setTipAmount] = useState(0);
  const [paymentState, setPaymentState] = useState<PaymentState>({
    status: PAYMENT_STATES.INITIAL,
  });

  const tipOptions = [0, 5, 10, 15, 20];

  // Initialize payment intent and client secret
  const initializePayment = useCallback(async () => {
    try {
      setIsLoading(true);
      const secret = await createPaymentIntent(bookingDetails.price + tipAmount);
      setClientSecret(secret);
    } catch (error) {
      toast.error('Failed to initialize payment. Please try again.');
      console.error('Payment initialization error:', error);
    } finally {
      setIsLoading(false);
    }
  }, [bookingDetails.price, tipAmount]);

  // Initialize payment on component mount
  useEffect(() => {
    initializePayment();
  }, [initializePayment]);

  // Handle terms acceptance
  const handleTermsAccept = (accepted: boolean) => {
    setPaymentState((prev) => ({
      ...prev,
      termsAccepted: accepted,
    }));
  };

  // Handle tip amount changes
  const handleTipChange = useCallback((amount: number) => {
    setTipAmount(amount);
    setPaymentState((prev) => ({
      ...prev,
      tipAmount: amount,
    }));
  }, []);

  // Handle payment completion
  const handlePaymentComplete = async (success: boolean) => {
    if (success) {
      try {
        // Add to service queue and get reference
        const reference = await addToServiceQueue(bookingDetails);
        setPaymentState((prev) => ({
          ...prev,
          status: PAYMENT_STATES.SUCCESS,
          bookingReference: reference,
        }));
        onComplete(reference);

        // Show password modal for new users
        if (!currentUser) {
          setShowPasswordModal(true);
        }
      } catch (error) {
        console.error('Error completing payment:', error);
        toast.error('Payment processed but booking failed. Please contact support.');
      }
    } else {
      setPaymentState((prev) => ({
        ...prev,
        status: PAYMENT_STATES.ERROR,
      }));
      toast.error('Payment failed. Please try again.');
    }
  };

  // Handle password creation for new users
  const handlePasswordSubmit = async () => {
    try {
      // Create user account logic here
      setShowPasswordModal(false);
      toast.success('Account created successfully!');
    } catch (error) {
      console.error('Error creating account:', error);
      toast.error('Failed to create account. Please try again.');
    }
  };

  if (paymentState.status === PAYMENT_STATES.SUCCESS) {
    return (
      <BookingConfirmation
        bookingReference={paymentState.bookingReference}
        bookingDetails={bookingDetails}
        showCreateAccount={!currentUser}
        onCreateAccount={() => setShowPasswordModal(true)}
      />
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {isLoading || !clientSecret ? (
        <div className="flex min-h-[400px] items-center justify-center rounded-xl border border-gray-700/70 bg-gray-800/50 backdrop-blur-sm">
          <Loader2 className="h-8 w-8 animate-spin text-emerald-500" />
        </div>
      ) : (
        <Elements
          stripe={stripePromise}
          options={{
            clientSecret,
            appearance: {
              theme: 'night',
              variables: {
                colorPrimary: '#3498db',
              },
            },
          }}
        >
          <PaymentErrorBoundary>
            <PaymentSummary bookingDetails={bookingDetails} tipAmount={tipAmount} />
            <div className="mt-6 border-t border-gray-700/30 pt-6 text-center">
              <h3 className="mb-3 text-gray-300">Add a tip</h3>
              <p className="mb-4 text-sm text-gray-400">
                A generous tip helps keep our service team motivated and smiling! ðŸ˜Š
              </p>
              <div className="flex flex-wrap justify-center gap-2">
                {tipOptions.map((amount) => (
                  <button
                    key={amount}
                    onClick={() => handleTipChange(amount)}
                    className={`
                      rounded-md px-4 py-2 text-sm font-medium
                      ${
                        tipAmount === amount
                          ? 'bg-emerald-600 text-white'
                          : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                      }
                    `}
                  >
                    ${amount}
                  </button>
                ))}
              </div>
            </div>

            <div className="mt-6">
              <TermsAndConditions
                accepted={paymentState.termsAccepted}
                onAccept={handleTermsAccept}
              />
            </div>

            <PaymentForm
              onComplete={handlePaymentComplete}
              disabled={!paymentState.termsAccepted}
            />
          </PaymentErrorBoundary>
        </Elements>
      )}

      {showPasswordModal && (
        <PasswordCreationModal
          email={bookingDetails.customerInfo.email}
          onSubmit={handlePasswordSubmit}
          onClose={() => setShowPasswordModal(false)}
        />
      )}
    </div>
  );
};

PaymentStep.displayName = 'PaymentStep';

// Both named and default exports at the bottom
export { PaymentStep };
export default PaymentStep;
