'use client';

// React and types
import { motion } from 'framer-motion';
import { Loader2 } from 'lucide-react';
import { useEffect, useState, useCallback } from 'react';

// UI Components
import { Calendar } from '@/components/ui/Calendar';
import { logger } from '@/lib/logger';

// Styles
import styles from './ScheduleStep.module.css';

export type TimeSlot;

export type CustomerInfo;

export type PricingOption;

export type ScheduleStepProps;


// Export types at the top

  available: boolean;
  isPeakHour: boolean;
  endTime?: string;
  isBufferTime?: boolean;
  warning?: string;
  capacity?: {
    maxBookings: number;
    currentBookings: number;
    serviceType: string;
  };
  areaCapacity?: {
    maxBookings: number;
    currentBookings: number;
    area: string;
  };
};

  lastName: string;
  email: string;
  mobile: string;
  selectedAddressId: string;
  address: string;
  postalCode: string;
  unitNumber: string;
};

  title: string;
  price: number;
  duration: number;
  description?: string;
  isPromo?: boolean;
  promoLabel?: string;
  isSignature?: boolean;
  paddingBefore?: number;
  paddingAfter?: number;
};

  selectedService: PricingOption;
  onScheduleSelect: (date: Date, timeSlot: string, duration: number) => void;
};

// Component declaration as const
const ScheduleStep = ({
  customerInfo,
  selectedService,
  onScheduleSelect,
}: ScheduleStepProps) => {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);
  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);
  const [loading, setLoading] = useState(false);

  const fetchTimeSlots = useCallback(async (date: Date) => {
    setLoading(true);
    try {
      // TODO: Implement time slot fetching logic
      logger.info('Fetching time slots for date:', date);
      // Placeholder data
      const slots: TimeSlot[] = [
        { time: '09:00', available: true, isPeakHour: false },
        { time: '10:00', available: true, isPeakHour: true },
        { time: '11:00', available: true, isPeakHour: true },
        { time: '12:00', available: false, isPeakHour: true },
      ];
      setTimeSlots(slots);
    } catch (error) {
      logger.error('Error fetching time slots:', error);
      setTimeSlots([]);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (selectedDate) {
      fetchTimeSlots(selectedDate);
    }
  }, [selectedDate, fetchTimeSlots]);

  const handleTimeSelection = (time: string) => {
    if (selectedDate) {
      onScheduleSelect(selectedDate, time, selectedService.duration);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="space-y-6"
    >
      <div className="grid gap-6 md:grid-cols-2">
        <div>
          <h3 className="text-lg font-semibold mb-4">Select Date</h3>
          <Calendar
            mode="single"
            selected={selectedDate}
            onSelect={setSelectedDate}
            className="rounded-md border"
            disabled={(date) => date < new Date() || date > new Date().setMonth(new Date().getMonth() + 2)}
          />
        </div>

        <div>
          <h3 className="text-lg font-semibold mb-4">Available Time Slots</h3>
          {loading ? (
            <div className="flex items-center justify-center h-48">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : (
            <div className="grid grid-cols-2 gap-3">
              {timeSlots.map((slot) => (
                <button
                  key={slot.time}
                  onClick={() => handleTimeSelection(slot.time)}
                  disabled={!slot.available}
                  className={`${styles.timeSlot} ${
                    !slot.available ? styles.disabled : slot.isPeakHour ? styles.peak : styles.available
                  }`}
                >
                  <span>{slot.time}</span>
                  {slot.isPeakHour && <span className="text-xs">Peak Hour</span>}
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
    </motion.div>
  );
};

// Add displayName
ScheduleStep.displayName = 'ScheduleStep';

// Both named and default exports at the bottom
export { ScheduleStep };

undefined.displayName = 'undefined';