'use client';

import { motion } from 'framer-motion';
import { Check } from 'lucide-react';
import React from 'react';

export interface Step;

export interface BookingProgressProps;


const BookingProgress = ({
  currentStep,
  steps,
  onStepClick,
  completedSteps = [],
}: BookingProgressProps) => {
  // Validate and normalize currentStep
  const rawCurrentStep = currentStep;
  const normalizedCurrentStep = Math.max(0, Math.min(rawCurrentStep, steps.length - 1));

  return (
    <div className="relative mx-auto mb-8 max-w-4xl">
      {/* Progress bar background */}
      <div className="absolute left-0 right-0 top-5 h-1 bg-gray-700">
        <motion.div
          className="absolute left-0 top-0 h-full bg-[#FFD700]"
          initial={{ width: 0 }}
          animate={{ width: `${(normalizedCurrentStep / steps.length) * 100}%` }}
          transition={{ duration: 0.3 }}
        />
      </div>
      {/* Steps */}
      <div className="relative flex justify-between">
        {steps.map((step, index) => {
          const isCompleted = completedSteps?.includes(index);
          const isActive = index === normalizedCurrentStep;
          const isClickable =
            onStepClick &&
            (isCompleted || index <= Math.min(normalizedCurrentStep + 1, steps.length - 1));

          return (
            <div
              key={step.id}
              className={`
                flex flex-col items-center
                ${isClickable ? 'cursor-pointer' : 'cursor-default'}
              `}
              onClick={isClickable ? () => onStepClick(index) : undefined}
              role={isClickable ? 'button' : undefined}
              tabIndex={isClickable ? 0 : undefined}
              onKeyDown={
                isClickable
                  ? (e) => {
                      if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        onStepClick(index);
                      }
                    }
                  : undefined
              }
            >
              {/* Step circle */}
              <div
                className={`
                  relative z-10 flex h-10 w-10 items-center justify-center rounded-full border-2 transition-colors duration-200
                  ${
                    isCompleted
                      ? 'border-[#f7f7f7] bg-[#f7f7f7] text-gray-900'
                      : isActive
                        ? 'border-[#f7f7f7] bg-gray-900 text-[#f7f7f7]'
                        : 'border-gray-700 bg-gray-900 text-gray-400'
                  }
                `}
              >
                {isCompleted ? (
                  <Check className="h-5 w-5" />
                ) : (
                  <span className="text-sm font-medium">{index + 1}</span>
                )}
              </div>
              {/* Step label */}
              <div className="mt-2 text-center">
                <span
                  className={`text-sm font-medium
                    ${isActive ? 'text-[#f7f7f7]' : isCompleted ? 'text-[#f7f7f7]' : 'text-gray-400'}
                  `}
                >
                  {step.label}
                </span>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

BookingProgress.displayName = 'BookingProgress';

export type { BookingProgressProps, Step };
export { BookingProgress };

undefined.displayName = 'undefined';