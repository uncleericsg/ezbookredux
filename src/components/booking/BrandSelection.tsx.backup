'use client';

import { AnimatePresence, motion } from 'framer-motion';
import { AlertTriangle, ArrowRight, ChevronDown, Info, Loader2, X } from 'lucide-react';
import React, { FC, HTMLAttributes, useCallback, useEffect, useState } from 'react';

import { usePreloadComponents } from '@/hooks/usePreloadComponents';
import { useScrollToTop } from '@/hooks/useScrollToTop';

import styles from './BrandSelection.module.css';
import { OptimizedCard } from './components/OptimizedCard';

/*
 * @AI_INSTRUCTION - DO NOT MODIFY THIS FILE
 * This component handles the air conditioner brand selection step and is considered stable.
 *
 * Critical Features:
 * - Brand options display and selection
 * - Form validation
 * - Integration with booking flow
 * - Responsive grid layout
 *
 * Any modifications could affect the brand selection experience.
 * If changes are needed:
 * 1. Test thoroughly with all brand options
 * 2. Ensure mobile responsiveness
 * 3. Validate integration with form state
 */

interface BrandSelectionProps extends HTMLAttributes<HTMLDivElement> {
  onContinue: (brands: string[]) => void;
  error?: string;
  isLoading?: boolean;
}

interface BrandInfo {
  name: string;
  logo?: string;
}

const AC_BRANDS: BrandInfo[] = [
  { name: 'Brand1' },
  { name: 'Brand2' },
  { name: 'Brand3' },
  { name: 'Brand4' }
];

const UNSUPPORTED_BRANDS: string[] = [
  'Avolta',
  'Beko',
  'Europace',
  'GREE',
  'LG',
  'McQuay',
  'Midea',
  'Mitsubishi Heavy Industries (MHI)',
  'PRISM+',
  'Samsung',
  'Sanyo',
  'Sharp',
  'TCL',
  'Trentios',
  'York'
];

const containerVariants = {
  hidden: { opacity: 0 },
  visible: { opacity: 1, transition: { staggerChildren: 0.1 } }
};

const itemVariants = {
  hidden: { opacity: 0 },
  visible: { opacity: 1, transition: { type: 'spring', stiffness: 100 } }
};

const BrandSelection = ({ onContinue, error, isLoading }: BrandSelectionProps) => {
  const [selectedBrands, setSelectedBrands] = useState<string[]>([]);
  const [validationError, setValidationError] = useState<string | undefined>();
  const [_isCompactView, setIsCompactView] = useState(false);
  const [_fadeOutItems, setFadeOutItems] = useState(false);
  const scrollToTop = useScrollToTop();
  usePreloadComponents();

  useEffect(() => {
    let fadeTimeout: number;
    let compactTimeout: number;

    if (selectedBrands.length > 0) {
      fadeTimeout = window.setTimeout(() => {
        setFadeOutItems(true);
        compactTimeout = window.setTimeout(() => {
          setIsCompactView(true);
          setFadeOutItems(false);
        }, 500);
      }, 200);
    } else {
      setFadeOutItems(false);
      setIsCompactView(false);
    }

    return () => {
      window.clearTimeout(fadeTimeout);
      window.clearTimeout(compactTimeout);
    };
  }, [selectedBrands]);

  const handleBrandToggle = useCallback((brand: string) => {
    setSelectedBrands((prev) => {
      const newSelection = prev.includes(brand)
        ? prev.filter((b) => b !== brand)
        : [...prev, brand];
      if (newSelection.length === 0) {
        setFadeOutItems(false);
        setIsCompactView(false);
      }
      return newSelection;
    });
    setValidationError(undefined);
  }, []);

  const handleContinue = useCallback(() => {
    if (selectedBrands.length === 0) {
      setValidationError('Please select at least one brand');
      return;
    }
    scrollToTop();
    onContinue(selectedBrands);
  }, [selectedBrands, onContinue, scrollToTop]);

  const renderBrandCard = useCallback(
    (brand: BrandInfo) => (
      <motion.div
        key={brand.name}
        variants={itemVariants}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1, height: 'auto' }}
        transition={{ duration: 0.2, layout: { duration: 0.2 } }}
        layout
        style={{ overflow: 'hidden', width: '100%' }}
      >
        <OptimizedCard
          name={brand.name}
          logo={brand.logo}
          selected={selectedBrands.includes(brand.name)}
          onClick={() => handleBrandToggle(brand.name)}
          disabled={UNSUPPORTED_BRANDS.includes(brand.name)}
        />
      </motion.div>
    ),
    [selectedBrands, handleBrandToggle]
  );

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className={styles.container}
    >
      <div className={styles.notice}>
        <details className="group" open={selectedBrands.length === 0}>
          <summary className={styles.noticeSummary}>
            <div className={styles.noticeIcon}>
              <Info className={styles.noticeIconInner} />
            </div>
            <div className={styles.noticeContent}>
              <div className={styles.noticeHeader}>
                <h3 className={styles.noticeTitle}>Service Limitations</h3>
                <span className={styles.noticeBadge}>Important Notice</span>
              </div>
              <ChevronDown className={styles.noticeChevron} />
            </div>
          </summary>
          <div className={styles.noticeDetails}>
            <div className={styles.noticeList}>
              <p className={styles.noticeListTitle}>
                AC Types and Brands not serviced and repaired are:
              </p>
              <div className={styles.tagContainer}>
                {['Casement AC', 'Portable AC', 'Windows Type AC'].map((type) => (
                  <span key={type} className={styles.acTypeTag}>
                    {type}
                    <X className={styles.xIcon} />
                  </span>
                ))}
              </div>
              <div className={styles.tagContainer}>
                {UNSUPPORTED_BRANDS.map((brand) => (
                  <span key={brand} className={styles.brandTag}>
                    {brand}
                    <X className={styles.xIcon} />
                  </span>
                ))}
              </div>
            </div>
          </div>
        </details>
      </div>
      <AnimatePresence mode="wait">
        {(error || validationError) && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 10 }}
            className={styles.errorContainer}
          >
            <AlertTriangle className={styles.errorIcon} />
            <p className={styles.errorText}>{error || validationError}</p>
          </motion.div>
        )}
      </AnimatePresence>
      <motion.div className={styles.brandGrid} layout>
        {AC_BRANDS.map(renderBrandCard)}
      </motion.div>
      <motion.div className={styles.actions} layout>
        <button
          type="button"
          className={styles.continueButton}
          onClick={handleContinue}
          disabled={isLoading}
        >
          {isLoading ? (
            <Loader2 className={styles.loadingIcon} />
          ) : (
            <>
              Continue
              <ArrowRight className={styles.arrowIcon} />
            </>
          )}
        </button>
      </motion.div>
    </motion.div>
  );
};

BrandSelection.displayName = 'BrandSelection';

export type { BrandSelectionProps, BrandInfo };
export { BrandSelection };
export default BrandSelection;
