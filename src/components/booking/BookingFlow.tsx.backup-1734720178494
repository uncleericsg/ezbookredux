'use client';

import { AnimatePresence, motion } from 'framer-motion';
import React, { FC, useCallback, useEffect, useState } from 'react';
import { toast } from 'react-hot-toast';
import { useNavigate } from 'react-router-dom';

import { RadixDialog as Dialog } from '@/components/organisms/Dialog';
import { useAdminView } from '@/contexts/AdminViewContext';
import { useAuth } from '@/contexts/AuthContext';
import { fetchLastBooking } from '@/services/bookingService';

import BookingProgress from './BookingProgress';
import BrandSelection from './BrandSelection';
import { BookingFlowErrorBoundary } from './components/BookingFlowErrorBoundary';
import { BookingFlowSkeleton } from './components/BookingFlowSkeleton';
import CustomerForm from './CustomerForm';
import IssueSelection from './IssueSelection';
import PaymentStep from './PaymentStep';
import { QuickBookingPrompt } from './QuickBookingPrompt';
import ScheduleStep from './ScheduleStep';
import { BookingData, BookingFlowProps, BookingFormState, BookingStep } from './types/booking';

const BOOKING_TIMEOUT = 30 * 60 * 1000; // 30 minutes

const BookingFlow = ({ currentStep, onStepComplete }: BookingFlowProps) => {
  const { user, loading: authLoading } = useAuth();
  const navigate = useNavigate();
  const { isFeatureVisible } = useAdminView();

  // State management with proper types
  const [state, setState] = useState<BookingFormState>({
    currentStep: 0,
    bookingData: {
      brands: [],
      customerInfo: {
        firstName: '',
        lastName: '',
        email: '',
        mobile: '',
        addresses: [],
      },
      scheduledDateTime: null,
      scheduledTimeSlot: '',
      issues: [],
      payment: null,
    },
    timeRemaining: BOOKING_TIMEOUT / 1000,
    showQuickBooking: false,
    previousBookingDetails: null,
    validationErrors: {},
  });

  const [isLoading, setIsLoading] = useState(false);

  // Define steps including the new schedule step
  const steps: BookingStep[] = [
    { id: 'brands', label: 'Select Brands' },
    { id: 'issues', label: 'Select Issues' },
    { id: 'customer', label: 'Customer Information' },
    { id: 'schedule', label: 'Schedule Service' },
    ...(isFeatureVisible('booking-payment') ? [{ id: 'payment', label: 'Payment' }] : []),
  ];

  // Callbacks for handling user actions
  const handleBookingSubmit = useCallback(async () => {
    try {
      setIsLoading(true);
      // TODO;
      await toast.promise(Promise.resolve(state.bookingData), {
        loading: 'Submitting booking...',
        success: 'Booking submitted successfully!',
        error: 'Failed to submit booking',
      });
      // Reset booking data and redirect to success page
    } catch (error) {
      toast.error('Failed to submit booking');
    } finally {
      setIsLoading(false);
    }
  }, [state.bookingData]);

  const handleCustomerSave = useCallback((customerInfo: BookingData['customerInfo']) => {
    setState((prev) => ({
      ...prev,
      bookingData: { ...prev.bookingData, customerInfo },
    }));
    setState((prev) => ({ ...prev, currentStep: prev.currentStep + 1 }));
  }, []);

  const handleScheduleSelect = useCallback(
    (scheduledDateTime: Date, scheduledTimeSlot: string) => {
      setState((prev) => ({
        ...prev,
        bookingData: {
          ...prev.bookingData,
          scheduledDateTime,
          scheduledTimeSlot,
        },
      }));
      if (isFeatureVisible('booking-payment')) {
        setState((prev) => ({ ...prev, currentStep: prev.currentStep + 1 }));
      } else {
        void handleBookingSubmit();
      }
    },
    [isFeatureVisible, handleBookingSubmit]
  );

  const handleQuickBook = useCallback(() => {
    setState((prev) => ({ ...prev, currentStep: 3 }));
  }, []);

  const formatTimeRemaining = useCallback((timeRemaining: number) => {
    const minutes = Math.floor(timeRemaining / 60);
    const remainingSeconds = timeRemaining % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }, []);

  // Transform user data to match CustomerForm's user prop interface
  const transformedUser = user
    ? {
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        mobile: user.mobile,
        addresses: user.addresses.map((address) => ({
          id: address.id,
          address: address.address,
          city: address.city,
          state: address.state,
          zip: address.zip,
        })),
      }
    : undefined;

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!authLoading && !user) {
      navigate('/login', { replace: true });
    }
  }, [authLoading, user, navigate]);

  // Fetch previous booking details
  useEffect(() => {
    if (user) {
      const fetchBooking = async () => {
        try {
          setIsLoading(true);
          const lastBooking = await fetchLastBooking();
          if (lastBooking) {
            setState((prev) => ({
              ...prev,
              previousBookingDetails: lastBooking,
            }));
          }
        } catch (error) {
          toast.error('Error fetching previous booking');
        } finally {
          setIsLoading(false);
        }
      };
      void fetchBooking();
    }
  }, [user]);

  // Handle loading state
  if (authLoading || isLoading) {
    return <BookingFlowSkeleton />;
  }

  // Show nothing if not authenticated (will redirect)
  if (!user) {
    return null;
  }

  // Show quick booking prompt if available
  if (state.showQuickBooking && state.currentStep === 0) {
    return (
      <div className="mx-auto max-w-md">
        <QuickBookingPrompt
          previousBooking={state.previousBookingDetails}
          onQuickBook={handleQuickBook}
          onClose={() => setState((prev) => ({ ...prev, showQuickBooking: false }))}
          isOpen={state.showQuickBooking}
        />
      </div>
    );
  }

  return (
    <BookingFlowErrorBoundary>
      <div className="mx-auto max-w-4xl px-4 py-8">
        <div className="fixed right-4 top-4 z-50">
          <span className="text-sm text-gray-500">
            Time remaining: {formatTimeRemaining(state.timeRemaining)}
          </span>
        </div>
        <BookingProgress steps={steps} currentStep={state.currentStep} />
        <AnimatePresence mode="wait">
          {state.currentStep === 0 && (
            <motion.div
              key="brands"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <BrandSelection
                onContinue={(brands) =>
                  setState((prev) => ({
                    ...prev,
                    bookingData: { ...prev.bookingData, brands },
                    currentStep: prev.currentStep + 1,
                  }))
                }
              />
            </motion.div>
          )}
          {state.currentStep === 1 && (
            <motion.div
              key="issues"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <IssueSelection
                onContinue={(issues, otherIssue) =>
                  setState((prev) => ({
                    ...prev,
                    bookingData: { ...prev.bookingData, issues, otherIssue },
                    currentStep: prev.currentStep + 1,
                  }))
                }
              />
            </motion.div>
          )}
          {state.currentStep === 2 && (
            <motion.div
              key="customer"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <CustomerForm
                onSave={handleCustomerSave}
                user={transformedUser}
                isAMC={isFeatureVisible('amc-features')}
              />
            </motion.div>
          )}
          {state.currentStep === 3 && state.bookingData.customerInfo && (
            <motion.div
              key="schedule"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <ScheduleStep
                customerInfo={state.bookingData.customerInfo}
                onScheduleSelect={handleScheduleSelect}
              />
            </motion.div>
          )}
          {state.currentStep === 4 && !isFeatureVisible('amc-features') && (
            <motion.div
              key="payment"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <PaymentStep bookingData={state.bookingData} onComplete={handleBookingSubmit} />
            </motion.div>
          )}
        </AnimatePresence>
        <Dialog
          open={state.timeoutWarningOpen}
          onOpenChange={(open) => setState((prev) => ({ ...prev, timeoutWarningOpen: open }))}
        >
          <div className="rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-700">
            <button
              type="button"
              onClick={() => {
                setState((prev) => ({ ...prev, timeoutWarningOpen: false }));
                setState((prev) => ({
                  ...prev,
                  timeRemaining: BOOKING_TIMEOUT / 1000,
                }));
              }}
            >
              Reset timer
            </button>
          </div>
        </Dialog>
      </div>
    </BookingFlowErrorBoundary>
  );
};

BookingFlow.displayName = 'BookingFlow';

export type { BookingFlowProps };
export { BookingFlow };

