import { GridSortModel, GridFilterModel, GridSelectionModel } from '@mui/x-data-grid';
import { useState, useCallback } from 'react';

import { DataGridState } from './types';

/**
 * Hook for managing DataGrid state
 * @param initialState Initial state for the DataGrid
 * @returns Object containing state and state update functions
 */
export function useDataGridState(initialState?: Partial<DataGridState>) {
  const [state, setState] = useState<DataGridState>({
    page: 0,
    pageSize: 10,
    sortModel: [],
    filterModel: { items: [] },
    selectionModel: [],
    ...initialState
  });

  const setPage = useCallback((page: number) => {
    setState((prev) => ({ ...prev, page }));
  }, []);

  const setPageSize = useCallback((pageSize: number) => {
    setState((prev) => ({ ...prev, pageSize }));
  }, []);

  const setSortModel = useCallback((sortModel: GridSortModel) => {
    setState((prev) => ({ ...prev, sortModel }));
  }, []);

  const setFilterModel = useCallback((filterModel: GridFilterModel) => {
    setState((prev) => ({ ...prev, filterModel }));
  }, []);

  const setSelectionModel = useCallback((selectionModel: GridSelectionModel) => {
    setState((prev) => ({ ...prev, selectionModel }));
  }, []);

  return {
    state,
    setPage,
    setPageSize,
    setSortModel,
    setFilterModel,
    setSelectionModel
  };
}

/**
 * Hook for managing DataGrid pagination
 * @param initialPage Initial page number
 * @param initialPageSize Initial page size
 * @returns Object containing pagination state and update functions
 */
export function useDataGridPagination(initialPage = 0, initialPageSize = 10) {
  const [page, setPage] = useState(initialPage);
  const [pageSize, setPageSize] = useState(initialPageSize);

  const handlePageChange = useCallback((newPage: number) => {
    setPage(newPage);
  }, []);

  const handlePageSizeChange = useCallback((newPageSize: number) => {
    setPageSize(newPageSize);
    setPage(0); // Reset to first page when changing page size
  }, []);

  return {
    page,
    pageSize,
    handlePageChange,
    handlePageSizeChange
  };
}

undefined.displayName = 'undefined';