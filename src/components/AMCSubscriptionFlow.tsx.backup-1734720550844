import { motion } from 'framer-motion';
import { Shield, CheckCircle, AlertTriangle } from 'lucide-react';
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

import { useUser } from '../contexts/UserContext';

export interface SubscriptionStep;

export interface AMCSubscriptionFlowProps;


/**
 * AMCSubscriptionFlow component for the iAircon Easy Booking system
 *
 * @component AMCSubscriptionFlow
 * @description Guides users through the AMC subscription process, including payment,
 * activation, and initial service scheduling
 *
 * @example
 * ```tsx
 * import { AMCSubscriptionFlow } from './components';
 * <AMCSubscriptionFlow />
 * ```
 */

interface SubscriptionStep {
  id: string;
  title: string;
  description: string;
}

const steps: SubscriptionStep[] = [
  {
    id: 'payment',
    title: 'Payment',
    description: 'Complete payment for your selected AMC package',
  },
  {
    id: 'activation',
    title: 'Activation',
    description: 'Activate your AMC features and benefits',
  },
  {
    id: 'scheduling',
    title: 'Initial Service',
    description: 'Schedule your first maintenance service',
  },
];

interface AMCSubscriptionFlowProps extends React.ComponentPropsWithoutRef<'div'> {
  onComplete?: () => void;
}

const AMCSubscriptionFlow: React.FC<AMCSubscriptionFlowProps> = ({
  onComplete,
  ...props
}) => {
  const navigate = useNavigate();
  const { user } = useUser();
  const [currentStep, setCurrentStep] = useState<string>('payment');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handlePayment = async () => {
    setIsLoading(true);
    setError(null);
    try {
      // Simulated payment processing
      await new Promise((resolve) => setTimeout(resolve, 2000));
      setCurrentStep('activation');
      toast.success('Payment processed successfully');
    } catch (err) {
      setError('Payment processing failed. Please try again.');
      toast.error('Payment processing failed');
    } finally {
      setIsLoading(false);
    }
  };

  const handleActivation = async () => {
    setIsLoading(true);
    setError(null);
    try {
      // Simulated activation process
      await new Promise((resolve) => setTimeout(resolve, 1500));
      setCurrentStep('scheduling');
      toast.success('AMC activated successfully');
    } catch (err) {
      setError('Activation failed. Please contact support.');
      toast.error('Activation failed');
    } finally {
      setIsLoading(false);
    }
  };

  const handleScheduling = async () => {
    setIsLoading(true);
    setError(null);
    try {
      // Simulated scheduling process
      await new Promise((resolve) => setTimeout(resolve, 1000));
      onComplete?.();
      navigate('/dashboard');
      toast.success('Initial service scheduled successfully');
    } catch (err) {
      setError('Scheduling failed. Please try again.');
      toast.error('Scheduling failed');
    } finally {
      setIsLoading(false);
    }
  };

  const getCurrentStepIndex = () => {
    return steps.findIndex((step) => step.id === currentStep);
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 'payment':
        return (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h3 className="text-lg font-semibold mb-4">Payment Details</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Card Number
                  </label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 bg-gray-900 rounded-lg border border-gray-700 focus:border-primary focus:ring-1 focus:ring-primary"
                    placeholder="**** **** **** ****"
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Expiry Date
                    </label>
                    <input
                      type="text"
                      className="w-full px-3 py-2 bg-gray-900 rounded-lg border border-gray-700 focus:border-primary focus:ring-1 focus:ring-primary"
                      placeholder="MM/YY"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">CVV</label>
                    <input
                      type="text"
                      className="w-full px-3 py-2 bg-gray-900 rounded-lg border border-gray-700 focus:border-primary focus:ring-1 focus:ring-primary"
                      placeholder="***"
                    />
                  </div>
                </div>
              </div>
            </div>
            <button
              onClick={handlePayment}
              className="w-full btn btn-primary"
              disabled={isLoading}
            >
              {isLoading ? 'Processing...' : 'Process Payment'}
            </button>
          </div>
        );
      case 'activation':
        return (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h3 className="text-lg font-semibold mb-4">Activate AMC</h3>
              <p className="text-gray-400 mb-4">
                Your payment has been processed. Click below to activate your AMC
                package and start enjoying the benefits.
              </p>
              <div className="space-y-4">
                <div className="flex items-center space-x-2 text-green-500">
                  <CheckCircle size={16} />
                  <span>Payment Verified</span>
                </div>
                <div className="flex items-center space-x-2 text-green-500">
                  <Shield size={16} />
                  <span>Package Ready</span>
                </div>
              </div>
            </div>
            <button
              onClick={handleActivation}
              className="w-full btn btn-primary"
              disabled={isLoading}
            >
              {isLoading ? 'Activating...' : 'Activate AMC'}
            </button>
          </div>
        );
      case 'scheduling':
        return (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h3 className="text-lg font-semibold mb-4">Schedule Initial Service</h3>
              <p className="text-gray-400 mb-4">
                Your AMC is now active. Let's schedule your first maintenance service.
              </p>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Preferred Date
                  </label>
                  <input
                    type="date"
                    className="w-full px-3 py-2 bg-gray-900 rounded-lg border border-gray-700 focus:border-primary focus:ring-1 focus:ring-primary"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Preferred Time
                  </label>
                  <select className="w-full px-3 py-2 bg-gray-900 rounded-lg border border-gray-700 focus:border-primary focus:ring-1 focus:ring-primary">
                    <option value="morning">Morning (9 AM - 12 PM)</option>
                    <option value="afternoon">Afternoon (1 PM - 5 PM)</option>
                  </select>
                </div>
              </div>
            </div>
            <button
              onClick={handleScheduling}
              className="w-full btn btn-primary"
              disabled={isLoading}
            >
              {isLoading ? 'Scheduling...' : 'Schedule Service'}
            </button>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="max-w-2xl mx-auto" {...props}>
      <div className="mb-8">
        <div className="flex justify-between items-center mb-8">
          {steps.map((step, index) => (
            <React.Fragment key={step.id}>
              <div className="flex items-center">
                <motion.div
                  className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    getCurrentStepIndex() >= index
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-gray-700 text-gray-400'
                  }`}
                  animate={{
                    scale: getCurrentStepIndex() === index ? 1.1 : 1,
                  }}
                >
                  {getCurrentStepIndex() > index ? (
                    <CheckCircle size={16} />
                  ) : (
                    index + 1
                  )}
                </motion.div>
                <div className="ml-3">
                  <div className="text-sm font-medium">{step.title}</div>
                  <div className="text-xs text-gray-400">{step.description}</div>
                </div>
              </div>
              {index < steps.length - 1 && (
                <div className="flex-1 h-px bg-gray-700 mx-4 my-4" />
              )}
            </React.Fragment>
          ))}
        </div>
      </div>
      {error && (
        <div className="mb-6 p-4 bg-red-500/10 border border-red-500/20 rounded-lg flex items-center space-x-2 text-red-400">
          <AlertTriangle size={16} />
          <span>{error}</span>
        </div>
      )}
      {renderStepContent()}
    </div>
  );
};

AMCSubscriptionFlow.displayName = 'AMCSubscriptionFlow';

export { AMCSubscriptionFlow, SubscriptionStep, AMCSubscriptionFlowProps };
undefined.displayName = 'undefined';