import { format } from 'date-fns';
import { Download, Loader2, X } from 'lucide-react';
import { type FC, type HTMLAttributes, useCallback } from 'react';

import { type ServiceVisit } from '../types';

interface ServiceHistoryModalProps extends HTMLAttributes<HTMLDivElement> {
  isOpen: boolean;
  onClose: () => void;
  visits: ServiceVisit[];
  loading?: boolean;
};


ServiceHistoryModal.displayName = 'ServiceHistoryModal';
/**
 * ServiceHistoryModal component for the iAircon Easy Booking system
 *
 * @component ServiceHistoryModal
 * @description Displays service history in a modal with export functionality
 */
const ServiceHistoryModal: FC<ServiceHistoryModalProps> = ({
  isOpen,
  onClose,
  visits,
  loading = false
}) => {
  const handleExport = useCallback(() => {
    if (typeof window === 'undefined' || !window.document) {
      return;
    }

    const data = visits.map((visit) => ({
      date: format(new Date(visit.date), 'PPP'),
      service: visit.label,
      status: visit.status,
      technician: visit.technician || 'N/A',
      notes: visit.notes || 'N/A'
    }));

    const csv = [
      Object.keys(data[0]).join(','),
      ...data.map((row) => Object.values(row).join(','))
    ].join('\n');

    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const link = window.document.createElement('a');
    link.style.display = 'none';
    link.href = url;
    link.download = 'service-history.csv';
    window.document.body.appendChild(link);
    link.click();
    window.document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  }, [visits]);

  if (!isOpen) {
    return null;
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-gray-900/75">
      <div className="mx-4 w-full max-w-4xl rounded-lg border border-gray-700 bg-gray-800 p-6">
        <div className="mb-6 flex items-center justify-between">
          <h2 className="text-xl font-semibold">Service History</h2>
          <div className="flex items-center space-x-2">
            <button
              type="button"
              onClick={handleExport}
              className="rounded p-2 hover:bg-gray-700"
              aria-label="Export service history"
            >
              <Download className="h-5 w-5" />
            </button>
            <button
              type="button"
              onClick={onClose}
              className="rounded p-2 hover:bg-gray-700"
              aria-label="Close modal"
            >
              <X className="h-5 w-5" />
            </button>
          </div>
        </div>
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
          </div>
        ) : (
          <div className="max-h-[60vh] space-y-4 overflow-y-auto">
            {visits.map((visit) => (
              <div key={visit.id} className="rounded-lg bg-gray-700 p-4">
                <div className="flex items-start justify-between">
                  <div>
                    <h3 className="font-medium">{visit.label}</h3>
                    <p className="text-sm text-gray-400">
                      {format(new Date(visit.date), 'PPP')}
                    </p>
                    {visit.technician && (
                      <p className="mt-1 text-sm text-gray-400">
                        Technician: {visit.technician}
                      </p>
                    )}
                  </div>
                  <span
                    className={`rounded-full px-2 py-1 text-sm ${
                      visit.status === 'completed'
                        ? 'bg-green-500/10 text-green-400'
                        : visit.status === 'scheduled'
                        ? 'bg-blue-500/10 text-blue-400'
                        : 'bg-red-500/10 text-red-400'
                    }`}
                  >
                    {visit.status.charAt(0).toUpperCase() + visit.status.slice(1)}
                  </span>
                </div>
                {visit.notes && (
                  <p className="mt-2 rounded bg-gray-600/50 p-2 text-sm text-gray-300">
                    {visit.notes}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};
export { ServiceHistoryModalProps, ServiceHistoryModal };
