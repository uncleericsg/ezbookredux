import React from 'react';

"use client";
import {
  Box,
  Typography,
  IconButton,
  Badge,
  Popover,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Button,
  Divider
} from '@mui/material';
import { 
  BellIcon,
  CalendarIcon,
  CheckCircleIcon,
  ExclamationCircleIcon
} from '@heroicons/react/24/outline';

import { useNotifications } from '@/hooks/useNotifications';

import { formatDistanceToNow } from 'date-fns';

interface NotificationsPanelProps extends React.HTMLAttributes<HTMLDivElement> {};


NotificationsPanel.displayName = 'NotificationsPanel';
interface Notification {
  id: string;
  title: string;
  message: string;
  createdAt: Date;
  read: boolean;
  actionUrl?: string;
  type: string;
}

interface Notifications {
  notifications: Notification[];
  unreadCount: number;
  markAsRead: (id: string) => void;
}

const NotificationsPanel: React.FC<NotificationsPanelProps> = () => {
  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);
  const { notifications, unreadCount, markAsRead } = useNotifications();

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleNotificationClick = (notification: Notification) => {
    if (notification.actionUrl) {
      window.location.href = notification.actionUrl;
    }
    markAsRead(notification.id);
    handleClose();
  };

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'booking_confirmed':
        return <CheckCircleIcon className="h-6 w-6 text-green-500" />;
      case 'booking_cancelled':
        return <ExclamationCircleIcon className="h-6 w-6 text-red-500" />;
      default:
        return <BellIcon className="h-6 w-6 text-gray-500" />;
    }
  };

  const open = Boolean(anchorEl);
  const id = open ? 'notifications-popover' : undefined;

  return (
    <>
      <IconButton
        aria-describedby={id}
        onClick={handleClick}
        className="relative"
      >
        <Badge badgeContent={unreadCount} color="error">
          <BellIcon className="h-6 w-6" />
        </Badge>
      </IconButton>
      <Popover
        id={id}
        open={open}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'center',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'center',
        }}
        className="mt-2"
      >
        <Box className="w-full max-w-md p-4">
          <Typography variant="h6" className="mb-2">
            Notifications
          </Typography>
          {notifications.length === 0 ? (
            <Typography color="textSecondary" className="p-4 text-center">
              No notifications
            </Typography>
          ) : (
            <List className="max-h-96 overflow-auto">
              {notifications.map((notification, index) => (
                <React.Fragment key={notification.id}>
                  <ListItem
                    button
                    onClick={() => handleNotificationClick(notification)}
                    className={`${!notification.read ? 'bg-blue-50' : ''}`}
                  >
                    <ListItemIcon>
                      {getNotificationIcon(notification.type)}
                    </ListItemIcon>
                    <ListItemText
                      primary={notification.title}
                      secondary={
                        <>
                          <Typography component="span" variant="body2">
                            {notification.message}
                          </Typography>
                          <Typography
                            component="span"
                            variant="caption"
                            color="textSecondary"
                            display="block"
                          >
                            {formatDistanceToNow(new Date(notification.createdAt), {
                              addSuffix: true,
                            })}
                          </Typography>
                        </>
                      }
                    />
                  </ListItem>
                  {index < notifications.length - 1 && <Divider />}
                </React.Fragment>
              ))}
            </List>
          )}
          {notifications.length > 0 && (
            <Box className="mt-2 flex justify-end">
              <Button size="small" onClick={() => window.location.href = '/notifications'}>
                View All
              </Button>
            </Box>
          )}
        </Box>
      </Popover>
    </>
  );
};



export { NotificationsPanel };