'use client';

import { Badge } from '@components/atoms/badge';
import { Button } from '@components/atoms/button';
import { Input } from '@components/atoms/input';
import { Card, CardContent, CardHeader, CardFooter } from '@components/molecules/card';
import { format, parseISO } from 'date-fns';
import { AnimatePresence, motion } from 'framer-motion';
import { Calendar, Edit, MessageSquare, Save, Trash2, X } from 'lucide-react';
import React, { useState } from 'react';
import { toast } from 'sonner';

import { useScheduledMessages } from '../../hooks/useScheduledMessages';
import type { ScheduledMessage } from '../../types';


/* eslint-disable-next-line no-console */
declare const console: Console;

interface ScheduledMessagesListProps extends React.HTMLAttributes<HTMLDivElement> {
  className?: string;
}

interface EditFormState extends Partial<ScheduledMessage> {
  id?: string;
  sendTime?: string;
  message?: string;
}

const ScheduledMessagesList: React.FC<ScheduledMessagesListProps> = ({ className, ...props }) => {
  const [editingId, setEditingId] = useState<string | null>(null);
  const [editForm, setEditForm] = useState<EditFormState>({});

  const {
    messages,
    loading,
    error,
    updateMessage,
    deleteMessage
  } = useScheduledMessages();

  const handleEdit = (message: ScheduledMessage): void => {
    setEditingId(message.id);
    setEditForm({
      id: message.id,
      sendTime: message.sendTime,
      message: message.message
    });
  };

  const handleSave = async (messageId: string): Promise<void> => {
    try {
      if (!editForm.message) {
        toast.error('Message cannot be empty');
        return;
      }

      if (!editForm.sendTime) {
        toast.error('Send time must be specified');
        return;
      }

      await updateMessage({
        id: messageId,
        sendTime: editForm.sendTime,
        message: editForm.message
      });

      setEditingId(null);
      setEditForm({});
      toast.success('Message updated successfully');
    } catch (err) {
      /* eslint-disable-next-line no-console */
      console.error('Failed to update message:', err);
      toast.error('Failed to update message');
    }
  };

  const handleDelete = async (messageId: string): Promise<void> => {
    try {
      await deleteMessage(messageId);
      toast.success('Message deleted successfully');
    } catch (err) {
      /* eslint-disable-next-line no-console */
      console.error('Failed to delete message:', err);
      toast.error('Failed to delete message');
    }
  };

  if (loading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 3 }).map((_, i) => (
          <Card key={i} className="w-full animate-pulse">
            <CardHeader className="flex flex-row items-center gap-4">
              <div className="h-12 w-12 rounded-full bg-gray-300" />
              <div className="space-y-2 flex-1">
                <div className="h-4 w-1/3 bg-gray-300" />
                <div className="h-3 w-1/4 bg-gray-300" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="h-24 w-full bg-gray-300" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <Card className="border-red-200 bg-red-50">
        <CardContent className="flex items-center gap-2 text-red-700 p-4">
          <MessageSquare className="h-5 w-5" />
          <p>Failed to load scheduled messages. Please try again later.</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className={`space-y-4 ${className || ''}`} {...props}>
      <AnimatePresence>
        {messages?.map((message) => {
          const isEditing = editingId === message.id;

          return (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              <Card>
                <CardHeader className="flex flex-row items-start gap-4">
                  <div className="rounded-full bg-primary/10 p-2">
                    <MessageSquare className="h-6 w-6 text-primary" />
                  </div>
                  <div className="flex-1 space-y-1">
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <Calendar className="h-4 w-4" />
                      <span>
                        {format(parseISO(message.sendTime), 'PPp')}
                      </span>
                    </div>
                  </div>
                  {!isEditing && (
                    <div className="flex gap-2">
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleEdit(message)}
                      >
                        <Edit className="h-4 w-4" />
                        <span className="sr-only">Edit message</span>
                      </Button>
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleDelete(message.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                        <span className="sr-only">Delete message</span>
                      </Button>
                    </div>
                  )}
                </CardHeader>
                <CardContent>
                  {isEditing ? (
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <label
                          htmlFor={`sendTime-${message.id}`}
                          className="text-sm font-medium"
                        >
                          Send Time
                        </label>
                        <Input
                          id={`sendTime-${message.id}`}
                          type="datetime-local"
                          value={editForm.sendTime}
                          onChange={(e) =>
                            setEditForm((prev) => ({
                              ...prev,
                              sendTime: e.target.value
                            }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <label
                          htmlFor={`message-${message.id}`}
                          className="text-sm font-medium"
                        >
                          Message
                        </label>
                        <textarea
                          id={`message-${message.id}`}
                          className="min-h-[100px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                          value={editForm.message}
                          onChange={(e) =>
                            setEditForm((prev) => ({
                              ...prev,
                              message: e.target.value
                            }))
                          }
                          placeholder="Enter your message..."
                        />
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-2">
                      <p className="text-sm">{message.message}</p>
                      <div className="flex items-center gap-2">
                        <Badge variant="secondary">
                          Scheduled for{' '}
                          {format(parseISO(message.sendTime), 'PPp')}
                        </Badge>
                      </div>
                    </div>
                  )}
                </CardContent>
                {isEditing && (
                  <CardFooter className="flex justify-end gap-2">
                    <Button
                      variant="ghost"
                      onClick={() => {
                        setEditingId(null);
                        setEditForm({});
                      }}
                    >
                      <X className="mr-2 h-4 w-4" />
                      Cancel
                    </Button>
                    <Button onClick={() => handleSave(message.id)}>
                      <Save className="mr-2 h-4 w-4" />
                      Save Changes
                    </Button>
                  </CardFooter>
                )}
              </Card>
            </motion.div>
          );
        })}
      </AnimatePresence>
    </div>
  );
};

export default ScheduledMessagesList;
