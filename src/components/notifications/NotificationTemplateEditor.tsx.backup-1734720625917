'use client';

import { Badge } from '@components/atoms/badge';
import { Button } from '@components/atoms/button';
import { Input } from '@components/atoms/input';
import { Spinner } from '@components/atoms/spinner';
import { Card, CardContent, CardHeader, CardFooter } from '@components/molecules/card';
import { Toast } from '@components/molecules/toast';
import { zodResolver } from '@hookform/resolvers/zod';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import DOMPurify from 'dompurify';
import { motion, AnimatePresence } from 'framer-motion';
import debounce from 'lodash/debounce';
import { Save, Eye, Copy, History, Tag } from 'lucide-react';
import React, { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { toast } from 'sonner';

import { withTemplateFeatures } from './enhancers/withTemplateFeatures';
import type { Template } from './types/templateTypes';
import {

export interface TemplateEditorProps;


  extractVariables,
  createAutosave,
  templateSchema
} from './utils/templateUtils';

const AUTOSAVE_DELAY = 3000; // 3 seconds
const MAX_VERSIONS_SHOWN = 5;

  onSave: (template: Template) => Promise<void>;
  onPreview: (content: string) => void;
  userId: string;
  className?: string;
};

NotificationTemplateEditor.displayName = 'NotificationTemplateEditor';
const NotificationTemplateEditor: React.FC<TemplateEditorProps> = ({
  template,
  onSave,
  onPreview,
  userId,
  className = '',
}) => {
  const {
    control,
    handleSubmit,
    watch,
    formState: { errors, isDirty },
    reset
  } = useForm<Template>({
    resolver: zodResolver(templateSchema),
    defaultValues: template
  });

  const queryClient = useQueryClient();
  const [showVersions, setShowVersions] = useState(false);
  const [variables, setVariables] = useState<string[]>([]);
  const [isSaving, setIsSaving] = useState(false);

  const saveMutation = useMutation({
    mutationFn: async (data: Template) => {
      const sanitizedData = {
        ...data,
        content: DOMPurify.sanitize(data.content)
      };
      return onSave(sanitizedData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries(['templates']);
      toast.success('Template saved successfully');
      setIsSaving(false);
    },
    onError: (error: Error) => {
      globalThis.console.error('Failed to save template:', error);
      toast.error('Failed to save template');
      setIsSaving(false);
    }
  });

  const handleSave = React.useCallback(async (data: Template) => {
    try {
      setIsSaving(true);
      await saveMutation.mutateAsync(data);
    } catch (error) {
      // Error is handled by mutation's onError
    }
  }, [saveMutation]);

  const debouncedAutosave = React.useCallback((data: Template) => {
    const saveData = async () => {
      try {
        await createAutosave(data, userId);
      } catch (error) {
        globalThis.console.error('Failed to autosave:', error);
      }
    };
    
    const debouncedSave = debounce(saveData, AUTOSAVE_DELAY);
    debouncedSave();
    
    // Cleanup the debounced function
    return () => {
      debouncedSave.cancel();
    };
  }, [userId]);

  const watchedContent = watch('content');

  useEffect(() => {
    if (!isDirty || !watchedContent) return;

    try {
      const newVariables = extractVariables(watchedContent);
      setVariables(newVariables);
      debouncedAutosave(watch());
    } catch (error) {
      globalThis.console.error('Failed to process template:', error);
    }

    return () => {
      debouncedAutosave.cancel();
    };
  }, [watchedContent, isDirty, debouncedAutosave, watch]);

  if (template.isLoading) {
    return (
      <Card className="w-full animate-pulse">
        <CardHeader className="flex flex-row items-center justify-between">
          <div className="space-y-2">
            <div className="h-6 w-1/3 bg-gray-200 rounded" />
            <div className="h-4 w-1/4 bg-gray-200 rounded" />
          </div>
          <div className="flex gap-2">
            <div className="h-9 w-24 bg-gray-200 rounded" />
            <div className="h-9 w-24 bg-gray-200 rounded" />
          </div>
        </CardHeader>
        <CardContent>
          <div className="h-64 w-full bg-gray-200 rounded" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={`w-full ${className}`}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <div className="space-y-1">
          <Controller
            name="name"
            control={control}
            render={({ field }) => (
              <Input
                {...field}
                placeholder="Template Name"
                className="text-lg font-semibold"
                error={!!errors.name}
              />
            )}
          />
          <Controller
            name="description"
            control={control}
            render={({ field }) => (
              <Input
                {...field}
                placeholder="Template Description"
                className="text-sm text-gray-500"
                error={!!errors.description}
              />
            )}
          />
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowVersions(true)}
            className="gap-2"
          >
            <History className="h-4 w-4" />
            Versions
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => onPreview(watchedContent)}
            className="gap-2"
          >
            <Eye className="h-4 w-4" />
            Preview
          </Button>
          <Button
            variant="default"
            size="sm"
            onClick={handleSubmit(handleSave)}
            disabled={!isDirty || isSaving}
            className="gap-2"
          >
            {isSaving ? (
              <Spinner size="sm" />
            ) : (
              <Save className="h-4 w-4" />
            )}
            Save
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <Controller
            name="content"
            control={control}
            render={({ field }) => (
              <div className="space-y-2">
                <textarea
                  {...field}
                  className="w-full min-h-[200px] p-3 rounded-md border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter your template content here..."
                />
                {errors.content && (
                  <Toast
                    variant="destructive"
                    className="mt-2"
                  >
                    {errors.content.message}
                  </Toast>
                )}
              </div>
            )}
          />
          {variables.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {variables.map((variable) => (
                <Badge key={variable} variant="secondary">
                  <Tag className="h-3 w-3 mr-1" />
                  {variable}
                </Badge>
              ))}
            </div>
          )}
        </div>
      </CardContent>
      <AnimatePresence>
        {showVersions && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
          >
            <CardFooter className="border-t">
              <div className="w-full space-y-2">
                <h4 className="text-sm font-medium">Version History</h4>
                <div className="grid gap-2">
                  {template.versions?.slice(0, MAX_VERSIONS_SHOWN).map((version) => (
                    <Button
                      key={version.id}
                      variant="ghost"
                      size="sm"
                      onClick={() => reset(version)}
                      className="justify-start gap-2"
                    >
                      <Copy className="h-4 w-4" />
                      {new Date(version.createdAt).toLocaleString()}
                    </Button>
                  ))}
                </div>
              </div>
            </CardFooter>
          </motion.div>
        )}
      </AnimatePresence>
    </Card>
  );
};

(NotificationTemplateEditor);

export { NotificationTemplateEditor, TemplateEditorProps };
undefined.displayName = 'undefined';