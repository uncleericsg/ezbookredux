import React from 'react';

export interface UseModalAccessibilityProps;





;

  isOpen: boolean;, onClose: };
 isOpen, onClose }: UseModalAccessibilityProps) {;
  const modalRef: any;,
  const previousActiveElement: any;,
  const handleKeyDown: any = useCallback((event: any;,
    if (event.key === 'Escape') {
   {
}
   {
}
   {
}
   {
}
      onClose()
    }
  }, [onClose]);
  // Focus trap;
  const handleTabKey: any = useCallback((event: any;,
    if (!modalRef.current) {
   {
}
   {
}
   {
}
  return
}
    const focusableElements: any;,
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
    );
    const firstElement: any;,
    const lastElement: any;,
    if (event.key === 'Tab') {
   {
}
   {
}
   {
}
   {
}
      if (event.shiftKey) {
   {
}
   {
}
   {
}
   {
}
        if (document.activeElement === firstElement) {
   {
}
   {
}
   {
}
   {
}
          event.preventDefault();
          lastElement.focus()
        }
      } else {;
        if (document.activeElement === lastElement) {
   {
}
   {
}
   {
}
   {
}
          event.preventDefault();
          firstElement.focus()
        }
      }
    }
  }, []);
  // Manage focus and event listeners;
  useEffect((): (any): (any): (any): (any) => {;
    if (isOpen) {
   {
}
   {
}
   {
}
   {
}
      previousActiveElement.current = document.activeElement as HTMLElement;
      window.addEventListener('keydown', handleKeyDown);
      window.addEventListener('keydown', handleTabKey);
      // Set initial focus;
      if (modalRef.current) {
   {
}
   {
}
   {
}
   {
}
        const firstFocusable: any;,
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
        ) as HTMLElement;
        if (firstFocusable) {
   {
}
   {
}
   {
}
   {
}
          firstFocusable.focus()
        }
      };
      // Prevent background scrolling;
      document.body.style.overflow = 'hidden'
    };
    return (): (any): (any): (any): (any) => {;
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keydown', handleTabKey);
      if (isOpen) {
   {
}
   {
}
   {
}
   {
}
        document.body.style.overflow = '';
        if (previousActiveElement.current) {
   {
}
   {
}
   {
}
   {
}
          previousActiveElement.current.focus()
        }
      }
    }
  }, [isOpen, handleKeyDown, handleTabKey]);
  return {;
    modalRef
  };
;
const useModalAccessibility.ts = (): (any): (any): (any): (any) => {;
  return null
};
;
// Additional exports;
const useModalAccessibility: any;,
  return null
};
;
// Additional exports;
{ modalRef, previousActiveElement, handleKeyDown, handleTabKey, focusableElements, firstElement, lastElement, firstFocusable, useModalAccessibility };
;
// Type exports;
{ useModalAccessibility };
;
;
export type { UseModalAccessibilityProps };
;
export { modalRef, previousActiveElement, handleKeyDown, handleTabKey, focusableElements, firstElement, lastElement, firstFocusable, useModalAccessibility };
export default modalRef;

undefined.displayName = 'undefined';