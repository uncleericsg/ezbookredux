'use client';

import { format } from 'date-fns';
import {
  Clock,
  MessageSquare,
  Save,
  X,
  Gift,
  AlertTriangle
} from 'lucide-react';
import React, { useState } from 'react';
import { toast } from 'sonner';

import { Alert, AlertTitle, AlertDescription } from '@/components/ui/Alert';
import { Button } from '@/components/ui/Button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle
} from '@/components/ui/Dialog';
import { Input } from '@/components/ui/Input';
import { Label } from '@/components/ui/Label';
import { Spinner } from '@/components/ui/Spinner';
import { Switch } from '@/components/ui/Switch';
import { Textarea } from '@/components/ui/Textarea';

import type { Holiday, HolidayGreeting } from '../../types';

export interface HolidayGreetingModalProps extends React.HTMLAttributes<HTMLDivElement> {
  holiday: Holiday;
  isOpen: boolean;
  onClose: () => void;
  onSave: (greeting: HolidayGreeting) => void;
  existingGreeting?: HolidayGreeting;
  onGenerateMessage?: (holiday: Holiday) => Promise<string>;
};


HolidayGreetingModal.displayName = 'HolidayGreetingModal';
const HolidayGreetingModal: React.FC<HolidayGreetingModalProps> = ({
  holiday,
  isOpen,
  onClose,
  onSave,
  existingGreeting,
  onGenerateMessage,
  ...props
}) => {
  const [message, setMessage] = useState(existingGreeting?.message || '');
  const [enabled, setEnabled] = useState(existingGreeting?.enabled ?? true);
  const [sendTime, setSendTime] = useState(
    existingGreeting?.sendTime || `${holiday.date}T09:00`
  );
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSave = () => {
    if (!message.trim()) {
      setError('Please enter a greeting message');
      return;
    }

    onSave({
      message,
      enabled,
      sendTime,
      holidayId: holiday.id,
      holidayDate: holiday.date
    });

    onClose();
  };

  const handleGenerateMessage = async () => {
    if (!onGenerateMessage) {
      setError('Message generation is not available');
      return;
    }

    try {
      setError(null);
      setIsGenerating(true);
      const generatedMessage = await onGenerateMessage(holiday);
      setMessage(generatedMessage);
      toast.success('Message generated successfully');
    } catch (err) {
      setError('Failed to generate message. Please try again.');
      // Using type assertion for better error handling
      const error = err as Error;
      // Log error details for debugging in development
      // eslint-disable-next-line no-console
      console.error('Error generating message:', error.message);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose} {...props}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Gift className="h-5 w-5" />
            {holiday.name} Greeting
          </DialogTitle>
          <DialogDescription>
            Schedule a greeting message for {format(new Date(holiday.date), 'MMMM do, yyyy')}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div className="flex items-center justify-between">
            <Label htmlFor="enabled">Enable Greeting</Label>
            <Switch
              id="enabled"
              checked={enabled}
              onCheckedChange={setEnabled}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="sendTime">Send Time</Label>
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4 text-muted-foreground" />
              <Input
                id="sendTime"
                type="time"
                value={sendTime.split('T')[1]}
                onChange={(e) => setSendTime(`${holiday.date}T${e.target.value}`)}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="message">Greeting Message</Label>
            <div className="relative">
              <Textarea
                id="message"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Enter your greeting message..."
                className="min-h-[100px]"
              />
              {onGenerateMessage && (
                <Button
                  size="sm"
                  variant="outline"
                  className="absolute bottom-2 right-2"
                  onClick={handleGenerateMessage}
                  disabled={isGenerating}
                >
                  {isGenerating ? (
                    <>
                      <Spinner className="mr-2 h-4 w-4" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <MessageSquare className="mr-2 h-4 w-4" />
                      Generate
                    </>
                  )}
                </Button>
              )}
            </div>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            <X className="mr-2 h-4 w-4" />
            Cancel
          </Button>
          <Button onClick={handleSave}>
            <Save className="mr-2 h-4 w-4" />
            Save Greeting
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};



export { HolidayGreetingModal, HolidayGreetingModalProps };