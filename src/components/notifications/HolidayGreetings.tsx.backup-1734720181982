'use client';

import { Badge } from '@components/atoms/badge';
import { Button } from '@components/atoms/button';
import { Input } from '@components/atoms/input';
import { Card, CardContent, CardHeader, CardFooter } from '@components/molecules/card';
import { format, parseISO } from 'date-fns';
import { AnimatePresence, motion } from 'framer-motion';
import {
  Edit,
  Save,
  X,
  Calendar,
  MessageSquare,
  AlertTriangle,
  Loader2,
  Gift
} from 'lucide-react';
import React, { useState } from 'react';
import { toast } from 'sonner';

import { useAcuitySettings } from '../../hooks/useAcuitySettings';
import { useHolidayGreetings } from '../../hooks/useHolidayGreetings';
import { useHolidayList } from '../../hooks/useHolidayList';
import type { HolidayGreeting, Holiday } from '../../types';


/* eslint-disable-next-line no-console */
declare const console: Console;

interface HolidayGreetingsProps extends React.HTMLAttributes<HTMLDivElement> {
  className?: string;
};


HolidayGreetings.displayName = 'HolidayGreetings';
interface EditFormState extends Partial<HolidayGreeting> {
  id?: string;
  sendTime?: string;
  message?: string;
}

const HolidayGreetings: React.FC<HolidayGreetingsProps> = ({ className, ...props }) => {
  const [editingId, setEditingId] = useState<string | null>(null);
  const [editForm, setEditForm] = useState<EditFormState>({});
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  
  const { holidays, loading } = useHolidayList();
  const { settings } = useAcuitySettings();
  const {
    holidayGreetings,
    loading: greetingsLoading,
    error: greetingsError,
    updateGreeting
  } = useHolidayGreetings({ chatGPTSettings: settings.chatGPT });

  const handleEdit = async (holiday: Holiday): Promise<void> => {
    const existingGreeting = holidayGreetings.find(
      (greeting) => greeting.id === holiday.date
    );
    setEditingId(holiday.date);
    setEditForm({
      id: holiday.date,
      sendTime: existingGreeting?.sendTime || '2024-03-08T08:00'
    });
  };

  const handleSave = async (holiday: Holiday): Promise<void> => {
    try {
      if (!editForm.message) {
        toast.error('Message cannot be empty');
        return;
      }

      if (!editForm.sendTime) {
        toast.error('Send time must be specified');
        return;
      }

      await updateGreeting({
        id: holiday.date,
        sendTime: editForm.sendTime,
        message: editForm.message
      });
      
      setEditingId(null);
      setEditForm({});
      toast.success('Holiday greeting updated successfully');
    } catch (err) {
      /* eslint-disable-next-line no-console */
      console.error('Failed to update holiday greeting:', err);
      toast.error('Failed to update holiday greeting');
    }
  };

  const handleGenerate = async (holiday: Holiday): Promise<void> => {
    try {
      setIsGenerating(true);
      const message = `Happy ${holiday.name}!`;
      setEditForm((prev) => ({ ...prev, message }));
      toast.success('Message generated successfully');
    } catch (err) {
      /* eslint-disable-next-line no-console */
      console.error('Failed to generate message:', err);
      toast.error('Failed to generate message');
    } finally {
      setIsGenerating(false);
    }
  };

  if (loading || greetingsLoading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 3 }).map((_, i) => (
          <Card key={i} className="w-full animate-pulse">
            <CardHeader className="flex flex-row items-center gap-4">
              <div className="h-12 w-12 rounded-full bg-gray-300" />
              <div className="space-y-2 flex-1">
                <div className="h-4 w-1/3 bg-gray-300" />
                <div className="h-3 w-1/4 bg-gray-300" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="h-24 w-full bg-gray-300" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (greetingsError) {
    return (
      <Card className="border-red-200 bg-red-50">
        <CardContent className="flex items-center gap-2 text-red-700 p-4">
          <AlertTriangle className="h-5 w-5" />
          <p>Failed to load holiday greetings. Please try again later.</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className={`space-y-4 ${className || ''}`} {...props}>
      <AnimatePresence>
        {holidays?.map((holiday) => {
          const greeting = holidayGreetings.find((g) => g.id === holiday.date);
          const isEditing = editingId === holiday.date;

          return (
            <motion.div
              key={holiday.date}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              <Card>
                <CardHeader className="flex flex-row items-start gap-4">
                  <div className="rounded-full bg-primary/10 p-2">
                    <Gift className="h-6 w-6 text-primary" />
                  </div>
                  <div className="flex-1 space-y-1">
                    <h3 className="font-semibold">{holiday.name}</h3>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <Calendar className="h-4 w-4" />
                      <span>{format(parseISO(holiday.date), 'PPP')}</span>
                    </div>
                  </div>
                  {!isEditing && (
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => handleEdit(holiday)}
                    >
                      <Edit className="h-4 w-4" />
                      <span className="sr-only">Edit greeting</span>
                    </Button>
                  )}
                </CardHeader>
                <CardContent>
                  {isEditing ? (
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <label
                          htmlFor={`sendTime-${holiday.date}`}
                          className="text-sm font-medium"
                        >
                          Send Time
                        </label>
                        <Input
                          id={`sendTime-${holiday.date}`}
                          type="datetime-local"
                          value={editForm.sendTime}
                          onChange={(e) =>
                            setEditForm((prev) => ({
                              ...prev,
                              sendTime: e.target.value
                            }))
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <label
                          htmlFor={`message-${holiday.date}`}
                          className="text-sm font-medium"
                        >
                          Message
                        </label>
                        <div className="relative">
                          <textarea
                            id={`message-${holiday.date}`}
                            className="min-h-[100px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                            value={editForm.message}
                            onChange={(e) =>
                              setEditForm((prev) => ({
                                ...prev,
                                message: e.target.value
                              }))
                            }
                            placeholder="Enter your holiday greeting message..."
                          />
                          <Button
                            size="sm"
                            variant="ghost"
                            className="absolute right-2 top-2"
                            onClick={() => handleGenerate(holiday)}
                            disabled={isGenerating}
                          >
                            {isGenerating ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : (
                              <MessageSquare className="h-4 w-4" />
                            )}
                            <span className="sr-only">Generate message</span>
                          </Button>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-2">
                      {greeting ? (
                        <>
                          <p className="text-sm">{greeting.message}</p>
                          <div className="flex items-center gap-2">
                            <Badge variant="secondary">
                              Scheduled for{' '}
                              {format(parseISO(greeting.sendTime), 'PPp')}
                            </Badge>
                          </div>
                        </>
                      ) : (
                        <p className="text-sm text-muted-foreground">
                          No greeting message set
                        </p>
                      )}
                    </div>
                  )}
                </CardContent>
                {isEditing && (
                  <CardFooter className="flex justify-end gap-2">
                    <Button
                      variant="ghost"
                      onClick={() => {
                        setEditingId(null);
                        setEditForm({});
                      }}
                    >
                      <X className="mr-2 h-4 w-4" />
                      Cancel
                    </Button>
                    <Button onClick={() => handleSave(holiday)}>
                      <Save className="mr-2 h-4 w-4" />
                      Save Changes
                    </Button>
                  </CardFooter>
                )}
              </Card>
            </motion.div>
          );
        })}
      </AnimatePresence>
    </div>
  );
};



export { HolidayGreetings };