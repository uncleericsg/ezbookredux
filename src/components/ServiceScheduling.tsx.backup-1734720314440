import { format } from 'date-fns';
import { motion, AnimatePresence } from 'framer-motion';
import { type FC, type HTMLAttributes, useState, useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

import { useUser } from '../contexts/UserContext';
import { useAppointments } from '../hooks/useAppointments';
import { useBookingState } from '../hooks/useBookingState';
import { useTimeSlots } from '../hooks/useTimeSlots';
import { useAcuitySettings } from '../services/acuity';
import { validateBookingDetails } from '../utils/validation';

import { ErrorBoundary } from './ErrorBoundary';
import { LoadingScreen } from './LoadingScreen';
import { ServiceSchedulingCalendar } from './ServiceSchedulingCalendar';
import { ServiceSummary } from './ServiceSummary';
import { TimeSlotPicker } from './TimeSlotPicker';
import { PaymentForm as PaymentFlow } from './payment/PaymentForm';

export type FC;
export type HTMLAttributes;
export interface BookingErrorFallbackProps;
export interface ServiceSchedulingProps;

export type FC;
export type HTMLAttributes;
export interface BookingErrorFallbackProps;
export interface ServiceSchedulingProps;

interface BookingErrorFallbackProps {
  error: string;
  onRetry: () => void;
}

const BookingErrorFallback: FC<BookingErrorFallbackProps> = ({ error, onRetry }) => (
  <div className="text-center py-8">
    <div className="bg-red-500/10 text-red-400 p-4 rounded-lg border border-red-500/20 mb-6">
      {error}
    </div>
    <button 
      type="button"
      onClick={onRetry} 
      className="btn btn-primary"
      aria-label="Try booking again"
    >
      Try Again
    </button>
  </div>
);

interface ServiceSchedulingProps extends HTMLAttributes<HTMLDivElement> {
  categoryId?: string;
  price?: number;
  isAmcService?: boolean;
}

const ServiceScheduling: FC<ServiceSchedulingProps> = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { categoryId, price, isAmcService } = location.state || {};
  const { user } = useUser();
  const [_isInitializing, _setIsInitializing] = useState(true);
  const { getAppointmentType } = useAcuitySettings();
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedTime, setSelectedTime] = useState<string>('');
  const [showPayment, setShowPayment] = useState(false);
  const { bookNewAppointment, loading: bookingLoading } = useAppointments();
  const appointmentType = categoryId ? getAppointmentType(categoryId) : null;
  const { slots, loading: slotsLoading } = useTimeSlots(selectedDate, categoryId);
  const { state: bookingState, dispatch: bookingDispatch } = useBookingState();
  const [validationErrors, setValidationErrors] = useState<string[]>([]);
  const hasNavigated = useRef(false);
  const bookingInProgressRef = useRef(false);

  useEffect(() => {
    if (!categoryId && !hasNavigated.current) {
      hasNavigated.current = true;
      toast.error('Invalid service category');
      navigate('/', { replace: true });
      return;
    }

    if (!user && !hasNavigated.current) {
      hasNavigated.current = true;
      toast.error('Please log in to book appointments');
      navigate('/login', { replace: true });
      return;
    }

    if (isAmcService && user?.amcStatus !== 'active' && !hasNavigated.current) {
      hasNavigated.current = true;
      toast.error('Your AMC package is not active');
      navigate('/amc', { replace: true });
    }
  }, [categoryId, user, isAmcService, navigate]);

  useEffect(() => {
    setSelectedTime('');
    setValidationErrors([]);
  }, [selectedDate]);

  const handleSchedule = async (): Promise<void> => {
    if (isAmcService) {
      await processBooking();
    } else {
      setShowPayment(true);
    }
  };

  const processBooking = async (): Promise<void> => {
    if (!user?.id || !selectedTime || !categoryId) return;

    bookingInProgressRef.current = true;
    bookingDispatch({ type: 'BOOKING_STARTED' });

    try {
      const validation = validateBookingDetails(user.id, selectedTime, categoryId, isAmcService);
      
      if (!validation.isValid) {
        setValidationErrors(validation.errors);
        toast.error(validation.errors[0]);
        return;
      }

      if (validation.warnings?.length) {
        validation.warnings.forEach(warning => toast.warning(warning));
      }

      const loadingToast = toast.loading('Scheduling your appointment...');
      await bookNewAppointment(selectedTime, categoryId);
      toast.dismiss(loadingToast);
      toast.success('Service scheduled successfully');
      bookingDispatch({ type: 'BOOKING_CONFIRMED' });

    } catch (error) {
      const err = error as Error;
      toast.error(err.message || 'Failed to schedule service');
      bookingDispatch({ type: 'BOOKING_FAILED' });
    } finally {
      bookingInProgressRef.current = false;
    }
  };

  if (_isInitializing) {
    return <LoadingScreen message="Preparing booking form..." />;
  }

  if (bookingState.status === 'confirmed') {
    return (
      <div className="text-center py-8">
        <h2 className="text-2xl font-bold mb-4">Booking Confirmed!</h2>
        <p className="text-gray-400 mb-4">
          Your appointment has been scheduled for {format(new Date(selectedTime), 'MMMM d, yyyy h:mm a')}
        </p>
        <button
          type="button"
          onClick={() => navigate('/dashboard')}
          className="mt-6 btn btn-primary"
          aria-label="View dashboard"
        >
          View Dashboard
        </button>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      {showPayment ? (
        <PaymentFlow
          amount={price || 0}
          serviceDetails={{
            type: appointmentType?.name,
            date: selectedDate,
            time: selectedTime
          }}
          onSuccess={processBooking}
          onCancel={() => setShowPayment(false)}
        />
      ) : (
        <motion.div
          className="max-w-4xl mx-auto space-y-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
        >
          <p className="text-gray-400">
            {price && !isAmcService && (
              <span>Service fee: ${price}</span>
            )}
            {isAmcService && (
              <span className="text-blue-400">AMC Service Visit</span>
            )}
          </p>
          <AnimatePresence mode="wait">
            <motion.div
              className="grid grid-cols-1 md:grid-cols-2 gap-6"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <div className="space-y-6">
                {validationErrors.length > 0 && (
                  <div className="bg-red-500/10 text-red-400 p-4 rounded-lg border border-red-500/20">
                    {validationErrors[0]}
                  </div>
                )}
                <ServiceSchedulingCalendar
                  selectedDate={selectedDate}
                  onDateSelect={setSelectedDate}
                  loading={slotsLoading}
                  slots={slots}
                />
                {selectedDate && (
                  <TimeSlotPicker
                    slots={slots}
                    selectedTime={selectedTime}
                    onTimeSelect={setSelectedTime}
                    loading={slotsLoading}
                  />
                )}
              </div>
              <div>
                <ServiceSummary
                  appointmentType={appointmentType}
                  selectedDate={selectedDate}
                  selectedTime={selectedTime}
                  price={price}
                  isAmcService={isAmcService}
                  onSchedule={handleSchedule}
                  loading={bookingLoading}
                />
              </div>
            </motion.div>
          </AnimatePresence>
        </motion.div>
      )}
    </ErrorBoundary>
  );
};

type { ServiceSchedulingProps, BookingErrorFallbackProps };
export { ServiceSchedulingProps, BookingErrorFallbackProps, BookingErrorFallback };
