"use client";

import { AlertTriangle, CheckCircle, RefreshCw, Trash2 } from 'lucide-react';
import React, { useState, useEffect } from 'react';

import { DEV_TOOLS, PERFORMANCE_THRESHOLDS } from '@/config/cacheConfig';
import { cn } from '@/lib/utils';
import { monitor, inspectCache } from '@/utils/cacheUtils';

export interface CacheMetrics;
export interface CacheInspection;
export interface CacheInspectorProps;

export interface CacheMetrics;
export interface CacheInspection;
export interface CacheInspectorProps;

export interface CacheMetrics;
export interface CacheInspection;
export interface CacheInspectorProps;

interface CacheMetrics {
  hitRate: number;
  missRate: number;
  size: number;
  lastUpdated: string;
}

interface CacheInspection {
  staleEntries: number;
  largeEntries: number;
  totalSize: number;
  oldestEntry: string;
}

export interface CacheInspectorProps extends React.HTMLAttributes<HTMLDivElement> {
  cache: Map<string, unknown>;
  onClearCache?: () => void;
}

export const CacheInspector: React.FC<CacheInspectorProps> = ({
  cache,
  onClearCache,
  className,
  ...props
}) => {
  const [metrics, setMetrics] = useState<CacheMetrics>(monitor.getMetrics());
  const [inspection, setInspection] = useState<CacheInspection>(inspectCache(cache));
  const [expanded, setExpanded] = useState(false);

  useEffect(() => {
    if (!DEV_TOOLS.enabled) {
      return;
    }

    const updateMetrics = () => {
      setMetrics(monitor.getMetrics());
      setInspection(inspectCache(cache));
    };

    const interval = window.setInterval(updateMetrics, DEV_TOOLS.refreshInterval);
    return () => window.clearInterval(interval);
  }, [cache]);

  if (!DEV_TOOLS.enabled) {
    return null;
  }

  const getHealthStatus = () => {
    if (metrics.hitRate < PERFORMANCE_THRESHOLDS.hitRate) {
      return 'warning';
    }
    if (inspection.staleEntries > PERFORMANCE_THRESHOLDS.staleEntries) {
      return 'warning';
    }
    if (inspection.totalSize > PERFORMANCE_THRESHOLDS.totalSize) {
      return 'warning';
    }
    return 'healthy';
  };

  const healthStatus = getHealthStatus();

  return (
    <div
      className={cn(
        'rounded-lg border bg-white p-4 shadow-sm dark:bg-gray-800',
        className
      )}
      {...props}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          {healthStatus === 'healthy' ? (
            <CheckCircle className="h-5 w-5 text-green-500" />
          ) : (
            <AlertTriangle className="h-5 w-5 text-yellow-500" />
          )}
          <h3 className="text-sm font-medium">Cache Health Monitor</h3>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setExpanded(!expanded)}
            className="rounded p-1 hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <RefreshCw className="h-4 w-4" />
          </button>
          {onClearCache && (
            <button
              onClick={onClearCache}
              className="rounded p-1 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              <Trash2 className="h-4 w-4" />
            </button>
          )}
        </div>
      </div>

      {expanded && (
        <div className="mt-4 space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-1">
              <p className="text-xs text-gray-500 dark:text-gray-400">Hit Rate</p>
              <p className="text-sm font-medium">{metrics.hitRate.toFixed(2)}%</p>
            </div>
            <div className="space-y-1">
              <p className="text-xs text-gray-500 dark:text-gray-400">Miss Rate</p>
              <p className="text-sm font-medium">{metrics.missRate.toFixed(2)}%</p>
            </div>
            <div className="space-y-1">
              <p className="text-xs text-gray-500 dark:text-gray-400">Cache Size</p>
              <p className="text-sm font-medium">{inspection.totalSize} entries</p>
            </div>
            <div className="space-y-1">
              <p className="text-xs text-gray-500 dark:text-gray-400">Stale Entries</p>
              <p className="text-sm font-medium">{inspection.staleEntries}</p>
            </div>
          </div>

          <div className="space-y-1">
            <p className="text-xs text-gray-500 dark:text-gray-400">Last Updated</p>
            <p className="text-sm font-medium">{metrics.lastUpdated}</p>
          </div>
        </div>
      )}
    </div>
  );
};
