import React, { createContext, useContext, useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { toast } from 'sonner';

import { RootState } from '../store';
import { setUser as setReduxUser, clearUser } from '../store/slices/userSlice';

export interface Booking;

export type UserRole;

export interface User;

export interface UserContextType;

export interface UserProviderProps;


  serviceType: string;
  date: string;
  time: string;
  status: string;
  amount: number;
  paymentMethod: string;
  address: string;
}

;

  email: string;
  role?: UserRole;
  firstName?: string;
  lastName?: string;
  phone?: string;
  address?: string;
  amcStatus?: string;
  unitNumber?: string;
  createdAt?: string;
  updatedAt?: string;
  bookings?: Booking[];
  // Technician specific fields
  teamId?: string;
  specializations?: string[];
  availability?: {
    status: 'available' | 'busy' | 'offline';
    lastUpdated: string;
  };
}

  loading: boolean;
  isAuthenticated: boolean;
  login: (userData: User) => Promise<boolean>;
  logout: () => void;
}

}

const UserContext = createContext<UserContextType | undefined>(undefined);

export const UserProvider: React.FC<UserProviderProps> = ({ children }) => {
  const dispatch = useDispatch();
  const reduxUser = useSelector((state: RootState) => state.user.currentUser);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const initializeUser = () => {
      try {
        const storedUser = window.localStorage.getItem('user');
        if (storedUser) {
          const parsedUser = JSON.parse(storedUser);
          dispatch(setReduxUser(parsedUser));
        }
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error('Error initializing user:', error);
      } finally {
        setLoading(false);
      }
    };

    if (!reduxUser) {
      initializeUser();
    } else {
      setLoading(false);
    }
  }, [dispatch, reduxUser]);

  const login = async (userData: User): Promise<boolean> => {
    try {
      dispatch(setReduxUser(userData));
      window.localStorage.setItem('user', JSON.stringify(userData));
      toast.success('Login successful');
      return true;
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('Login error:', error);
      toast.error('Login failed');
      return false;
    }
  };

  const logout = () => {
    dispatch(clearUser());
    window.localStorage.removeItem('user');
    toast.success('Logged out successfully');
  };

  const value: UserContextType = {
    user: reduxUser,
    loading,
    isAuthenticated: !!reduxUser,
    login,
    logout,
  };

  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
};

export const useUser = (): UserContextType => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
};

export type { User, UserRole, Booking, UserContextType };
export default UserContext;

undefined.displayName = 'undefined';