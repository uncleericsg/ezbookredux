import React, {
  createContext,
  useContext,
  useReducer,
  useState,
  useCallback,
  useEffect
} from 'react';

import { authenticateUser } from '../services/auth';

import { useBasicUser } from './BasicUserContext';

export interface Booking;
export interface User;
export type UserAction;
export interface CombinedUserContextType;
export interface CombinedUserProviderProps;

export interface Booking;
export interface User;
export type UserAction;
export interface CombinedUserContextType;
export interface CombinedUserProviderProps;

export interface Booking;
export interface User;
export type UserAction;
export interface CombinedUserContextType;
export interface CombinedUserProviderProps;

export interface Booking { {
  id: string;
  serviceType: string;
  date: string;
  time: string;
  status: string;
  amount: number;
  paymentMethod: string;
  address: string;
}

export interface User { {
  id: string;
  email: string;
  role: 'admin' | 'amc' | 'regular';
  amcStatus?: 'active' | 'inactive';
  firstName: string;
  lastName: string;
  phone: string;
}

type UserAction =
  | { type: 'SET_USER'; payload;
  | { type;
  | { type: 'ADD_BOOKING'; payload;
  | { type: 'UPDATE_USER'; payload: Partial<User> };

export interface CombinedUserContextType { {
  // Basic auth features
  user: User | null;
  loading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<boolean>;
  logout: () => Promise<void>;
  // Advanced features
  isAuthenticated: boolean;
  userDispatch: React.Dispatch<UserAction>;
  bookings: Booking[];
}

const userReducer = (state: User | null, action: UserAction): User | null => {
  switch (action.type) {
    case 'SET_USER':
      return action.payload;
    case 'CLEAR_USER':
      return null;
    case 'UPDATE_USER':
      return state ? { ...state, ...action.payload } : null;
    default:
      return state;
  }
};

const defaultContextValue: CombinedUserContextType = {
  user;
  logout: async () => {},
  userDispatch: () => {},
  bookings;
};

const CombinedUserContext = createContext<CombinedUserContextType>(defaultContextValue);

export interface CombinedUserProviderProps { {
  children: React.ReactNode;
}

export const CombinedUserProvider: React.FC<CombinedUserProviderProps> = ({ children }) => {
  const basicUser = useBasicUser();
  const [user, userDispatch] = useReducer(userReducer, null);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        setLoading(true);
        const storedUser = localStorage.getItem('userData');
        if (storedUser) {
          const userData = JSON.parse(storedUser);
          userDispatch({ type: 'SET_USER', payload: userData });
        }
      } catch (err) {
        console.error('Error checking auth:', err);
        setError(err instanceof Error ? err.message : 'An error occurred');
      } finally {
        setLoading(false);
      }
    };
    checkAuth();
  }, []);

  const login = async (email: string, password: string): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);
      const userData = await authenticateUser(email, password);
      userDispatch({ type: 'SET_USER', payload: userData });
      localStorage.setItem('userData', JSON.stringify(userData));
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Login failed');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const logout = async (): Promise<void> => {
    try {
      setLoading(true);
      setError(null);
      localStorage.removeItem('userData');
      userDispatch({ type: 'CLEAR_USER' });
      setBookings([]);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Logout failed');
    } finally {
      setLoading(false);
    }
  };

  const contextValue: CombinedUserContextType = {
    user,
    loading,
    error,
    login,
    logout,
    isAuthenticated;
  };

  return (
    <CombinedUserContext.Provider value={contextValue}>{children}</CombinedUserContext.Provider>
  );
};

export const useCombinedUser = (): CombinedUserContextType => {
  const context = useContext(CombinedUserContext);
  if (!context) {
    throw new Error('useCombinedUser must be used within a CombinedUserProvider');
  }
  return context;
};

export default CombinedUserContext;
