import { createClient } from '@supabase/supabase-js';

import type { Database } from '../types/supabase';

export interface DatabaseError;


const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

/**
 * Helper function to handle database errors
 * @param error Error object from Supabase
 * @throws Error with formatted message
 */
function handleDatabaseError(error: DatabaseError): never {
  const message = error?.message || 'Unknown database error';
  const code = error?.code || 'UNKNOWN';
  throw new Error(`Database error (${code}): ${message}`);
}

/**
 * Helper function to check if a database operation was successful
 * @param result Result from Supabase operation
 * @param errorMessage Custom error message
 * @returns The data if successful
 * @throws Error if operation failed
 */
export function validateDatabaseResult<T>(
  result: { data: T | null; error: DatabaseError | null },
  errorMessage?: string
): T {
  if (result.error) {
    handleDatabaseError(result.error);
  }
  if (!result.data) {
    throw new Error(errorMessage || 'No data returned from database');
  }
  return result.data;
}

/**
 * Helper function to safely execute database operations with retries
 * @param operation Database operation to execute
 * @param retries Number of retries
 * @returns Result of operation
 */
export async function executeDatabaseOperation<T>(
  operation: () => Promise<T>,
  retries = 3
): Promise<T> {
  let lastError: Error | null = null;
  
  for (let i = 0; i < retries; i++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error instanceof Error ? error : new Error('Unknown error');
      if (i === retries - 1) break;
      // Use window.setTimeout to avoid ESLint no-undef error
      await new Promise(resolve => window.setTimeout(resolve, Math.pow(2, i) * 1000));
    }
  }
  
  throw lastError;
}

/**
 * Helper function to begin a database transaction
 * @returns Transaction client
 */
export async function beginTransaction(): Promise<void> {
  await supabase.rpc('begin_transaction');
}

/**
 * Helper function to commit a database transaction
 */
export async function commitTransaction(): Promise<void> {
  await supabase.rpc('commit_transaction');
}

/**
 * Helper function to rollback a database transaction
 */
export async function rollbackTransaction(): Promise<void> {
  await supabase.rpc('rollback_transaction');
}

undefined.displayName = 'undefined';