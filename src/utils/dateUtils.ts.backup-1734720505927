import {
  addDays,
  addHours,
  differenceInHours,
  differenceInMinutes,
  isBefore,
  startOfDay
} from 'date-fns';

import { BUSINESS_RULES } from '../constants/businessRules';

export interface TimeRemaining;





/**
 * Time remaining until a date
 */

  /** Time unit */
  unit: 'minute' | 'hour' | 'day';
  /** Whether the time is in the past */
  isPast: boolean;
}

/**
 * Check if a date is at least 24 hours in the future
 * @param date The date to check
 * @returns Whether the date is at least 24 hours in the future
 */
export function isAtLeast24HoursAhead(date: Date | string): boolean {
  const targetDate = new Date(date);
  const now = new Date();
  const hoursDiff = differenceInHours(targetDate, now);
  return hoursDiff >= 24;
}

/**
 * Calculate the time remaining until a date
 * @param date The target date
 * @returns Time remaining information
 */
export function calculateTimeRemaining(date: Date | string): TimeRemaining {
  const targetDate = new Date(date);
  const now = new Date();
  const isPast = isBefore(targetDate, now);

  const minutesDiff = Math.abs(differenceInMinutes(targetDate, now));
  const hoursDiff = Math.abs(differenceInHours(targetDate, now));
  const daysDiff = Math.floor(hoursDiff / 24);

  if (daysDiff > 0) {
    return {
      value: daysDiff,
      unit: 'day',
      isPast
    };
  }

  if (hoursDiff > 0) {
    return {
      value: hoursDiff,
      unit: 'hour',
      isPast
    };
  }

  return {
    value: minutesDiff,
    unit: 'minute',
    isPast
  };
}

/**
 * Format remaining time until a date in a human-readable format
 * @param date The target date
 * @returns Human-readable time remaining
 */
export function formatTimeRemaining(date: Date | string): string {
  const { value, unit, isPast } = calculateTimeRemaining(date);
  const prefix = isPast ? 'Expired ' : '';
  const suffix = value === 1 ? '' : 's';

  return `${prefix}${value} ${unit}${suffix} ${isPast ? 'ago' : 'remaining'}`;
}

/**
 * Check if a booking can be rescheduled based on its scheduled time
 * @param scheduledDateTime The scheduled date and time of the booking
 * @returns Whether the booking can be rescheduled
 */
export function canReschedule(scheduledDateTime: Date | string): boolean {
  const scheduled = new Date(scheduledDateTime);
  const now = new Date();
  const hoursDiff = differenceInHours(scheduled, now);

  return hoursDiff >= BUSINESS_RULES.MIN_RESCHEDULE_HOURS;
}

/**
 * Get the earliest possible reschedule date
 * @returns The earliest possible reschedule date
 */
export function getEarliestRescheduleDate(): Date {
  const now = new Date();
  return addHours(now, BUSINESS_RULES.MIN_RESCHEDULE_HOURS);
}

/**
 * Get the latest possible booking date
 * @returns The latest possible booking date
 */
export function getLatestBookingDate(): Date {
  const now = new Date();
  return addDays(now, BUSINESS_RULES.MAX_ADVANCE_DAYS);
}

/**
 * Check if a date falls within business hours
 * @param date The date to check
 * @returns Whether the date is within business hours
 */
export function isWithinBusinessHours(date: Date | string): boolean {
  const targetDate = new Date(date);
  const hour = targetDate.getHours();

  if (hour < BUSINESS_RULES.BUSINESS_HOURS_START || hour >= BUSINESS_RULES.BUSINESS_HOURS_END) {
    return false;
  }

  // Check if it's a weekend
  const day = targetDate.getDay();
  if (day === 0 || day === 6) {
    return false;
  }

  // Check if it's a holiday
  // This is a placeholder - implement holiday checking based on your requirements
  const isHoliday = false;

  return !isHoliday;
}

/**
 * Get the next available business day
 * @param date The starting date
 * @returns The next available business day
 */
export function getNextBusinessDay(date: Date = new Date()): Date {
  let nextDay = startOfDay(addDays(date, 1));

  while (!isWithinBusinessHours(nextDay)) {
    nextDay = addDays(nextDay, 1);
  }

  return nextDay;
}

/**
 * Format a date range in a human-readable format
 * @param startDate The start date
 * @param endDate The end date
 * @returns Formatted date range string
 */
export function formatDateRange(startDate: Date, endDate: Date): string {
  const startMonth = startDate.toLocaleString('default', { month: 'short' });
  const endMonth = endDate.toLocaleString('default', { month: 'short' });
  const startDay = startDate.getDate();
  const endDay = endDate.getDate();
  const startYear = startDate.getFullYear();
  const endYear = endDate.getFullYear();

  if (startYear !== endYear) {
    return `${startMonth} ${startDay}, ${startYear} - ${endMonth} ${endDay}, ${endYear}`;
  }

  if (startMonth !== endMonth) {
    return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${startYear}`;
  }

  return `${startMonth} ${startDay}-${endDay}, ${startYear}`;
}

export type { TimeRemaining };

undefined.displayName = 'undefined';