import { addDays, isBefore, startOfDay } from 'date-fns';
import { toast } from 'sonner';

import { validateBookingTime } from './validation';

import type { BookingValidation, TimeSlot } from '../types';

export interface BookingOptions;


/**
 * Options for booking validation
 */

  /** Show toast notifications for validation results */
  showToasts?: boolean;
  /** Number of existing bookings for the day */
  existingBookings?: number;
  /** Maximum number of bookings allowed per day */
  maxBookingsPerDay?: number;
  /** Minimum hours required in advance for booking */
  minAdvanceHours?: number;
  /** Maximum days allowed in advance for booking */
  maxAdvanceDays?: number;
}

/**
 * Validates a time slot for booking
 * @param slot Time slot to validate
 * @param options Booking validation options
 * @returns Booking validation result
 */
export function validateTimeSlot(
  slot: TimeSlot,
  options: BookingOptions = {}
): BookingValidation {
  const {
    allowSameDay = true,
    showToasts = true,
    existingBookings = 0,
    maxBookingsPerDay = 10,
    minAdvanceHours = 2,
    maxAdvanceDays = 30
  } = options;

  // Check if slot has valid start and end times
  if (!slot.startTime || !slot.endTime) {
    const error = 'Invalid time slot: Missing start or end time';
    if (showToasts) toast.error(error);
    return { isValid: false, error };
  }

  // Convert to Date objects if strings
  const startTime = new Date(slot.startTime);
  const endTime = new Date(slot.endTime);

  // Check if dates are valid
  if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
    const error = 'Invalid time slot: Invalid date format';
    if (showToasts) toast.error(error);
    return { isValid: false, error };
  }

  // Check if end time is after start time
  if (!isBefore(startTime, endTime)) {
    const error = 'Invalid time slot: End time must be after start time';
    if (showToasts) toast.error(error);
    return { isValid: false, error };
  }

  // Check if booking is for today and same-day bookings are not allowed
  const today = startOfDay(new Date());
  if (!allowSameDay && isBefore(startTime, addDays(today, 1))) {
    const error = 'Same-day bookings are not allowed';
    if (showToasts) toast.error(error);
    return { isValid: false, error };
  }

  // Check if booking is too far in advance
  const maxDate = addDays(today, maxAdvanceDays);
  if (isBefore(maxDate, startTime)) {
    const error = `Bookings can only be made up to ${maxAdvanceDays} days in advance`;
    if (showToasts) toast.error(error);
    return { isValid: false, error };
  }

  // Check if there are too many bookings for the day
  if (existingBookings >= maxBookingsPerDay) {
    const error = `Maximum bookings per day (${maxBookingsPerDay}) exceeded`;
    if (showToasts) toast.error(error);
    return { isValid: false, error };
  }

  // Validate booking time using validation service
  const timeValidation = validateBookingTime(startTime, minAdvanceHours);
  if (!timeValidation.isValid) {
    if (showToasts) toast.error(timeValidation.error);
    return timeValidation;
  }

  return { isValid: true };
}

/**
 * Validates an appointment time
 * @param appointmentTime Time to validate
 * @param options Booking validation options
 * @returns Booking validation result
 */
export function validateAppointmentTime(
  appointmentTime: Date | null,
  options: BookingOptions = {}
): BookingValidation {
  if (!appointmentTime) {
    const error = 'Appointment time is required';
    if (options.showToasts) toast.error(error);
    return { isValid: false, error };
  }

  // Create a time slot from the appointment time
  // End time is set to 1 hour after start time by default
  const timeSlot: TimeSlot = {
    startTime: appointmentTime,
    endTime: new Date(appointmentTime.getTime() + 60 * 60 * 1000)
  };

  return validateTimeSlot(timeSlot, options);
}

undefined.displayName = 'undefined';