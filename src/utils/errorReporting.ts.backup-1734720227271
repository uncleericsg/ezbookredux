export interface ErrorInfo;
export interface ErrorReport;

/**
 * Information about where an error occurred
 */
export interface ErrorInfo {
  /** React component stack trace */
  componentStack: string;
}

/**
 * Complete error report information
 */
export interface ErrorReport {
  /** The error that occurred */
  error: Error;
  /** Additional error context */
  errorInfo: ErrorInfo;
  /** When the error occurred */
  timestamp: string;
  /** Component where the error occurred */
  componentName?: string;
  /** Browser user agent */
  userAgent: string;
  /** Application environment */
  environment: string;
}

/**
 * Service for collecting and managing error reports
 */
class ErrorReportingService {
  private static instance: ErrorReportingService;
  private errorLog: ErrorReport[] = [];
  private readonly MAX_LOG_SIZE = 100;
  private readonly environment: string;

  private constructor() {
    this.environment = typeof window !== 'undefined' && window.__NEXT_DATA__?.env?.NODE_ENV || 'development';
  }

  /**
   * Get the singleton instance of ErrorReportingService
   */
  public static getInstance(): ErrorReportingService {
    if (!ErrorReportingService.instance) {
      ErrorReportingService.instance = new ErrorReportingService();
    }
    return ErrorReportingService.instance;
  }

  /**
   * Log an error report
   * @param error Error object
   * @param errorInfo Additional error context
   * @param componentName Optional component name
   */
  public logError(error: Error, errorInfo: ErrorInfo, componentName?: string): void {
    const errorReport: ErrorReport = {
      error,
      errorInfo,
      timestamp: new Date().toISOString(),
      componentName,
      userAgent: window.navigator.userAgent,
      environment: this.environment
    };

    this.errorLog.unshift(errorReport);

    if (this.errorLog.length > this.MAX_LOG_SIZE) {
      this.errorLog.pop();
    }

    // Send to error tracking service if in production
    if (this.environment === 'production') {
      this.sendToErrorTrackingService(errorReport);
    }

    // Log to console in development
    if (this.environment === 'development') {
      console.error('Error Report:', errorReport);
    }
  }

  /**
   * Get all error reports
   */
  public getErrorLog(): ErrorReport[] {
    return [...this.errorLog];
  }

  /**
   * Clear all error reports
   */
  public clearErrorLog(): void {
    this.errorLog = [];
  }

  /**
   * Send error report to external error tracking service
   * @param errorReport Error report to send
   */
  private sendToErrorTrackingService(errorReport: ErrorReport): void {
    // TODO: Implement error tracking service integration
    // This is a placeholder for integrating with services like Sentry, LogRocket, etc.
    console.warn('Error tracking service not implemented:', errorReport);
  }
}

export const errorReportingService = ErrorReportingService.getInstance();
export type { ErrorReport, ErrorInfo };
