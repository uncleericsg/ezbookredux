import { useState, useEffect } from 'react';

import { getAnalytics } from '../services/admin';

interface BookingData {
  month: string;
  count: number;
}

interface SatisfactionData {
  rating: number;
  count: number;
}

interface Metrics {
  activeAMCs: number;
  completedServices: number;
  averageRating: number;
}

interface AnalyticsData {
  bookings: BookingData[];
  satisfaction: SatisfactionData[];
  metrics?: Metrics;
}

interface UseAnalyticsReturn {
  data: AnalyticsData;
  loading: boolean;
  error: string | null;
  refreshAnalytics: () => Promise<void>;
}

export function useAnalytics(): UseAnalyticsReturn {
  const [data, setData] = useState<AnalyticsData>({
    bookings: [],
    satisfaction: [],
    metrics: {
      activeAMCs: 0,
      completedServices: 0,
      averageRating: 0
    }
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadAnalytics = async () => {
    try {
      setLoading(true);
      setError(null);
      const analyticsData = await getAnalytics();
      setData(analyticsData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load analytics');
      console.error('Error loading analytics:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadAnalytics();
  }, []);

  const refreshAnalytics = async () => {
    try {
      setLoading(true);
      setError(null);
      const analyticsData = await getAnalytics();
      setData(analyticsData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to refresh analytics');
      console.error('Error refreshing analytics:', err);
    } finally {
      setLoading(false);
    }
  };

  return {
    data,
    loading,
    error,
    refreshAnalytics
  };
}