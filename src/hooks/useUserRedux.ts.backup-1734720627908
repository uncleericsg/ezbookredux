import { useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

import { authenticateUser, sessionService } from '../services/auth';
import { useAppDispatch, useAppSelector } from '../store';
import { setAuthenticated, setToken, resetAuth } from '../store/slices/authSlice';
import {
  setUser,
  setLoading,
  setError,
  updateUserProfile,
  clearUser
} from '../store/slices/userSlice';

import type { User, Booking } from '../types/user';

const RESET_STORE = 'RESET_STORE';

/**
 * Hook to handle user state management with Redux
 * This replaces the useUser hook from UserContext
 */
const useUserRedux = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();

  // Select state from Redux store;
  const loading = useAppSelector((state) => state.user.loading);
  const error = useAppSelector((state) => state.user.error);
  const isAuthenticated = useAppSelector((state) => state.auth.isAuthenticated);
  const token = useAppSelector((state) => state.auth.token);
  const user = useAppSelector((state) => state.user);

  // Login handler;
  const login = useCallback(
    async (email: string, password: string) => {
      try {
        dispatch(setLoading(true));
        const { user, token } = await authenticateUser(email, password);

        if (!user || !token) {
          dispatch(setError('Invalid credentials'));
          toast.error('Invalid credentials');
          return false;
        }

        // Save token
        window.localStorage.setItem('authToken', token);

        // Update Redux store
        dispatch(setUser(user));
        dispatch(setToken(token));
        dispatch(setAuthenticated(true));

        // Show success message
        toast.success('Successfully logged in');

        return true;
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : 'An error occurred during login';
        dispatch(setError(errorMessage));
        toast.error(errorMessage);
        return false;
      } finally {
        dispatch(setLoading(false));
      }
    },
    [dispatch]
  );

  // Logout handler;
  const logout = useCallback(async () => {
    try {
      // First sign out from Firebase;
      try {
        await sessionService.logout();
      } catch (error) {
        console.error('Sign out error: ', error);
        throw error;
      }
      // Clear all storage;
      window.localStorage.clear();
      window.sessionStorage.clear();
      // Reset individual slices first;
      dispatch(clearUser());
      dispatch(resetAuth());
      // Then reset the entire store;
      dispatch({ type: RESET_STORE });
      // Force a re-render of the app;
      window.dispatchEvent(new Event('storage'));
      // Show success message;
      toast.success('Successfully logged out');
      // Navigate to home page since it's public;
      navigate('/', {
        replace: true,
        state: {}, // Clear navigation state
      });
    } catch (error) {
      console.error('Logout error: ', error);
      toast.error('Error during logout');
    }
  }, [dispatch, navigate]);

  // Update user profile;
  const updateProfile = useCallback(
    (updates: Partial<User>) => {
      dispatch(updateUserProfile(updates));
    },
    [dispatch]
  );

  // Add booking;
  const addBooking = useCallback(
    (booking: Booking) => {
      if (user) {
        const updatedBookings = [...(user.bookings || []), booking];
        dispatch(updateUserProfile({ bookings: updatedBookings }));
      }
    },
    [user, dispatch]
  );

  // Update technician status;
  const updateTechStatus = useCallback(
    (status: 'available' | 'busy' | 'offline') => {
      if (user && user.role === 'tech') {
        dispatch(
          updateUserProfile({
            availability: {
              status,
              lastUpdated: new Date().toISOString()
            }
          })
        );
      }
    },
    [user, dispatch]
  );

  return {
    user,
    loading,
    error,
    isAuthenticated,
    token,
    login,
    logout,
    updateProfile,
    addBooking,
    updateTechStatus
  };
};

export { RESET_STORE, useUserRedux };

undefined.displayName = 'undefined';