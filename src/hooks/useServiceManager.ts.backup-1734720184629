'use client';

import { useState, useEffect } from 'react';

import { ServiceManager, ServiceInitOptions } from '../services/serviceManager';

const serviceManager = ServiceManager.getInstance();

const initializeServices = async (
  options: ServiceInitOptions
): Promise<Error | null> => {
  try {
    await serviceManager.initializeServices(options);
    return null;
  } catch (err) {
    return err instanceof Error ? err : new Error(String(err));
  }
};

const reinitializeService = async (
  serviceName: string
): Promise<Error | null> => {
  try {
    await serviceManager.reinitializeService(serviceName);
    return null;
  } catch (err) {
    return err instanceof Error ? err : new Error(String(err));
  }
};

interface ServiceManagerHook {
  isInitializing: boolean;
  error: Error | null;
  handleReinitializeService: (serviceName: string) => Promise<void>;
}

const useServiceManager = (options: ServiceInitOptions): ServiceManagerHook => {
  const [isInitializing, setIsInitializing] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const init = async (): Promise<void> => {
      try {
        const err = await initializeServices(options);
        setError(err);
      } finally {
        setIsInitializing(false);
      }
    };

    void init();
  }, [options]);

  const handleReinitializeService = async (serviceName: string): Promise<void> => {
    setIsInitializing(true);
    try {
      const err = await reinitializeService(serviceName);
      setError(err);
    } finally {
      setIsInitializing(false);
    }
  };

  return {
    isInitializing,
    error,
    handleReinitializeService
  };
};

export { useServiceManager, serviceManager, initializeServices, reinitializeService };
export default useServiceManager;
