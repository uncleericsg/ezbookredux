import { useState, useCallback } from 'react';

interface RateLimiterOptions {
  maxRequests: number;
  timeWindow: number;
}

interface RateLimiterState {
  requests: number;
  lastReset: number;
}

export const useRateLimiter = (options: RateLimiterOptions) => {
  const { maxRequests = 60, timeWindow = 60000 } = options;

  const [state, setState] = useState<RateLimiterState>({
    requests: 0,
    lastReset: Date.now()
  });

  const checkRateLimit = useCallback(() => {
    const now = Date.now();
    const timeSinceReset = now - state.lastReset;

    if (timeSinceReset >= timeWindow) {
      // Reset if time window has passed
      setState({
        requests: 1,
        lastReset: now
      });
      return true;
    }

    if (state.requests >= maxRequests) {
      // Rate limit exceeded
      return false;
    }

    // Increment request count
    setState(prev => ({
      ...prev,
      requests: prev.requests + 1
    }));

    return true;
  }, [state, maxRequests, timeWindow]);

  const getRemainingRequests = useCallback(() => {
    const now = Date.now();
    const timeSinceReset = now - state.lastReset;

    if (timeSinceReset >= timeWindow) {
      return maxRequests;
    }

    return Math.max(0, maxRequests - state.requests);
  }, [state, maxRequests, timeWindow]);

  const getTimeUntilReset = useCallback(() => {
    const now = Date.now();
    const timeSinceReset = now - state.lastReset;
    return Math.max(0, timeWindow - timeSinceReset);
  }, [state.lastReset, timeWindow]);

  return {
    checkRateLimit,
    getRemainingRequests,
    getTimeUntilReset
  };
};