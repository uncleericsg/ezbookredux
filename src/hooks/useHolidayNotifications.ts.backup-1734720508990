/* eslint-disable no-undef */
import { useState, useCallback, useEffect } from 'react';
import { toast } from 'sonner';

import { holidayNotificationService } from '../services/holidayNotifications';

import type { Holiday } from '../types';

export interface UseHolidayNotificationsOptions;
export interface UseHolidayNotificationsReturn;









interface UseHolidayNotificationsOptions {
  refreshInterval?: number; // in milliseconds
}

interface UseHolidayNotificationsReturn {
  upcomingHolidays: Holiday[];
  loading: boolean;
  error: string | null;
  refresh: () => Promise<void>;
}

/**
 * A hook to manage holiday notifications and upcoming holidays
 * @param options Configuration options for the hook
 * @returns An object containing upcoming holidays data and management functions
 */
export function useHolidayNotifications({
  refreshInterval = 60 * 60 * 1000 // 1 hour default
}: UseHolidayNotificationsOptions = {}): UseHolidayNotificationsReturn {
  const [upcomingHolidays, setUpcomingHolidays] = useState<Holiday[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  const loadHolidays = useCallback(async (): Promise<void> => {
    try {
      setLoading(true);
      setError(null);
      const holidays = await holidayNotificationService.getUpcomingHolidays();
      setUpcomingHolidays(holidays);
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to load holidays';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    loadHolidays();

    // Skip interval if refreshInterval is 0 or negative
    if (refreshInterval <= 0) return;

    // Refresh data periodically
    const interval = setInterval(loadHolidays, refreshInterval);

    // Cleanup interval on unmount
    return () => clearInterval(interval);
  }, [loadHolidays, refreshInterval]);

  const refresh = useCallback(async (): Promise<void> => {
    try {
      setLoading(true);
      setError(null);
      await loadHolidays();
      toast.success('Holiday notifications refreshed successfully');
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to refresh holiday notifications';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  }, [loadHolidays]);

  return {
    upcomingHolidays,
    loading,
    error,
    refresh
  };
}

export type { UseHolidayNotificationsOptions, UseHolidayNotificationsReturn };
export default useHolidayNotifications;
undefined.displayName = 'undefined';
