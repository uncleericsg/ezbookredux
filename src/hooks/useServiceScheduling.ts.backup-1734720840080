import { addDays } from 'date-fns';
import { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

import { useUser } from '../contexts/UserContext';

import { useAppointments } from './useAppointments';
import { useCalendarExport } from './useCalendarExport';

import type { CalendarEvent } from '../types';

export interface AppointmentDetails;

export interface ServiceSchedulingState;


export const useServiceScheduling = (categoryId: string, isAMC = false) => {
  const navigate = useNavigate();
  const [state, setState] = useState<ServiceSchedulingState>({
    loading: false,
    error: null,
    confirmed: false,
    appointmentDetails: null
  });

  const { bookNewAppointment } = useAppointments();
  const { downloadCalendarFile } = useCalendarExport();
  const { user } = useUser();

  const calculateVisitNumber = useCallback((): number => {
    // TODO: Implement visit number calculation based on contract history
    return 1;
  }, []);

  const handleSchedule = useCallback(async (date: Date, time: string) => {
    setState(prev => ({ ...prev, loading: true, error: null }));

    try {
      const appointmentId = await bookNewAppointment(time, categoryId);

      // Calculate next service date for AMC customers
      const nextServiceDate = isAMC ? addDays(date, 90) : undefined;
      const visitNumber = isAMC ? calculateVisitNumber() : undefined;

      const details: AppointmentDetails = {
        date: date.toISOString().split('T')[0],
        time,
        visitNumber,
        nextServiceDate
      };

      setState(prev => ({ ...prev, confirmed: true, appointmentDetails: details }));
      toast.success('Service scheduled successfully');
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Failed to schedule service');
      setState(prev => ({ ...prev, error }));
      toast.error(error.message);
      throw error;
    } finally {
      setState(prev => ({ ...prev, loading: false }));
    }
  }, [categoryId, isAMC, bookNewAppointment, calculateVisitNumber]);

  const handleAddToCalendar = useCallback(() => {
    if (!state.appointmentDetails || !user) return;

    const event: CalendarEvent = {
      title: isAMC ? `AMC Service Visit #${state.appointmentDetails.visitNumber}` : 'Air Conditioning Service',
      description: `Service appointment with iAircon${isAMC ? ` (Visit #${state.appointmentDetails.visitNumber})` : ''}`,
      startTime: new Date(`${state.appointmentDetails.date}T${state.appointmentDetails.time}`).toISOString(),
      endTime: new Date(`${state.appointmentDetails.date}T${state.appointmentDetails.time}`).toISOString(),
      location: user.address
    };

    downloadCalendarFile(event);
    toast.success('Calendar event downloaded');
  }, [state.appointmentDetails, user, isAMC, downloadCalendarFile]);

  return {
    ...state,
    handleSchedule,
    handleAddToCalendar
  };
};
undefined.displayName = 'undefined';