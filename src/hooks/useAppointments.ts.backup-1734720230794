import { useState, useRef } from 'react';
import { toast } from 'sonner';

import { useUser } from '../contexts/UserContext';
import { bookAppointment } from '../services/apiService';
import { incrementVisitLabel } from '../services/repairShopr';
import { BookingError } from '../utils/errors';
import { validateBookingDetails } from '../utils/validation';

export interface UseAppointmentsReturn;

interface UseAppointmentsReturn {
  bookNewAppointment: (datetime: string, categoryId: string) => Promise<string>;
  loading: boolean;
  error: string | null;
}

export function useAppointments(): UseAppointmentsReturn {
  const [loading, setLoading] = useState(false);
  const bookingInProgress = useRef(false);
  const [error, setError] = useState<string | null>(null);
  const { user } = useUser();

  const bookNewAppointment = async (datetime: string, categoryId: string): Promise<string> => {
    if (bookingInProgress.current) {
      toast.error('A booking is already in progress');
      throw new Error('Booking in progress');
    }

    if (!user) {
      toast.error('Please log in to book appointments');
      throw new Error('Authentication required');
    }

    setError(null);
    setLoading(true);
    bookingInProgress.current = true;
    const isAMC = categoryId === 'amc';

    try {
      // Validate booking details
      const validation = validateBookingDetails(user.id, datetime, categoryId, isAMC);
      if (!validation.isValid) {
        validation.errors.forEach(error => toast.error(error));
        throw new BookingError('Invalid booking details', validation.errors);
      }

      // Book the appointment
      const appointmentId = await bookAppointment({
        userId: user.id,
        datetime,
        categoryId,
        isAMC
      });

      // Increment visit label if successful
      await incrementVisitLabel(user.id);

      toast.success('Appointment booked successfully!');
      return appointmentId;
    } catch (err) {
      const message = err instanceof BookingError ? err.message : 'Failed to book appointment';
      setError(message);
      toast.error(message);
      throw err;
    } finally {
      setLoading(false);
      bookingInProgress.current = false;
    }
  };

  return {
    bookNewAppointment,
    loading,
    error
  };
}