import { useState, useCallback, useEffect } from 'react';
import { toast } from 'sonner';

import {
  generateHolidayGreeting,
  scheduleHolidayGreetings,
  fetchHolidayGreetings,
  updateHolidayGreeting
} from '../services/notifications';

import type { HolidayGreeting } from '../types';
import type { ChatGPTSettings } from '../types/settings';

export interface UseHolidayGreetingsOptions;
export interface GenerateGreetingOptions;
export interface UseHolidayGreetingsReturn;

export interface UseHolidayGreetingsOptions;
export interface GenerateGreetingOptions;
export interface UseHolidayGreetingsReturn;

export interface UseHolidayGreetingsOptions;
export interface GenerateGreetingOptions;
export interface UseHolidayGreetingsReturn;

export interface UseHolidayGreetingsOptions {
  chatGPTSettings?: ChatGPTSettings;
}

interface GenerateGreetingOptions {
  holiday: string;
  date: Date;
  tone?: 'formal' | 'casual' | 'friendly';
  language?: string;
}

interface UseHolidayGreetingsReturn {
  loading: boolean;
  error: string | null;
  holidayGreetings: HolidayGreeting[];
  lastUpdate: Date | null;
  generateGreeting: (options: GenerateGreetingOptions) => Promise<string | null>;
  scheduleGreeting: (greeting: HolidayGreeting) => Promise<void>;
  updateGreeting: (id: string, updates: Partial<HolidayGreeting>) => Promise<void>;
  refreshGreetings: () => Promise<void>;
}

export function useHolidayGreetings(
  options: UseHolidayGreetingsOptions = {}
): UseHolidayGreetingsReturn {
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [holidayGreetings, setHolidayGreetings] = useState<HolidayGreeting[]>([]);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);

  const refreshGreetings = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const greetings = await fetchHolidayGreetings();
      setHolidayGreetings(greetings);
      setLastUpdate(new Date());
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to load greetings';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    refreshGreetings();
  }, [refreshGreetings]);

  const generateGreeting = useCallback(async ({
    holiday,
    date,
    tone = 'friendly',
    language = 'en'
  }: GenerateGreetingOptions): Promise<string | null> => {
    if (!options.chatGPTSettings?.enabled) {
      toast.error('ChatGPT integration is not enabled');
      return null;
    }

    try {
      setLoading(true);
      setError(null);
      const message = await generateHolidayGreeting(
        holiday,
        date,
        tone,
        language,
        options.chatGPTSettings
      );
      return message;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to generate greeting';
      setError(message);
      toast.error(message);
      return null;
    } finally {
      setLoading(false);
    }
  }, [options.chatGPTSettings]);

  const scheduleGreeting = useCallback(async (greeting: HolidayGreeting): Promise<void> => {
    try {
      setLoading(true);
      setError(null);
      await scheduleHolidayGreetings(greeting);
      await refreshGreetings();
      toast.success('Greeting scheduled successfully');
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to schedule greeting';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  }, [refreshGreetings]);

  const updateGreeting = useCallback(async (
    id: string,
    updates: Partial<HolidayGreeting>
  ): Promise<void> => {
    try {
      setLoading(true);
      setError(null);
      await updateHolidayGreeting(id, updates);
      await refreshGreetings();
      toast.success('Greeting updated successfully');
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to update greeting';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  }, [refreshGreetings]);

  return {
    loading,
    error,
    holidayGreetings,
    lastUpdate,
    generateGreeting,
    scheduleGreeting,
    updateGreeting,
    refreshGreetings
  };
}

export type { GenerateGreetingOptions, UseHolidayGreetingsReturn };
export default useHolidayGreetings;