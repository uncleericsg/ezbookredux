 
import { useCallback, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

import { useUserRedux } from '../contexts/UserContext';
import { fetchSubscription, updateSubscription, sendConfirmationEmail } from '../services/amc';

export interface AMCSubscription;
export interface UseAMCSubscriptionReturn;

export interface AMCSubscription;
export interface UseAMCSubscriptionReturn;

export interface AMCSubscription;
export interface UseAMCSubscriptionReturn;

export interface AMCSubscription;
export interface UseAMCSubscriptionReturn;

/**
 * Interface representing an AMC subscription.
 */
interface AMCSubscription {
  /**
   * Unique identifier for the subscription.
   */
  id: string;
  /**
   * Status of the subscription (active, expired, or pending).
   */
  status: 'active' | 'expired' | 'pending';
  /**
   * Start date of the subscription.
   */
  startDate: string;
  /**
   * End date of the subscription.
   */
  endDate: string;
   
  /**
   * Whether auto-renew is enabled for the subscription.
   */
  autoRenew: boolean;
}

/**
 * Interface representing the return value of the useAMCSubscription hook.
 */
interface UseAMCSubscriptionReturn {
  /**
   * Whether the subscription data is currently being loaded.
   */
  loading: boolean;
  /**
   * Any error message that occurred while loading the subscription data.
   */
  error: string | null;
  /**
   * The current subscription data, or null if not loaded.
   */
  subscription: AMCSubscription | null;
  /**
   * Function to activate the AMC package.
   */
  activateAMC: () => Promise<void>;
  /**
   * Function to handle payment success.
   */
  handlePaymentSuccess: () => Promise<void>;
  /**
   * Function to update the auto-renew setting for the subscription.
   */
  handleAutoRenewUpdate: (autoRenew: boolean) => Promise<void>;
}

/**
 * Hook to manage AMC subscription data and actions.
 */
export function useAMCSubscription(): UseAMCSubscriptionReturn {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [subscription, setSubscription] = useState<AMCSubscription | null>(null);
  const { user, updateProfile } = useUserRedux();
  const navigate = useNavigate();

  /**
   * Effect to load the subscription data when the user ID changes.
   */
  useEffect(() => {
    const loadSubscription = async () => {
      if (!user?.id) return;

      try {
        setLoading(true);
        const data = await fetchSubscription(user.id);
        setSubscription(data);
      } catch (err) {
        const message = err instanceof Error ? err.message : 'Failed to load subscription';
        setError(message);
        toast.error(message);
      } finally {
        setLoading(false);
      }
    };

    loadSubscription();
  }, [user?.id]);

  /**
   * Function to activate the AMC package.
   */
  const activateAMC = useCallback(async () => {
    if (!user) {
      toast.error('Please log in to continue');
      navigate('/login');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      await updateProfile({
        ...user,
        amcStatus: 'active'
      });

      toast.success('AMC Package activated successfully!');
      navigate('/schedule', { 
        state: { 
          isAMC: true 
        }
      });
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to activate AMC package';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  }, [user, updateProfile, navigate]);

  /**
   * Function to handle payment success.
   */
  const handlePaymentSuccess = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      await activateAMC();

      if (user?.id) {
        await sendConfirmationEmail(user.id);
      }
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Payment processing failed';
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  }, [user, activateAMC]);

  /**
   * Function to update the auto-renew setting for the subscription.
   */
  const handleAutoRenewUpdate = useCallback(async (autoRenew: boolean) => {
    if (!subscription?.id) return;

    try {
      const updatedSubscription = await updateSubscription(subscription.id, { autoRenew });
      setSubscription(updatedSubscription);
      toast.success(`Auto-renew ${autoRenew ? 'enabled' : 'disabled'}`);
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to update auto-renew';
      setError(message);
      toast.error(message);
    }
  }, [subscription?.id, setSubscription]);

  return {
    loading,
    error,
    subscription,
    activateAMC,
    handlePaymentSuccess,
    handleAutoRenewUpdate
  };
}
undefined.displayName = 'undefined';
