 /// <reference types="google.maps" />
import debounce from 'lodash/debounce';
import { useState, useCallback, useEffect, useRef } from 'react';

import { GooglePlacesService } from '../services/google/googlePlacesService';

import type { AutocompletePrediction, PlaceResult } from '@googlemaps/google-maps-services-js';

export interface Window;
export interface UseGooglePlacesProps;
export interface UseGooglePlacesReturn;

export interface Window;
export interface UseGooglePlacesProps;
export interface UseGooglePlacesReturn;

export interface Window;
export interface UseGooglePlacesProps;
export interface UseGooglePlacesReturn;

export interface Window;
export interface UseGooglePlacesProps;
export interface UseGooglePlacesReturn;

declare global {
  interface Window {
    google: {
      maps: {
        Geocoder: new () => {
          geocode: (request: { address: string }) => Promise<{
            results: Array<{
              address_components: Array<{
                long_name: string;
                types: string[];
              }>;
            }>;
          }>;
        };
        places: {
          AutocompleteService: new () => google.maps.places.AutocompleteService;
          PlacesService: new (div: HTMLDivElement) => google.maps.places.PlacesService;
        };
      };
    };
  }
}

interface UseGooglePlacesProps {
  /** Callback when an address is selected */
  onAddressSelect?: (address: string, placeId: string) => void;
  /** Callback when an error occurs */
  onError?: (error: Error) => void;
}

interface UseGooglePlacesReturn {
  /** Whether Google Places API is initialized */
  isInitialized: boolean;
  /** Whether a request is in progress */
  isLoading: boolean;
  /** Current error if any */
  error: Error | null;
  /** Current address suggestions */
  suggestions: AutocompletePrediction[];
  /** Search for address suggestions */
  searchAddress: (input: string) => Promise<AutocompletePrediction[]>;
  /** Get details for a specific place */
  getPlaceDetails: (placeId: string) => Promise<PlaceResult>;
  /** Get postal code from address */
  getPostalCode: (address: string) => Promise<string | null>;
  /** Handle place selection */
  handlePlaceSelect: (place: google.maps.places.PlaceResult) => void;
}

/**
 * Hook for interacting with Google Places API
 * @param props Configuration options
 * @returns Google Places API functions and state
 */
export function useGooglePlaces({ 
  onAddressSelect, 
  onError 
}: UseGooglePlacesProps = {}): UseGooglePlacesReturn {
  const [isInitialized, setIsInitialized] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const [suggestions, setSuggestions] = useState<AutocompletePrediction[]>([]);

  const placesService = useRef<GooglePlacesService | null>(null);
  const geocoder = useRef<google.maps.Geocoder | null>(null);

  useEffect(() => {
    const initServices = async () => {
      try {
        if (!window.google?.maps) {
          throw new Error('Google Maps not loaded');
        }

        const dummyDiv = document.createElement('div');
        placesService.current = new GooglePlacesService(
          new window.google.maps.places.PlacesService(dummyDiv)
        );
        geocoder.current = new window.google.maps.Geocoder();
        setIsInitialized(true);
      } catch (err) {
        const error = err instanceof Error ? err : new Error('Failed to initialize Google Places');
        setError(error);
        onError?.(error);
      }
    };

    void initServices();
  }, [onError]);

  const searchAddress = useCallback(async (input: string): Promise<AutocompletePrediction[]> => {
    if (!input.trim() || !placesService.current) {
      setSuggestions([]);
      return [];
    }

    try {
      setIsLoading(true);
      setError(null);
      const results = await placesService.current.getPlacePredictions(input);
      setSuggestions(results);
      return results;
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Failed to get address suggestions');
      setError(error);
      onError?.(error);
      return [];
    } finally {
      setIsLoading(false);
    }
  }, [onError]);

  const debouncedSearchAddress = useCallback(
    debounce(async (input: string) => {
      await searchAddress(input);
    }, 300),
    [searchAddress]
  );

  const getPlaceDetails = useCallback(async (placeId: string): Promise<PlaceResult> => {
    if (!placesService.current) {
      throw new Error('Places service not initialized');
    }

    try {
      setIsLoading(true);
      setError(null);
      return await placesService.current.getPlaceDetails(placeId);
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Failed to get place details');
      setError(error);
      onError?.(error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [onError]);

  const getPostalCode = useCallback(async (address: string): Promise<string | null> => {
    if (!geocoder.current) {
      throw new Error('Geocoder not initialized');
    }

    try {
      setIsLoading(true);
      setError(null);
      const response = await geocoder.current.geocode({ address });
      const postalComponent = response.results[0]?.address_components.find(
        component => component.types.includes('postal_code')
      );
      return postalComponent?.long_name ?? null;
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Failed to get postal code');
      setError(error);
      onError?.(error);
      return null;
    } finally {
      setIsLoading(false);
    }
  }, [onError]);

  const handlePlaceSelect = useCallback((place: google.maps.places.PlaceResult) => {
    if (place.formatted_address && place.place_id) {
      onAddressSelect?.(place.formatted_address, place.place_id);
    }
  }, [onAddressSelect]);

  return {
    isInitialized,
    isLoading,
    error,
    suggestions,
    searchAddress: debouncedSearchAddress,
    getPlaceDetails,
    getPostalCode,
    handlePlaceSelect
  };
}
undefined.displayName = 'undefined';
