/* eslint-disable no-undef */
import { useEffect, useCallback } from 'react';
import { useDispatch } from 'react-redux';
import { toast } from 'sonner';

import { setAdmin, setAdminData, setLoading } from '../store/slices/adminSlice';
import { setAuthenticated, setToken } from '../store/slices/authSlice';
import { setUser } from '../store/slices/userSlice';

import type { UserData, AdminData } from '../types';

export interface InitializeAuthResult;





interface InitializeAuthResult {
  success: boolean;
  error?: string;
}

/**
 * Hook to initialize authentication state from localStorage
 * This runs once when the app starts and sets up the authentication
 * state based on stored data.
 * @returns void
 */
export function useInitializeAuth(): void {
  const dispatch = useDispatch();

  const clearAuthState = useCallback(() => {
    dispatch(setToken(null));
    dispatch(setAuthenticated(false));
    dispatch(setUser(null));
    dispatch(setAdmin(false));
    dispatch(setAdminData(null));
  }, [dispatch]);

  const initializeAuth = useCallback(async (): Promise<InitializeAuthResult> => {
    try {
      const token = localStorage.getItem('auth_token');
      const userData = localStorage.getItem('user_data');

      if (!token || !userData) {
        clearAuthState();
        return { success: false };
      }

      let parsedUser: UserData;
      try {
        parsedUser = JSON.parse(userData);
      } catch (err) {
        clearAuthState();
        return {
          success: false,
          error: 'Invalid user data format'
        };
      }

      // Set authentication state
      dispatch(setToken(token));
      dispatch(setAuthenticated(true));
      dispatch(setUser(parsedUser));

      // Handle admin privileges
      if (parsedUser.role === 'admin') {
        const adminData: AdminData = {
          accessLevel: parsedUser.accessLevel || 'standard'
        };

        dispatch(setAdmin(true));
        dispatch(setAdminData(adminData));
      } else {
        dispatch(setAdmin(false));
        dispatch(setAdminData(null));
      }

      return { success: true };
    } catch (err) {
      const error = err instanceof Error ? err.message : 'Failed to initialize auth';
      toast.error(error);
      return { success: false, error };
    }
  }, [dispatch, clearAuthState]);

  useEffect(() => {
    const initialize = async () => {
      dispatch(setLoading(true));
      try {
        await initializeAuth();
      } finally {
        dispatch(setLoading(false));
      }
    };

    initialize();
  }, [dispatch, initializeAuth]);
}

export type { InitializeAuthResult };
export default useInitializeAuth;

undefined.displayName = 'undefined';