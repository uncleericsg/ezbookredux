import { useState, useCallback } from 'react';

import { firebaseValidation } from '../services/validation/firebaseValidation';

export interface ValidationState;
export interface ValidationResult;
export interface MobileValidationResult;
export interface UseFirebaseValidationReturn;

export interface ValidationState {
  isValidating: boolean;
  showOTPInput: boolean;
  verificationId: string;
  otpError: string;
  isMobileVerified: boolean;
  isEmailVerified: boolean;
  emailError: string;
}

interface ValidationResult {
  isValid: boolean;
  error?: string;
}

interface MobileValidationResult {
  success: boolean;
  verificationId?: string;
  error?: string;
}

interface UseFirebaseValidationReturn {
  validationState: ValidationState;
  validateEmail: (email: string) => Promise<ValidationResult>;
  validateMobile: (mobile: string) => Promise<MobileValidationResult>;
  verifyOTP: (otp: string) => Promise<ValidationResult>;
  resetEmailValidation: () => void;
  resetMobileValidation: () => void;
}

export function useFirebaseValidation(): UseFirebaseValidationReturn {
  const [validationState, setValidationState] = useState<ValidationState>({
    isValidating: false,
    showOTPInput: false,
    verificationId: '',
    otpError: '',
    isMobileVerified: false,
    isEmailVerified: false,
    emailError: ''
  });

  const validateEmail = useCallback(async (email: string): Promise<ValidationResult> => {
    if (!email) {
      return { isValid: false, error: 'Email is required' };
    }

    try {
      setValidationState(prev => ({
        ...prev,
        isValidating: true,
        emailError: ''
      }));

      const result = await firebaseValidation.validateEmail(email);
      
      setValidationState(prev => ({
        ...prev,
        isValidating: false,
        isEmailVerified: result.isValid,
        emailError: result.error || ''
      }));

      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to validate email';
      setValidationState(prev => ({
        ...prev,
        isValidating: false,
        emailError: errorMessage
      }));
      return { isValid: false, error: errorMessage };
    }
  }, []);

  const validateMobile = useCallback(async (mobile: string): Promise<MobileValidationResult> => {
    if (!mobile) {
      return { success: false, error: 'Mobile number is required' };
    }

    try {
      setValidationState(prev => ({
        ...prev,
        isValidating: true,
        otpError: ''
      }));

      const result = await firebaseValidation.validateMobile(mobile);
      
      setValidationState(prev => ({
        ...prev,
        isValidating: false,
        showOTPInput: result.success,
        verificationId: result.verificationId || '',
        otpError: result.error || ''
      }));

      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to send OTP';
      setValidationState(prev => ({
        ...prev,
        isValidating: false,
        otpError: errorMessage
      }));
      return { success: false, error: errorMessage };
    }
  }, []);

  const verifyOTP = useCallback(async (otp: string): Promise<ValidationResult> => {
    if (!otp) {
      return { isValid: false, error: 'OTP is required' };
    }

    if (!validationState.verificationId) {
      return { isValid: false, error: 'Verification ID not found' };
    }

    try {
      setValidationState(prev => ({
        ...prev,
        isValidating: true,
        otpError: ''
      }));

      const result = await firebaseValidation.verifyOTP(
        validationState.verificationId,
        otp
      );

      setValidationState(prev => ({
        ...prev,
        isValidating: false,
        isMobileVerified: result.isValid,
        otpError: result.error || ''
      }));

      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to verify OTP';
      setValidationState(prev => ({
        ...prev,
        isValidating: false,
        otpError: errorMessage
      }));
      return { isValid: false, error: errorMessage };
    }
  }, [validationState.verificationId]);

  const resetEmailValidation = useCallback(() => {
    setValidationState(prev => ({
      ...prev,
      isEmailVerified: false,
      emailError: ''
    }));
  }, []);

  const resetMobileValidation = useCallback(() => {
    setValidationState(prev => ({
      ...prev,
      showOTPInput: false,
      verificationId: '',
      otpError: '',
      isMobileVerified: false
    }));
  }, []);

  return {
    validationState,
    validateEmail,
    validateMobile,
    verifyOTP,
    resetEmailValidation,
    resetMobileValidation
  };
}