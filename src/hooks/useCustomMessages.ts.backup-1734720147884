 
import { useQuery } from '@tanstack/react-query';
import { useState, useCallback } from 'react';
import { toast } from 'sonner';

import { scheduleCustomMessage } from '../services/notifications';

export interface MessageSchedule {
  content: string;
  url?: string;
  scheduledDate: string;
  scheduledTime: string;
  frequency: 'once' | 'daily' | 'weekly' | 'monthly';
  userType: 'all' | 'amc' | 'regular';
  utmSource?: string;
  utmMedium?: string;
  utmCampaign?: string;
}

export interface MessageStats {
  opens: number;
  clicks: number;
  engagement: number;
}

interface UseCustomMessagesReturn {
  scheduleMessage: (schedule: MessageSchedule) => Promise<void>;
  loading: boolean;
  messageStats: MessageStats | undefined;
  hasStats: boolean;
}

export function useCustomMessages(): UseCustomMessagesReturn {
  const [loading, setLoading] = useState(false);
  
  const { data: messageStats } = useQuery<MessageStats>({
    queryKey: ['messageStats'],
    queryFn: async () => {
      try {
        const response = await window.fetch('/api/message-stats');
        if (!response.ok) {
          throw new Error('Failed to fetch message stats');
        }
        return response.json();
      } catch (error) {
        console.error('Error fetching message stats:', error);
        throw error;
      }
    }
  });

  const scheduleMessage = useCallback(async (schedule: MessageSchedule) => {
    try {
      setLoading(true);
      await scheduleCustomMessage(schedule);
      toast.success('Message scheduled successfully');
    } catch (error) {
      console.error('Error scheduling message:', error);
      toast.error('Failed to schedule message');
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    scheduleMessage,
    loading,
    messageStats,
    hasStats: !!messageStats
  };
}