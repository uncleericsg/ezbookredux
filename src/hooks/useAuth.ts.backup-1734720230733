/* eslint-disable no-undef */
import { useState, useEffect } from 'react';

export type AMCStatus;
export interface User;
export interface UseAuthReturn;

type AMCStatus = 'active' | 'inactive' | 'pending';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  phone?: string;
  address?: string;
  condoName?: string;
  lobbyTower?: string;
  amcStatus: AMCStatus;
}

interface UseAuthReturn {
  user: User | null;
  loading: boolean;
}

// Mock user for development
const mockUser: User = {
  id: 'mock-user-id',
  email: 'mock@example.com',
  firstName: 'Mock',
  lastName: 'User',
  amcStatus: 'inactive'
};

export function useAuth(): UseAuthReturn {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        // In development, always use mock user
        if (process.env.NODE_ENV === 'development') {
          localStorage.setItem('user', JSON.stringify(mockUser));
          setUser(mockUser);
        } else {
          // Production logic
          const storedUser = localStorage.getItem('user');
          if (storedUser) {
            setUser(JSON.parse(storedUser));
          }
        }
      } catch (error) {
        console.error('Auth check failed:', error);
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  return {
    user,
    loading
  };
}