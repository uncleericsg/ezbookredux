import { useState, useCallback, useEffect } from 'react';
import { z } from 'zod';

export type with;
export interface FormData;
export interface ValidationState;
export type for;
export interface UseFormValidationReturn;

/**
 * Form data type with string values
 */
interface FormData {
  [key: string]: string;
}

/**
 * Form validation state
 */
interface ValidationState {
  /** Map of field names to error messages */
  errors: Record<string, string>;
  /** Set of field names that have been touched */
  touched: Set<string>;
}

/**
 * Return type for useFormValidation hook
 */
interface UseFormValidationReturn {
  /** Current form data */
  formData: FormData;
  /** Current validation errors */
  errors: Record<string, string>;
  /** Set of touched fields */
  touched: Set<string>;
  /** Handle field value changes */
  handleChange: (field: keyof FormData, value: string) => void;
  /** Handle field blur events */
  handleBlur: (field: keyof FormData) => void;
  /** Validate entire form */
  validateForm: () => Promise<boolean>;
  /** Format phone number input */
  formatPhoneNumber: (value: string) => string;
}

/**
 * Hook for form validation using Zod schemas
 * @param initialData Initial form data
 * @param validate Custom validation function
 * @returns Form validation state and handlers
 */
export function useFormValidation(
  initialData: FormData,
  validate?: (data: FormData) => Promise<void>
): UseFormValidationReturn {
  const [formData, setFormData] = useState<FormData>(initialData);
  const [validationState, setValidationState] = useState<ValidationState>({
    errors: {},
    touched: new Set()
  });

  // Create schema outside of callback to avoid dependency
  const formSchema = z.object({
    firstName: z.string().min(1, 'First name is required'),
    mobile: z.string()
      .transform(val => val.replace(/\D/g, ''))
      .refine(
        val => /^[89]\d{7}$/.test(val),
        'Mobile number must be 8 digits starting with 8 or 9'
      )
      .transform(val => `+65${val}`),
    floorUnit: z.string()
      .min(1, 'Unit number is required')
      .or(z.literal('NA')),
    blockStreet: z.string().min(1, 'Block/Street is required'),
    postalCode: z.string()
      .min(1, 'Postal code is required')
      .regex(/^\d{6}$/, 'Postal code must be 6 digits'),
    condoName: z.string().optional(),
    specialInstructions: z.string().optional()
  });

  const validateField = useCallback(async (field: keyof FormData, value: string) => {
    try {
      await formSchema.pick({ [field]: true }).parseAsync({ [field]: value });
      setValidationState((prev) => ({
        ...prev,
        errors: { ...prev.errors, [field]: '' }
      }));
    } catch (err) {
      if (err instanceof z.ZodError) {
        setValidationState((prev) => ({
          ...prev,
          errors: { ...prev.errors, [field]: err.errors[0].message }
        }));
      }
    }
  }, []); // Remove formSchema from dependencies

  const handleChange = useCallback((field: keyof FormData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    void validateField(field, value);
  }, [validateField]);

  const handleBlur = useCallback((field: keyof FormData) => {
    setValidationState((prev) => ({
      ...prev,
      touched: new Set([...prev.touched, field])
    }));
  }, []);

  const validateForm = useCallback(async () => {
    try {
      await formSchema.parseAsync(formData);
      if (validate) {
        await validate(formData);
      }
      setValidationState((prev) => ({ ...prev, errors: {} }));
      return true;
    } catch (err) {
      if (err instanceof z.ZodError) {
        const errors = err.errors.reduce(
          (acc, error) => ({
            ...acc,
            [error.path[0]]: error.message
          }),
          {}
        );
        setValidationState((prev) => ({ ...prev, errors }));
      }
      return false;
    }
  }, [formData, validate]);

  const formatPhoneNumber = useCallback((value: string): string => {
    // Remove all non-numeric characters
    const cleaned = value.replace(/\D/g, '');
    // Format as (XXX) XXX-XXXX
    if (cleaned.length >= 10) {
      return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 10)}`;
    }
    return value;
  }, []);

  useEffect(() => {
    void validateForm();
  }, [validateForm]);

  return {
    formData,
    errors: validationState.errors,
    touched: validationState.touched,
    handleChange,
    handleBlur,
    validateForm,
    formatPhoneNumber
  };
}