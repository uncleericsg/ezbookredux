/// <reference lib="dom" />
import { useState, useCallback } from 'react';

import type { ServiceContract, ContractAnalytics } from '@/types/contracts';

export interface ServiceHubState;


export const useServiceHub = () => {
  const [state, setState] = useState<ServiceHubState>({
    contracts: [],
    analytics: {
      renewalRate: 0,
      revenueMetrics: {
        totalRevenue: 0
      }
    },
    loading: false,
    error: null
  });

  const fetchContracts = useCallback(async () => {
    setState(prev => ({ ...prev, loading: true, error: null }));

    try {
      const response = await fetch('/api/contracts');
      if (!response.ok) {
        throw new Error('Failed to fetch contracts');
      }

      const data = await response.json();
      setState(prev => ({
        ...prev,
        contracts: data,
        loading: false
      }));
    } catch (err) {
      console.error('Error fetching contracts:', err);
      setState(prev => ({
        ...prev,
        error: err instanceof Error ? err : new Error('Failed to fetch contracts'),
        loading: false
      }));
    }
  }, []);

  const fetchAnalytics = useCallback(async () => {
    setState(prev => ({ ...prev, loading: true, error: null }));

    try {
      const response = await fetch('/api/analytics');
      if (!response.ok) {
        throw new Error('Failed to fetch analytics');
      }

      const data = await response.json();
      setState(prev => ({
        ...prev,
        analytics: data,
        loading: false
      }));
    } catch (err) {
      console.error('Error fetching analytics:', err);
      setState(prev => ({
        ...prev,
        error: err instanceof Error ? err : new Error('Failed to fetch analytics'),
        loading: false
      }));
    }
  }, []);

  const scheduleService = useCallback(async (contractId: string, serviceData: unknown) => {
    setState(prev => ({ ...prev, loading: true, error: null }));

    try {
      const response = await fetch(`/api/contracts/${contractId}/schedule`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(serviceData)
      });
      if (!response.ok) {
        throw new Error('Failed to schedule service');
      }

      const data = await response.json();
      return data;
    } catch (err) {
      console.error('Error scheduling service:', err);
      setState(prev => ({
        ...prev,
        error: err instanceof Error ? err : new Error('Failed to schedule service'),
        loading: false
      }));
      throw err;
    }
  }, []);

  const sendBatchNotifications = useCallback(async (contractIds: string[], message: string) => {
    setState(prev => ({ ...prev, loading: true, error: null }));

    try {
      const response = await fetch('/api/notifications/batch', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ contractIds, message })
      });
      if (!response.ok) {
        throw new Error('Failed to send batch notifications');
      }

      const data = await response.json();
      return data;
    } catch (err) {
      console.error('Error sending batch notifications:', err);
      setState(prev => ({
        ...prev,
        error: err instanceof Error ? err : new Error('Failed to send batch notifications'),
        loading: false
      }));
      throw err;
    }
  }, []);

  return {
    ...state,
    fetchContracts,
    fetchAnalytics,
    scheduleService,
    sendBatchNotifications
  };
};
undefined.displayName = 'undefined';