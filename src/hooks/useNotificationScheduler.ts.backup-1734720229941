import { addDays } from 'date-fns';
import * as React from 'react';
import { useEffect } from 'react';

import { useUser } from '../contexts/UserContext';
import { scheduleServiceReminder } from '../services/notifications';

export interface ReminderType;

interface ReminderType {
  service_reminder: string;
  amc_expiry: string;
}

export const useNotificationScheduler = () => {
  const { user } = useUser();

  useEffect(() => {
    if (!user?.nextServiceDate) return;

    const scheduleReminders = async () => {
      try {
        const nextService = new Date(user.nextServiceDate);
        
        // Schedule 75-day reminder
        const reminderDate = addDays(nextService, -75);
        if (reminderDate > new Date()) {
          await scheduleServiceReminder(user.id, reminderDate, 'service_reminder');
        }

        // Schedule AMC expiry reminder (30 days before)
        if (user.amcStatus === 'active') {
          const expiryDate = addDays(nextService, -30);
          if (expiryDate > new Date()) {
            await scheduleServiceReminder(user.id, expiryDate, 'amc_expiry');
          }
        }
      } catch (error) {
        console.error('Failed to schedule reminders:', error);
      }
    };

    scheduleReminders();
  }, [user?.id, user?.nextServiceDate, user?.amcStatus]);

  return null; // This hook is used for side effects only
};