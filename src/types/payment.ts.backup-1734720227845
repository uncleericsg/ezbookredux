import * as React from 'react';

export type PaymentStatus;
export type PaymentMethodType;
export type PaymentCurrency;
export interface PaymentAmount;
export interface PaymentCard;
export interface PaymentCustomer;
export interface PaymentIntent;
export interface PaymentRefund;
export interface PaymentMethod;
export type of;
export interface PaymentSession;
export interface PaymentWebhookEvent;
export interface PaymentSettings;
export interface PaymentError;

/**
 * Enum for payment status
 */
export type PaymentStatus = 'pending' | 'processing' | 'success' | 'failed' | 'refunded';

/**
 * Enum for payment method
 */
export type PaymentMethodType = 'card' | 'bank_transfer' | 'paynow' | 'grabpay';

/**
 * Enum for payment currency
 */
export type PaymentCurrency = 'SGD' | 'USD' | 'EUR';

/**
 * Interface for payment amount
 */
export interface PaymentAmount {
  /**
   * The value of the payment amount
   */
  value: number;
  /**
   * The currency of the payment amount
   */
  currency: PaymentCurrency;
  /**
   * The exchange rate of the payment amount (optional)
   */
  exchangeRate?: number;
}

/**
 * Interface for payment card
 */
export interface PaymentCard {
  /**
   * The brand of the payment card
   */
  brand: string;
  /**
   * The last 4 digits of the payment card
   */
  last4: string;
  /**
   * The expiration month of the payment card
   */
  expMonth: number;
  /**
   * The expiration year of the payment card
   */
  expYear: number;
  /**
   * The name on the payment card (optional)
   */
  name?: string;
  /**
   * The country of the payment card (optional)
   */
  country?: string;
}

/**
 * Interface for payment customer
 */
export interface PaymentCustomer {
  /**
   * The ID of the payment customer
   */
  id: string;
  /**
   * The email of the payment customer
   */
  email: string;
  /**
   * The name of the payment customer (optional)
   */
  name?: string;
  /**
   * The phone number of the payment customer (optional)
   */
  phone?: string;
  /**
   * The default payment method ID of the payment customer (optional)
   */
  defaultPaymentMethodId?: string;
  /**
   * The metadata of the payment customer (optional)
   */
  metadata?: Record<string, unknown>;
}

/**
 * Interface for payment intent
 */
export interface PaymentIntent {
  /**
   * The ID of the payment intent
   */
  id: string;
  /**
   * The amount of the payment intent
   */
  amount: PaymentAmount;
  /**
   * The status of the payment intent
   */
  status: PaymentStatus;
  /**
   * The method of the payment intent
   */
  method: PaymentMethodType;
  /**
   * The customer ID of the payment intent
   */
  customerId: string;
  /**
   * The description of the payment intent (optional)
   */
  description?: string;
  /**
   * The metadata of the payment intent (optional)
   */
  metadata?: Record<string, unknown>;
  /**
   * The created at timestamp of the payment intent
   */
  createdAt: string;
  /**
   * The updated at timestamp of the payment intent
   */
  updatedAt: string;
  /**
   * The canceled at timestamp of the payment intent (optional)
   */
  canceledAt?: string;
  /**
   * The card of the payment intent (optional)
   */
  card?: PaymentCard;
  /**
   * The receipt URL of the payment intent (optional)
   */
  receiptUrl?: string;
  /**
   * The refund ID of the payment intent (optional)
   */
  refundId?: string;
}

/**
 * Interface for payment refund
 */
export interface PaymentRefund {
  /**
   * The ID of the payment refund
   */
  id: string;
  /**
   * The payment intent ID of the payment refund
   */
  paymentIntentId: string;
  /**
   * The amount of the payment refund
   */
  amount: PaymentAmount;
  /**
   * The reason of the payment refund (optional)
   */
  reason?: string;
  /**
   * The status of the payment refund
   */
  status: 'pending' | 'succeeded' | 'failed';
  /**
   * The created at timestamp of the payment refund
   */
  createdAt: string;
  /**
   * The metadata of the payment refund (optional)
   */
  metadata?: Record<string, unknown>;
}

/**
 * Interface for payment method
 */
export interface PaymentMethod {
  /**
   * The ID of the payment method
   */
  id: string;
  /**
   * The customer ID of the payment method
   */
  customerId: string;
  /**
   * The type of the payment method
   */
  type: PaymentMethodType;
  /**
   * The card of the payment method (optional)
   */
  card?: PaymentCard;
  /**
   * Whether the payment method is default
   */
  isDefault: boolean;
  /**
   * The created at timestamp of the payment method
   */
  createdAt: string;
}

/**
 * Interface for payment session
 */
export interface PaymentSession {
  /**
   * The ID of the payment session
   */
  id: string;
  /**
   * The payment intent ID of the payment session
   */
  paymentIntentId: string;
  /**
   * The customer ID of the payment session
   */
  customerId: string;
  /**
   * The success URL of the payment session
   */
  successUrl: string;
  /**
   * The cancel URL of the payment session
   */
  cancelUrl: string;
  /**
   * The expires at timestamp of the payment session
   */
  expiresAt: string;
  /**
   * The status of the payment session
   */
  status: 'open' | 'complete' | 'expired';
}

/**
 * Interface for payment webhook event
 */
export interface PaymentWebhookEvent {
  /**
   * The ID of the payment webhook event
   */
  id: string;
  /**
   * The type of the payment webhook event
   */
  type: string;
  /**
   * The data of the payment webhook event
   */
  data: Record<string, unknown>;
  /**
   * The created at timestamp of the payment webhook event
   */
  createdAt: string;
}

/**
 * Interface for payment settings
 */
export interface PaymentSettings {
  /**
   * The currency of the payment settings
   */
  currency: PaymentCurrency;
  /**
   * The supported methods of the payment settings
   */
  supportedMethods: PaymentMethodType[];
  /**
   * The webhook secret of the payment settings (optional)
   */
  webhookSecret?: string;
  /**
   * Whether the payment settings are in test mode
   */
  testMode: boolean;
}

/**
 * Interface for payment error
 */
export interface PaymentError {
  /**
   * The code of the payment error
   */
  code: string;
  /**
   * The message of the payment error
   */
  message: string;
  /**
   * The decline code of the payment error (optional)
   */
  declineCode?: string;
  /**
   * The param of the payment error (optional)
   */
  param?: string;
}