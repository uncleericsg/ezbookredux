import { z } from 'zod';

/**
 * Interface for a holiday
 */
export interface Holiday {
  /**
   * Unique identifier for the holiday
   */
  id: string;
  /**
   * Name of the holiday
   */
  name: string;
  /**
   * Date of the holiday in YYYY-MM-DD format
   */
  date: string;
  /**
   * Type of holiday (public, company, or custom)
   */
  type: 'public' | 'company' | 'custom';
  /**
   * Optional description of the holiday
   */
  description?: string;
  /**
   * Whether the holiday is recurring
   */
  isRecurring: boolean;
  /**
   * Optional recurring pattern for the holiday
   */
  recurringPattern?: {
    /**
     * Type of recurring pattern (yearly, monthly, or weekly)
     */
    type: 'yearly' | 'monthly' | 'weekly';
    /**
     * Optional day of the month for the recurring pattern
     */
    day?: number;
    /**
     * Optional month of the year for the recurring pattern
     */
    month?: number;
    /**
     * Optional day of the week for the recurring pattern
     */
    weekday?: number;
  };
}

/**
 * Interface for a holiday notification
 */
export interface HolidayNotification {
  /**
   * Unique identifier for the notification
   */
  id: string;
  /**
   * ID of the holiday associated with the notification
   */
  holidayId: string;
  /**
   * ID of the user who will receive the notification
   */
  userId: string;
  /**
   * Scheduled time for the notification in YYYY-MM-DDTHH:mm:ss.sssZ format
   */
  scheduledTime: string;
  /**
   * Whether the notification has been sent
   */
  sent: boolean;
  /**
   * Optional error message for the notification
   */
  error?: string;
}

/**
 * Interface for holiday settings
 */
export interface HolidaySettings {
  /**
   * Number of days before the holiday to send notifications
   */
  notifyBeforeDays: number;
  /**
   * Time of day to send notifications in HH:mm format
   */
  notificationTime: string;
  /**
   * Whether notifications are enabled
   */
  notificationEnabled: boolean;
}

/**
 * Zod schema for validating holidays
 */
export const holidaySchema = z.object({
  id: z.string(),
  name: z.string(),
  date: z.string(),
  type: z.enum(['public', 'company', 'custom']),
  description: z.string().optional(),
  isRecurring: z.boolean(),
  recurringPattern: z.object({
    type: z.enum(['yearly', 'monthly', 'weekly']),
    day: z.number().optional(),
    month: z.number().optional(),
    weekday: z.number().optional(),
  }).optional(),
});

/**
 * Zod schema for validating holiday notifications
 */
export const holidayNotificationSchema = z.object({
  id: z.string(),
  holidayId: z.string(),
  userId: z.string(),
  scheduledTime: z.string(),
  sent: z.boolean(),
  error: z.string().optional(),
});

/**
 * Zod schema for validating holiday settings
 */
export const holidaySettingsSchema = z.object({
  notifyBeforeDays: z.number(),
  notificationTime: z.string(),
  notificationEnabled: z.boolean(),
});

/**
 * Type alias for holiday input data
 */
export type HolidayInput = z.infer<typeof holidaySchema>;

/**
 * Type alias for holiday notification input data
 */
export type HolidayNotificationInput = z.infer<typeof holidayNotificationSchema>;

/**
 * Type alias for holiday settings input data
 */
export type HolidaySettingsInput = z.infer<typeof holidaySettingsSchema>;