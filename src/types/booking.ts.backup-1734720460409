import * as React from 'react';

export interface Service;
export interface SavedLocation;
export interface CustomerDetails;
export interface ServiceArea;
export interface TimeSlot;
export interface Booking;
export interface BookingLog;
export interface CustomerPreferences;
export interface BookingService;

export interface Service;
export interface SavedLocation;
export interface CustomerDetails;
export interface ServiceArea;
export interface TimeSlot;
export interface Booking;
export interface BookingLog;
export interface CustomerPreferences;
export interface BookingService;

export interface Service;
export interface SavedLocation;
export interface CustomerDetails;
export interface ServiceArea;
export interface TimeSlot;
export interface Booking;
export interface BookingLog;
export interface CustomerPreferences;
export interface BookingService;

export interface Service;
export interface SavedLocation;
export interface CustomerDetails;
export interface ServiceArea;
export interface TimeSlot;
export interface Booking;
export interface BookingLog;
export interface CustomerPreferences;
export interface BookingService;

// Database Schema Interfaces
export interface Service {
  id: string;
  title: string;
  price: number;
  duration: string;
  description?: string;
  isPromo?: boolean;
  promoLabel?: string;
  isSignature?: boolean;
}

export interface SavedLocation {
  id: string;
  address: string;
  postalCode: string;
  unitNumber: string;
  default: boolean;
  firstName: string;
  lastName: string;
  phone: string;
  email: string;
  locations: SavedLocation[];
}

export interface CustomerDetails {
  firstName: string;
  lastName: string;
  email: string;
  mobile: string;
  selectedAddressId: string;
  address: {
    address: string;
    postalCode: string;
    unitNumber: string;
  };
}

export interface ServiceArea {
  id: string;
  postal_code: string;
  region: string;
  max_daily_bookings: number;
  max_concurrent_bookings: number;
  created_at: string;
  updated_at: string;
}

export interface TimeSlot {
  id: string;
  start_time: string;
  end_time: string;
  service_area_id: string;
  max_bookings: number;
  current_bookings: number;
  is_peak_hour: boolean;
  status: 'available' | 'booked' | 'blocked';
  created_at: string;
  updated_at: string;
}

export interface Booking {
  id: string;
  user_id: string;
  time_slot_id: string;
  service_type: string;
  service_id: string;
  status: 'pending' | 'confirmed' | 'completed' | 'cancelled' | 'rescheduled';
  total_amount: number;
  payment_status: 'pending' | 'paid' | 'failed' | 'refunded';
  payment_intent_id: string;
  scheduled_datetime: string;
  previous_slot_id?: string;
  postal_code: string;
  address: string;
  unit_number: string;
  special_instructions?: string;
  created_at: string;
  updated_at: string;
}

export interface BookingLog {
  id: string;
  booking_id: string;
  user_id: string;
  action: string;
  previous_status?: string;
  new_status?: string;
  notes?: string;
  created_at: string;
}

export interface CustomerPreferences {
  id: string;
  user_id: string;
  preferred_days: string[];
  preferred_time_ranges: string[];
  preferred_service_types: string[];
  special_notes?: string;
  last_service_date?: string;
  service_frequency_days?: number;
  created_at: string;
  updated_at: string;
}

// Booking Service Types
export enum BookingStatus {
  PENDING = 'pending',
  CONFIRMED = 'confirmed',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled',
}

export type { Service as ServiceType };
export type { SavedLocation as LocationType };
export type { CustomerDetails as CustomerType };
export type { Booking as BookingType };

export interface BookingService {
  createBooking(booking: Omit<Booking, 'id' | 'created_at' | 'updated_at'>): Promise<Booking>;
  updateBooking(id: string, booking: Partial<Booking>): Promise<Booking>;
  getBooking(id: string): Promise<Booking>;
  cancelBooking(id: string): Promise<Booking>;
  getUserBookings(userId: string): Promise<Booking[]>;

  getAvailableSlots(date: Date, serviceAreaId: string): Promise<TimeSlot[]>;
  reserveSlot(slotId: string, bookingId: string): Promise<boolean>;
  releaseSlot(slotId: string): Promise<boolean>;
  blockSlot(slotId: string, reason: string): Promise<boolean>;

  getPreferences(userId: string): Promise<CustomerPreferences>;
  updatePreferences(userId: string, preferences: Partial<CustomerPreferences>): Promise<CustomerPreferences>;
  getSmartSuggestions(userId: string): Promise<TimeSlot[]>;
}

const booking = () => {
  return null
};

export { booking };
undefined.displayName = 'undefined';
