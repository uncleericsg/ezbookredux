import * as React from 'react';

import { oneMapConfig } from '../../config/oneMapConfig';

export interface TokenResponse;

export interface TokenResponse;

export interface TokenResponse;

export interface TokenResponse {
  access_token: string;
  expiry_timestamp: number;
}

export class OneMapTokenService {
  private static instance: OneMapTokenService;
  private currentToken: string | null = null;
  private tokenExpiry: number | null = null;
  private refreshPromise: Promise<string> | null = null;

  private constructor() {}

  public static getInstance(): OneMapTokenService {
    if (!OneMapTokenService.instance) {
      OneMapTokenService.instance = new OneMapTokenService();
    }
    return OneMapTokenService.instance;
  }

  private async refreshToken(): Promise<string> {
    try {
      const response = await fetch(`${oneMapConfig.baseUrl}/privateapi/auth/post/getToken`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: oneMapConfig.email,
          password: oneMapConfig.password
        })
      });

      if (!response.ok) {
        throw new Error(`Failed to refresh token: ${response.statusText}`);
      }

      const data: TokenResponse = await response.json();
      this.currentToken = data.access_token;
      this.tokenExpiry = data.expiry_timestamp;

      return this.currentToken;
    } catch (error) {
      console.error('Error refreshing OneMap token:', error);
      throw new Error('Failed to refresh OneMap token');
    }
  }

  public async initialize(): Promise<void> {
    try {
      await this.getToken();
    } catch (error) {
      console.error('Failed to initialize OneMap token:', error);
      throw error;
    }
  }

  public async getToken(): Promise<string> {
    // If we have a valid token, return it
    if (this.currentToken && this.tokenExpiry && Date.now() < this.tokenExpiry) {
      return this.currentToken;
    }

    // If a refresh is already in progress, wait for it
    if (this.refreshPromise) {
      return this.refreshPromise;
    }

    // Start a new refresh
    try {
      this.refreshPromise = this.refreshToken();
      const token = await this.refreshPromise;
      return token;
    } finally {
      this.refreshPromise = null;
    }
  }

  public isTokenValid(): boolean {
    return !!(
      this.currentToken &&
      this.tokenExpiry &&
      Date.now() < this.tokenExpiry
    );
  }

  public getTokenExpiryTime(): number | null {
    return this.tokenExpiry;
  }
}