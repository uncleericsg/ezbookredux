import * as React from 'react';

import { oneMapConfig, OneMapSearchResponse, isOneMapError } from '../../config/oneMapConfig';
import { RateLimitError, NetworkError } from '../../types/errors';
import { NetworkUtils } from '../../utils/networkUtils';

import { OneMapTokenService } from './oneMapTokenService';

export class OneMapService {
  private static instance: OneMapService;
  private requestCount: number = 0;
  private lastRequestTime: number = Date.now();
  private tokenService: OneMapTokenService;

  private constructor() {
    this.tokenService = OneMapTokenService.getInstance();
    // Initialize token service
    this.tokenService.initialize().catch(error => {
      console.error('Failed to initialize OneMap token service:', error);
    });
  }

  public static getInstance(): OneMapService {
    if (!OneMapService.instance) {
      OneMapService.instance = new OneMapService();
    }
    return OneMapService.instance;
  }

  private async checkRateLimit(): Promise<void> {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;

    if (timeSinceLastRequest < oneMapConfig.minRequestInterval) {
      await new Promise(resolve => 
        setTimeout(resolve, oneMapConfig.minRequestInterval - timeSinceLastRequest)
      );
    }

    if (this.requestCount >= oneMapConfig.maxRequestsPerMinute) {
      throw new RateLimitError('OneMap API rate limit exceeded');
    }

    this.requestCount++;
    this.lastRequestTime = now;

    // Reset request count after a minute
    setTimeout(() => {
      this.requestCount--;
    }, 60000);
  }

  private async makeRequest(endpoint: string, params: Record<string, string>): Promise<Response> {
    await this.checkRateLimit();

    const token = await this.tokenService.getToken();
    const url = new URL(`${oneMapConfig.baseUrl}${endpoint}`);
    Object.entries(params).forEach(([key, value]) => {
      url.searchParams.append(key, value);
    });

    try {
      const response = await fetch(url.toString(), {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        if (response.status === 429) {
          throw new RateLimitError('OneMap API rate limit exceeded');
        }
        throw new NetworkError(`OneMap API request failed: ${response.statusText}`);
      }

      return response;
    } catch (error) {
      if (error instanceof RateLimitError) throw error;
      throw new NetworkError('Failed to connect to OneMap API');
    }
  }

  public async searchAddress(searchText: string): Promise<OneMapSearchResponse> {
    try {
      const response = await this.makeRequest('/commonapi/search', {
        searchVal: searchText,
        returnGeom: 'Y',
        getAddrDetails: 'Y'
      });

      const data = await response.json();
      
      if (isOneMapError(data)) {
        throw new Error(data.error || 'OneMap API error');
      }

      return data;
    } catch (error) {
      if (error instanceof RateLimitError || error instanceof NetworkError) {
        throw error;
      }
      throw new Error('Failed to search address');
    }
  }

  public async getAddressDetails(postalCode: string): Promise<OneMapSearchResponse> {
    try {
      const response = await this.makeRequest('/commonapi/search', {
        searchVal: postalCode,
        returnGeom: 'Y',
        getAddrDetails: 'Y'
      });

      const data = await response.json();
      
      if (isOneMapError(data)) {
        throw new Error(data.error || 'OneMap API error');
      }

      return data;
    } catch (error) {
      if (error instanceof RateLimitError || error instanceof NetworkError) {
        throw error;
      }
      throw new Error('Failed to get address details');
    }
  }
}
undefined.displayName = 'undefined';
