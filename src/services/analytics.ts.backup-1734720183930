import { getAnalytics, logEvent } from 'firebase/analytics';

type AnalyticsEvent = {
  name: string;
  params?: Record<string, string | number | boolean>;
};

interface IAnalyticsService {
  trackEvent(event: AnalyticsEvent): void;
  trackPageView(pageName: string): void;
  trackError(error: Error): void;
  trackUserAction(action: string, details?: Record<string, unknown>): void;
  trackBookingEvent(eventName: string, bookingId: string): void;
}

/**
 * Service for tracking analytics events
 */
class AnalyticsServiceImpl implements IAnalyticsService {
  private analytics;

  /**
   * Initializes the analytics service
   */
  constructor() {
    this.analytics = getAnalytics();
  }

  /**
   * Tracks an analytics event
   * @param event Event to track
   */
  trackEvent({ name, params = {} }: AnalyticsEvent): void {
    try {
      logEvent(this.analytics, name, params);
    } catch (error) {
      console.error('Error tracking event:', error);
    }
  }

  /**
   * Tracks a page view
   * @param pageName Name of the page
   */
  trackPageView(pageName: string): void {
    this.trackEvent({
      name: 'page_view',
      params: {
        page_title: pageName,
        page_location: window.location.href,
        page_path: window.location.pathname,
      },
    });
  }

  /**
   * Tracks an error
   * @param error Error to track
   */
  trackError(error: Error): void {
    this.trackEvent({
      name: 'error',
      params: {
        error_name: error.name,
        error_message: error.message,
        error_stack: error.stack || 'No stack trace',
      },
    });
  }

  /**
   * Tracks a user action
   * @param action Action to track
   * @param details Additional details about the action
   */
  trackUserAction(action: string, details: Record<string, unknown> = {}): void {
    this.trackEvent({
      name: 'user_action',
      params: {
        action,
        ...details,
      },
    });
  }

  /**
   * Tracks a booking event
   * @param eventName Name of the event
   * @param bookingId ID of the booking
   */
  trackBookingEvent(eventName: string, bookingId: string): void {
    this.trackEvent({
      name: eventName,
      params: {
        booking_id: bookingId,
        timestamp: new Date().toISOString(),
      },
    });
  }
}

/**
 * Singleton instance of the analytics service
 */
export const AnalyticsService = new AnalyticsServiceImpl();