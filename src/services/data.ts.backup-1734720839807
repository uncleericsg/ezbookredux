import type { User } from '../types';

export interface Address;

export interface Booking;


// Mock data for development
const mockBookings: Booking[] = [
  {
    id: 'booking-1',
    userId: 'user-1',
    addressId: 'addr-1',
    serviceType: 'maintenance',
    status: 'pending',
    scheduledDate: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
];

const mockAddresses: Address[] = [
  {
    id: 'addr-1',
    userId: 'user-1',
    street: '123 Main St',
    unit: '#01-01',
    postalCode: '123456',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
];

/**
 * Data service for mock development data
 * TODO: Replace with Supabase queries
 */
export const dataService = {
  /**
   * Get user's bookings
   * @param userId User ID
   * @returns List of bookings
   */
  getUserBookings: async (userId: string): Promise<Booking[]> => {
    await new Promise<void>(resolve => {
      globalThis.setTimeout(() => resolve(), 500);
    });
    return mockBookings.filter(booking => booking.userId === userId);
  },

  /**
   * Create new booking
   * @param bookingData Booking data
   * @returns Created booking
   */
  createBooking: async (bookingData: Omit<Booking, 'id' | 'createdAt' | 'updatedAt'>): Promise<Booking> => {
    await new Promise<void>(resolve => {
      globalThis.setTimeout(() => resolve(), 500);
    });
    return {
      ...bookingData,
      id: `booking-${Date.now()}`,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
  },

  /**
   * Update booking
   * @param bookingId Booking ID
   * @param data Updated booking data
   * @returns Updated booking
   */
  updateBooking: async (bookingId: string, data: Partial<Booking>): Promise<Booking> => {
    await new Promise<void>(resolve => {
      globalThis.setTimeout(() => resolve(), 500);
    });
    return {
      ...mockBookings[0],
      ...data,
      id: bookingId,
      updatedAt: new Date().toISOString()
    };
  },

  /**
   * Get user's addresses
   * @param userId User ID
   * @returns List of addresses
   */
  getUserAddresses: async (userId: string): Promise<Address[]> => {
    await new Promise<void>(resolve => {
      globalThis.setTimeout(() => resolve(), 500);
    });
    return mockAddresses.filter(address => address.userId === userId);
  },

  /**
   * Add new address
   * @param userId User ID
   * @param addressData Address data
   * @returns Created address
   */
  addAddress: async (userId: string, addressData: Omit<Address, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Address> => {
    await new Promise<void>(resolve => {
      globalThis.setTimeout(() => resolve(), 500);
    });
    return {
      ...addressData,
      id: `addr-${Date.now()}`,
      userId,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
  },

  /**
   * Update address
   * @param addressId Address ID
   * @param data Updated address data
   * @returns Updated address
   */
  updateAddress: async (addressId: string, data: Partial<Address>): Promise<Address> => {
    await new Promise<void>(resolve => {
      globalThis.setTimeout(() => resolve(), 500);
    });
    return {
      ...mockAddresses[0],
      ...data,
      id: addressId,
      updatedAt: new Date().toISOString()
    };
  },

  /**
   * Get user profile
   * @param userId User ID
   * @returns User profile
   */
  getProfile: async (userId: string): Promise<User> => {
    await new Promise<void>(resolve => {
      globalThis.setTimeout(() => resolve(), 500);
    });
    return {
      id: userId,
      email: 'user@example.com',
      name: 'John Doe',
      phone: '+65 1234 5678',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
  },

  /**
   * Update user profile
   * @param userId User ID
   * @param data Updated profile data
   * @returns Updated profile
   */
  updateProfile: async (userId: string, data: Partial<User>): Promise<User> => {
    await new Promise<void>(resolve => {
      globalThis.setTimeout(() => resolve(), 500);
    });
    return {
      id: userId,
      email: 'user@example.com',
      name: 'John Doe',
      phone: '+65 1234 5678',
      ...data,
      updatedAt: new Date().toISOString()
    };
  }
};
undefined.displayName = 'undefined';