import * as React from 'react';

import { supabase } from '@/lib/database';

import { Team, TeamMember } from './types';

/**
 * Team management service
 */
export class TeamManagementService {
  /**
   * Create a new team
   * @param name Team name
   * @returns Promise<Team>
   */
  async createTeam(name: string): Promise<Team> {
    try {
      const { data, error } = await supabase
        .from('teams')
        .insert({ name, active: true })
        .select()
        .single();

      if (error) throw error;
      if (!data) throw new Error('No data returned from team creation');

      return data;
    } catch (error) {
      console.error('Error creating team:', error);
      throw new Error('Failed to create team');
    }
  }

  /**
   * Get a team by ID
   * @param teamId Team ID
   * @returns Promise<Team | null>
   */
  async getTeam(teamId: string): Promise<Team | null> {
    try {
      const { data, error } = await supabase
        .from('teams')
        .select('*')
        .eq('id', teamId)
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error fetching team:', error);
      throw new Error('Failed to fetch team');
    }
  }

  /**
   * Get all teams
   * @returns Promise<Team[]>
   */
  async getAllTeams(): Promise<Team[]> {
    try {
      const { data, error } = await supabase
        .from('teams')
        .select('*')
        .order('name');

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error fetching teams:', error);
      throw new Error('Failed to fetch teams');
    }
  }

  /**
   * Update a team
   * @param teamId Team ID
   * @param updates Partial team data to update
   * @returns Promise<Team>
   */
  async updateTeam(teamId: string, updates: Partial<Team>): Promise<Team> {
    try {
      const { data, error } = await supabase
        .from('teams')
        .update(updates)
        .eq('id', teamId)
        .select()
        .single();

      if (error) throw error;
      if (!data) throw new Error('No data returned from team update');

      return data;
    } catch (error) {
      console.error('Error updating team:', error);
      throw new Error('Failed to update team');
    }
  }

  /**
   * Delete a team
   * @param teamId Team ID
   */
  async deleteTeam(teamId: string): Promise<void> {
    try {
      const { error } = await supabase
        .from('teams')
        .delete()
        .eq('id', teamId);

      if (error) throw error;
    } catch (error) {
      console.error('Error deleting team:', error);
      throw new Error('Failed to delete team');
    }
  }

  /**
   * Add a member to a team
   * @param teamId Team ID
   * @param member Team member data
   * @returns Promise<TeamMember>
   */
  async addTeamMember(teamId: string, member: Omit<TeamMember, 'id'>): Promise<TeamMember> {
    try {
      const { data, error } = await supabase
        .from('team_members')
        .insert({ ...member, team_id: teamId })
        .select()
        .single();

      if (error) throw error;
      if (!data) throw new Error('No data returned from member creation');

      return data;
    } catch (error) {
      console.error('Error adding team member:', error);
      throw new Error('Failed to add team member');
    }
  }

  /**
   * Update a team member
   * @param memberId Member ID
   * @param updates Partial member data to update
   * @returns Promise<TeamMember>
   */
  async updateTeamMember(memberId: string, updates: Partial<TeamMember>): Promise<TeamMember> {
    try {
      const { data, error } = await supabase
        .from('team_members')
        .update(updates)
        .eq('id', memberId)
        .select()
        .single();

      if (error) throw error;
      if (!data) throw new Error('No data returned from member update');

      return data;
    } catch (error) {
      console.error('Error updating team member:', error);
      throw new Error('Failed to update team member');
    }
  }

  /**
   * Remove a member from a team
   * @param memberId Member ID
   */
  async removeTeamMember(memberId: string): Promise<void> {
    try {
      const { error } = await supabase
        .from('team_members')
        .delete()
        .eq('id', memberId);

      if (error) throw error;
    } catch (error) {
      console.error('Error removing team member:', error);
      throw new Error('Failed to remove team member');
    }
  }

  /**
   * Set team active status
   * @param teamId Team ID
   * @param active Active status
   * @returns Promise<Team>
   */
  async setTeamStatus(teamId: string, active: boolean): Promise<Team> {
    return this.updateTeam(teamId, { active });
  }

  /**
   * Get team members
   * @param teamId Team ID
   * @returns Promise<TeamMember[]>
   */
  async getTeamMembers(teamId: string): Promise<TeamMember[]> {
    try {
      const { data, error } = await supabase
        .from('team_members')
        .select('*')
        .eq('team_id', teamId)
        .order('name');

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error fetching team members:', error);
      throw new Error('Failed to fetch team members');
    }
  }
}

export default TeamManagementService;