import axios, { AxiosInstance, AxiosRequestConfig, AxiosProgressEvent } from 'axios';

import { handleApiError } from '../utils/apiErrors';
import { retry } from '../utils/retry';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

if (!API_BASE_URL) {
  throw new Error('Missing API base URL environment variable');
}

/**
 * Service for making API requests with axios
 */
export class ApiService {
  private readonly api: AxiosInstance;

  constructor() {
    this.api = axios.create({
      baseURL: API_BASE_URL,
      headers: {
        'Content-Type': 'application/json'
      }
    });

    // Add request interceptor for auth token
    this.api.interceptors.request.use(
      (config) => {
        const token = globalThis.localStorage?.getItem('auth_token');
        if (token && config.headers) {
          config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
      },
      (error) => Promise.reject(error)
    );

    // Add response interceptor for error handling
    this.api.interceptors.response.use(
      (response) => response,
      (error) => Promise.reject(handleApiError(error))
    );
  }

  /**
   * Make a GET request
   * @param url URL to request
   * @param config Optional axios config
   * @returns Response data
   */
  public async get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {
    const response = await retry(() => this.api.get<T>(url, config));
    return response.data;
  }

  /**
   * Make a POST request
   * @param url URL to request
   * @param data Data to send
   * @param config Optional axios config
   * @returns Response data
   */
  public async post<T>(url: string, data?: unknown, config?: AxiosRequestConfig): Promise<T> {
    const response = await retry(() => this.api.post<T>(url, data, config));
    return response.data;
  }

  /**
   * Make a PUT request
   * @param url URL to request
   * @param data Data to send
   * @param config Optional axios config
   * @returns Response data
   */
  public async put<T>(url: string, data?: unknown, config?: AxiosRequestConfig): Promise<T> {
    const response = await retry(() => this.api.put<T>(url, data, config));
    return response.data;
  }

  /**
   * Make a PATCH request
   * @param url URL to request
   * @param data Data to send
   * @param config Optional axios config
   * @returns Response data
   */
  public async patch<T>(url: string, data?: unknown, config?: AxiosRequestConfig): Promise<T> {
    const response = await retry(() => this.api.patch<T>(url, data, config));
    return response.data;
  }

  /**
   * Make a DELETE request
   * @param url URL to request
   * @param config Optional axios config
   * @returns Response data
   */
  public async delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> {
    const response = await retry(() => this.api.delete<T>(url, config));
    return response.data;
  }

  /**
   * Upload a file
   * @param url URL to upload to
   * @param file File to upload
   * @param onProgress Progress callback
   * @returns Response data
   */
  public async uploadFile<T>(
    url: string,
    file: File,
    onProgress?: (progress: number) => void
  ): Promise<T> {
    const formData = new FormData();
    formData.append('file', file);

    const config: AxiosRequestConfig = {
      headers: {
        'Content-Type': 'multipart/form-data'
      },
      onUploadProgress: (progressEvent: AxiosProgressEvent) => {
        if (onProgress && progressEvent.total) {
          const progress = (progressEvent.loaded / progressEvent.total) * 100;
          onProgress(progress);
        }
      }
    };

    return this.post<T>(url, formData, config);
  }
}

const apiService = new ApiService();

export const submitServiceRating = async (
  serviceId: string,
  rating: number,
  feedback?: string
): Promise<void> => {
  await apiService.post('/service-ratings', {
    serviceId,
    rating,
    feedback
  });
};

export { API_BASE_URL };
undefined.displayName = 'undefined';
