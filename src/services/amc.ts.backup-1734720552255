import axios from 'axios';
import { toast } from 'sonner';

import { resetVisitLabels } from './repairShopr';

import type { AMCPackage, ServiceVisit } from '../types';

export interface RenewalStatus;


interface RenewalStatus {
  shouldRemind: boolean;
  isLastVisit: boolean;
}

/**
 * Check the renewal status of an AMC package based on service visits
 * @param visits List of service visits
 * @returns Object containing renewal status flags
 */
export function checkRenewalStatus(visits: ServiceVisit[]): RenewalStatus {
  const completedVisits = visits.filter(v => v.status === 'completed').length;
  const scheduledVisits = visits.filter(v => v.status === 'scheduled').length;
  const totalVisits = completedVisits + scheduledVisits;

  return {
    shouldRemind: totalVisits === visits.length - 1,
    isLastVisit: totalVisits === visits.length
  };
}

/**
 * Renew an AMC package
 * @param packageId ID of the AMC package to renew
 */
export async function renewAMC(packageId: string): Promise<void> {
  if (import.meta.env.DEV) {
    await new Promise(resolve => globalThis.setTimeout(resolve, 1000));
    return;
  }

  try {
    // First renew the AMC package
    await axios.post('/api/amc/renew', { packageId });
    // Then reset visit labels in RepairShopr
    await resetVisitLabels(packageId);
  } catch (error) {
    console.error('Failed to renew AMC: ', error);
    throw error;
  }
}

/**
 * Get AMC packages for a user
 * @param userId ID of the user
 * @returns Promise resolving to array of AMC packages
 */
export async function getAMCPackages(userId: string): Promise<AMCPackage[]> {
  if (import.meta.env.DEV) {
    return [
      {
        id: 'mock-1',
        name: 'Standard AMC',
        description: 'Regular maintenance package',
        price: 299,
        duration: 12,
        visits: 4,
        features: ['Quarterly servicing', '24/7 support', 'Parts discount']
      }
    ];
  }

  try {
    const response = await axios.get(`/api/service-visits/${userId}`);
    const visits = response.data;

    // Check renewal status
    const { shouldRemind, isLastVisit } = checkRenewalStatus(visits);

    if (shouldRemind) {
      toast.warning(
        'Your next service will be your final AMC visit. Please renew your package to continue enjoying AMC benefits.',
        { duration: 10000 }
      );
    }

    if (isLastVisit) {
      toast.error(
        'This is your final AMC visit. Renew now to maintain continuous coverage and early renewal benefits.',
        { duration: 10000 }
      );
    }

    return visits;
  } catch (error) {
    console.error('Failed to fetch service visits: ', error);
    return [];
  }
}
undefined.displayName = 'undefined';