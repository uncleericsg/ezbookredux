import * as React from 'react';

import { supabase } from '@/lib/supabase';
import type { Profile, Address } from '@/types/supabase';

export const profileService = {
  // Get user profile
  async getProfile(userId: string): Promise<Profile | null> {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    if (error) throw error;
    return data;
  },

  // Update user profile
  async updateProfile(userId: string, updates: Partial<Profile>): Promise<Profile> {
    const { data, error } = await supabase
      .from('profiles')
      .update(updates)
      .eq('id', userId)
      .select()
      .single();
    if (error) throw error;
    return data;
  },

  // Get user addresses
  async getUserAddresses(userId: string): Promise<Address[]> {
    const { data, error } = await supabase
      .from('addresses')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    if (error) throw error;
    return data;
  },

  // Add new address
  async addAddress(address: Omit<Address, 'id' | 'created_at'>): Promise<Address> {
    const { data, error } = await supabase
      .from('addresses')
      .insert([address])
      .select()
      .single();
    if (error) throw error;
    return data;
  },

  // Update address
  async updateAddress(addressId: string, updates: Partial<Address>): Promise<Address> {
    const { data, error } = await supabase
      .from('addresses')
      .update(updates)
      .eq('id', addressId)
      .select()
      .single();
    if (error) throw error;
    return data;
  },

  // Delete address
  async deleteAddress(addressId: string): Promise<void> {
    const { error } = await supabase
      .from('addresses')
      .delete()
      .eq('id', addressId);
    if (error) throw error;
  },

  // Set default address
  async setDefaultAddress(userId: string, addressId: string): Promise<Address> {
    // First, unset all default addresses for this user;
    await supabase
      .from('addresses')
      .update({ is_default: false })
      .eq('user_id', userId);
    // Then set the new default address;
    const { data, error } = await supabase
      .from('addresses')
      .update({ is_default: true })
      .eq('id', addressId)
      .select()
      .single();
    if (error) throw error;
    return data;
  }
};