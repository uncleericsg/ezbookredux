import * as React from 'react';

import { supabase } from '@/lib/supabase';
import type { Booking } from '@/types/supabase';

export const bookingService = {
  // Get all bookings for a specific date range;
  async getBookingsForDateRange(startDate: Date, endDate: Date): Promise<Booking[]> {
    const { data, error } = await supabase
      .from('bookings')
      .select('*')
      .gte('scheduled_start', startDate.toISOString())
      .lte('scheduled_end', endDate.toISOString())
      .order('scheduled_start', { ascending: true });
    
    if (error) throw error;
    return data;
  },
  // Check if a time slot is available;
  async isTimeSlotAvailable(startTime: Date, endTime: Date, serviceId: string): Promise<boolean> {
    const { data, error } = await supabase
      .from('bookings')
      .select('id')
      .or(`scheduled_start.lte.${endTime.toISOString()},scheduled_end.gte.${startTime.toISOString()}`)
      .not('status', 'eq', 'cancelled');
    
    if (error) throw error;
    return data.length === 0;
  },
  // Create a new booking;
  async createBooking(bookingData: Omit<Booking, 'id' | 'created_at' | 'updated_at'>): Promise<Booking> {
    const { data, error } = await supabase
      .from('bookings')
      .insert([bookingData])
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },
  // Update booking status;
  async updateBookingStatus(bookingId: string, status: string): Promise<Booking> {
    const { data, error } = await supabase
      .from('bookings')
      .update({ status })
      .eq('id', bookingId)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },
  // Get user's booking history;
  async getUserBookings(userId: string): Promise<Booking[]> {
    const { data, error } = await supabase
      .from('bookings')
      .select(`
        *,
        service: services(*),
        address: addresses(*)
      `)
      .eq('user_id', userId)
      .order('scheduled_start', { ascending: false });
    
    if (error) throw error;
    return data;
  },
  // Get specific booking details;
  async getBookingById(bookingId: string): Promise<Booking | null> {
    const { data, error } = await supabase
      .from('bookings')
      .select(`
        *,
        service: services(*),
        user: profiles(*)
      `)
      .eq('id', bookingId)
      .single();
    
    if (error) throw error;
    return data;
  }
};