import SibApiV3Sdk from 'sib-api-v3-sdk';

interface EmailRecipient {
  email: string;
  name?: string;
}

interface SendEmailParams {
  to: EmailRecipient[];
  templateId: number;
  params?: Record<string, unknown>;
  subject?: string;
}

interface BookingDetails {
  bookingId: string;
  serviceType: string;
  dateTime: string;
  address: string;
  price: number;
}

// Initialize Brevo API client
const defaultClient = SibApiV3Sdk.ApiClient.instance;
const apiKey = defaultClient.authentications['api-key'];
apiKey.apiKey = import.meta.env.VITE_BREVO_API_KEY;
const apiInstance = new SibApiV3Sdk.TransactionalEmailsApi();

/**
 * Service for sending transactional emails via Brevo
 */
export class BrevoService {
  /**
   * Send a transactional email using a template
   * @param params Email parameters
   * @returns Promise resolving to API response
   */
  public async sendTemplateEmail({
    to,
    templateId,
    params,
    subject
  }: SendEmailParams): Promise<unknown> {
    const sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();
    sendSmtpEmail.to = to;
    sendSmtpEmail.templateId = templateId;
    
    if (params) {
      sendSmtpEmail.params = params;
    }
    if (subject) {
      sendSmtpEmail.subject = subject;
    }

    try {
      return await apiInstance.sendTransacEmail(sendSmtpEmail);
    } catch (error) {
      console.error('Error sending email:', error);
      throw error;
    }
  }

  /**
   * Send booking confirmation email
   * @param email Recipient email
   * @param name Recipient name
   * @param bookingDetails Booking details
   */
  public async sendBookingConfirmation(
    email: string,
    name: string,
    bookingDetails: BookingDetails
  ): Promise<unknown> {
    return this.sendTemplateEmail({
      to: [{ email, name }],
      templateId: 1, // Replace with actual template ID
      params: {
        booking_id: bookingDetails.bookingId,
        service_type: bookingDetails.serviceType,
        date_time: bookingDetails.dateTime,
        address: bookingDetails.address,
        price: bookingDetails.price
      }
    });
  }

  /**
   * Send OTP verification email
   * @param email Recipient email
   * @param otp One-time password
   */
  public async sendOTPEmail(email: string, otp: string): Promise<unknown> {
    return this.sendTemplateEmail({
      to: [{ email }],
      templateId: 2, // Replace with actual template ID
      params: { otp }
    });
  }

  /**
   * Send welcome email after signup
   * @param email Recipient email
   * @param name Recipient name
   */
  public async sendWelcomeEmail(email: string, name: string): Promise<unknown> {
    return this.sendTemplateEmail({
      to: [{ email, name }],
      templateId: 3, // Replace with actual template ID
      params: { name }
    });
  }
}

export type { SendEmailParams, EmailRecipient, BookingDetails };