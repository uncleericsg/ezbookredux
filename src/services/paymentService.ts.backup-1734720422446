import { loadStripe, Stripe } from '@stripe/stripe-js';
import axios from 'axios';

import { PaymentError } from '../types/payment';
import { ServiceRequest } from '../types/service';

export interface CreatePaymentIntentParams;
export interface CreatePaymentIntentResponse;

export interface CreatePaymentIntentParams;
export interface CreatePaymentIntentResponse;

export interface CreatePaymentIntentParams;
export interface CreatePaymentIntentResponse;

let stripeInstance: Stripe | null = null;

/**
 * Initialize Stripe instance
 * @returns Stripe instance or null if initialization fails
 */
export const initializeStripe = async (): Promise<Stripe | null> => {
  if (!stripeInstance) {
    try {
      const stripeKey = import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY;
      if (!stripeKey) {
        console.error('No Stripe key provided');
        return null;
      }
      stripeInstance = await loadStripe(stripeKey);
      if (!stripeInstance) {
        console.error('Stripe instance creation failed');
        return null;
      }
    } catch (error) {
      console.error('Stripe initialization error: ', error);
      return null;
    }
  }
  return stripeInstance;
};

/**
 * Parameters for creating a payment intent
 */
export interface CreatePaymentIntentParams {
  amount: number;
  currency: string;
  description: string;
  metadata: {
    serviceId: string;
    appointmentDate: string;
    userEmail: string;
  };
}

/**
 * Response from creating a payment intent
 */
export interface CreatePaymentIntentResponse {
  clientSecret: string;
  id: string;
}

/**
 * Create a payment intent
 * @param params Payment intent parameters
 * @returns Payment intent response
 */
export const createPaymentIntent = async (
  params: CreatePaymentIntentParams
): Promise<CreatePaymentIntentResponse> => {
  try {
    const { amount, currency, description, metadata } = params;
     
    console.log('Creating payment intent: ', params);

    // Amount should already be in cents from PaymentStep
    const amountInCents = Math.round(amount);

    // Validate amount
    if (amountInCents <= 0) {
      console.error('Invalid amount: ', amountInCents);
      throw new Error('Invalid payment amount');
    }

    if (amountInCents > 1000000) {
      console.error('Amount too large: ', amountInCents);
      throw new Error('Invalid payment amount');
    }

    const response = await axios.post('/api/payments/create-payment-intent', {
      amount: amountInCents,
      currency,
      description,
      metadata
    });

     
    console.log('Payment intent response: ', response.data);

    if (!response.data || !response.data.clientSecret) {
      console.error('Invalid response data: ', response.data);
      throw new Error('Invalid response from payment server');
    }

    return {
      clientSecret: response.data.clientSecret,
      id: response.data.id
    };
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Axios error details: ', {
        message: error.message,
        response: error.response?.data
      });
      const errorMessage =
        error.response?.data?.error || error.message || 'Failed to initialize payment';
      throw new Error(errorMessage);
    }
    console.error('Error creating payment intent: ', error);
    throw error;
  }
};

/**
 * Handle successful payment
 * @param paymentIntent Payment intent object
 * @param serviceRequest Service request object
 */
export const handlePaymentSuccess = async (
  paymentIntent: { id: string; status: string },
  serviceRequest: ServiceRequest
): Promise<void> => {
  try {
     
    console.log('Handling payment success: ', paymentIntent);

    // Send confirmation to backend
    const confirmResponse = await axios.post('/api/payments/confirm', {
      paymentIntentId: paymentIntent.id
    });

    if (!confirmResponse.data.success) {
      throw new Error('Payment confirmation failed');
    }

    // Add to service queue if payment is successful
    if (paymentIntent.status === 'succeeded') {
      try {
        await addToServiceQueue(serviceRequest);
      } catch (queueError) {
        console.error('Error adding to service queue: ', queueError);
        // Don't throw here, as payment was successful
      }
    }
  } catch (error) {
    console.error('Error handling payment success: ', error);
    throw error; // Rethrow to be handled by the caller
  }
};

/**
 * Handle payment error
 * @param error Payment error object
 */
export const handlePaymentError = async (error: PaymentError): Promise<void> => {
  console.error('Payment error: ', error);
  try {
    await axios.post('/api/payments/error', {
      error: {
        code: error.code,
        message: error.message,
        type: error.type
      }
    });
  } catch (err) {
    console.error('Failed to log payment error: ', err);
  }
};

/**
 * Add service request to queue
 * @param serviceRequest Service request object
 */
export const addToServiceQueue = async (serviceRequest: ServiceRequest): Promise<void> => {
  try {
    const response = await axios.post('/api/payments/queue', serviceRequest);
    if (!response.data.success) {
      throw new Error(response.data.error || 'Failed to schedule service');
    }
  } catch (error) {
    console.error('Error adding to service queue: ', error);
    throw new Error('Failed to schedule service');
  }
};

/**
 * Validate payment amount
 * @param amount Amount to validate
 * @returns True if amount is valid
 */
export const validatePaymentAmount = (amount: number): boolean => {
  return amount > 0 && amount <= 10000; // Maximum $10,000 SGD
};

/**
 * Format amount in SGD
 * @param amount Amount to format
 * @returns Formatted amount string
 */
export const formatAmountSGD = (amount: number): string => {
  return new Intl.NumberFormat('en-SG', {
    style: 'currency',
    currency: 'SGD'
  }).format(amount);
};