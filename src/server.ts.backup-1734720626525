/* eslint-disable no-console */
/* eslint-disable no-undef */
import util from 'util';

import cors from 'cors';
import { config } from 'dotenv';
import express from 'express';
import helmet from 'helmet';

import { stripeRoutes } from '@/api/stripe';

// Monkey-patch util._extend to use Object.assign
if (util._extend) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (util as any)._extend = Object.assign;
}

config(); // Load environment variables

const app = express();
const port = process.env.PORT || 3001;

// Serve static files from directory
app.use(express.static('public'));

// Serve fonts from local directory
app.use('/fonts', express.static('public/fonts'));

// Webhook handling needs raw body
app.use('/api/payments/webhook', express.raw({ type: 'application/json' }));

// Middleware for parsing JSON payloads
app.use(express.json());

// CORS configuration
const corsOptions = {
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
};

app.use(cors(corsOptions));

// Use Stripe routes
app.use('/api/payments', stripeRoutes);

// Basic security headers
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'", "'unsafe-inline'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        imgSrc: ["'self'", 'data:', 'https:'],
        fontSrc: ["'self'", 'data:', 'https:']
      }
    }
  })
);

// Health check endpoint
app.get('/health', (_req, res) => {
  return res.json({ status: 'healthy' });
});

// Error handling middleware
app.use((err: Error, req: express.Request, res: express.Response, _next: express.NextFunction) => {
  console.error('Server error: ', err);

  // Create safe error response
  const errorResponse = {
    error: err.message,
    ...(process.env.NODE_ENV !== 'production' && {
      stack: err.stack
    })
  };

  res.status(500).json(errorResponse);
});

const server = () => {
  app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
  });
};

server();

export { app, port, corsOptions, server };

undefined.displayName = 'undefined';