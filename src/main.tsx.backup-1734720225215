/* eslint-disable no-undef */
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import * as React from 'react';
import { Suspense } from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';

import { LoadingScreen } from './components/LoadingScreen';
import { ErrorBoundary } from './components/error-boundary/ErrorBoundary';
import RouterComponent from './router';
import { store } from './store';

import './index.css';

export interface _MainProps;

export interface _MainProps extends React.HTMLAttributes<HTMLElement> {
  className?: string;
  children?: React.ReactNode;
}

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutes
    },
  },
});

const rootElement = document.getElementById('root');
if (!rootElement) throw new Error('Failed to find the root element');

const root = ReactDOM.createRoot(rootElement);

const main = () =>
  root.render(
    <React.StrictMode>
      <ErrorBoundary>
        <Provider store={store}>
          <QueryClientProvider client={queryClient}>
            <Suspense fallback={<LoadingScreen />}>
              <RouterComponent />
            </Suspense>
          </QueryClientProvider>
        </Provider>
      </ErrorBoundary>
    </React.StrictMode>
  );

main();

export { main };
export default main;
