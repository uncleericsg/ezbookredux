// Snapshot of ServiceCategorySelection.tsx as of 2024-12-12;
// This file contains the complete design, layout, and component structure;
import React, { useState, useEffect, useRef } from 'react';
import {
  AirVent, Wrench, ShieldCheck, Star, Calendar, CheckCircle,
  Shield, Clock, Timer, ThumbsUp, Users, BadgeCheck
} from 'lucide-react';
import { useUser } from '../contexts/UserContext';
import { useServiceHistory } from '../hooks/useServiceHistory';
import { differenceInDays } from 'date-fns';
import { categoryMapper } from '../lib/categoryMapper';
import { toast } from 'sonner';
import { useNavigate } from '../hooks/useRouterTransition';
import { useServiceRating } from '../hooks/useServiceRating';
import ServiceRating from '../components/ServiceRating';
import TrustIndicators from '../components/TrustIndicators';
import { motion } from 'framer-motion';
import { BUSINESS_RULES } from '../constants';
import '../styles/home.css';
import CountUp from 'react-countup';
export interface PricingTier extends React.HTMLAttributes<HTMLDivElement> { { 
  units: string;, price: number;
  highlight?: string
}
export interface ServiceCategory extends React.HTMLAttributes<HTMLDivElement> { { 
  id: string;, name: string;
  ,description: string;, type: string;
  ,price: number | null;
  icon: any;
  duration?: string;
  rating?: number;
  reviewCount?: number;
  popular?: boolean
}
const ServiceCategorySelection = () => {
  const navigate = useNavigate();
  const { user } = useUser();
  const { submitRating } = useServiceRating();
  const { visits } = useServiceHistory(user?.id || '');
  const isAmcCustomer = user?.amcStatus === 'active';
  const completedVisits = visits.filter(v => v.status === 'completed').length;
  const [showRating, setShowRating] = useState(false);
  const [hasAnimated, setHasAnimated] = useState(false);
  const counterRef = useRef<HTMLDivElement>(null);
  const getDaysUntilService = () => {
    if (!user?.nextServiceDate) return null;
    const nextService = new Date(user.nextServiceDate);
    const today = new Date();
    const days = differenceInDays(nextService, today);
    return days > 0 ? days;
  };
  const daysUntilService = getDaysUntilService();
  const categories: ServiceCategory[] = [;
    { 
      id;
    },
    { 
      id;
    },
    { 
      id;
  ];
  // Dynamic category addition for AMC customers;
  if (isAmcCustomer) {
    categories.unshift({ 
      id;
  const features = [;
    {  icon: CheckCircle, text: 'Professional Service' },
    {  icon: Users, text: 'Expert Technicians' },
    {  icon: BadgeCheck, text: 'Quality Guarantee' },
    {  icon;
  ];
  const testimonials = [;
    { 
      id;
    },
    { 
      id;
    },
    { 
      id;
    },
    { 
      id;
  ];
  // Event handlers and business logic;
  const handleCategorySelect = (categoryId: string, price: number | null) => {
    if (user) {
      const appointmentType = categoryMapper.getAppointmentTypeDetails(categoryId);
      if (!appointmentType) {
        toast.error('Invalid service type');
        return
      }
      navigate('/schedule', { ;
        state: { ;
          categoryId,
          price;
    } else {
      navigate('/booking', { 
        state: { categoryId, price }
      })
    }
  };
  const handleRatingClick = () => {
    if (!user) {
      toast.error('Please log in to rate our service');
      return
    }
    setShowRating(true)
  };
  const handleRatingSubmit = async (rating: number, feedback?: string) => {
    await submitRating('latest-service', rating, feedback);
    setShowRating(false);
    if (rating >= 4) {
      const shouldReview = window.confirm(;
        'Thank you for your positive feedback! Would you like to share your experience on Google?';
      );
      if (shouldReview) {
        window.open('https;
  };
  useEffect(() => {
    const observer = new IntersectionObserver(;
      (entries) => {
        if (entries[0].isIntersecting && !hasAnimated) {
          setHasAnimated(true)
        }
      },
      {  threshold;
    );
    if (counterRef.current) {
      observer.observe(counterRef.current)
    }
    return () => observer.disconnect()
  }, [hasAnimated]);
  return (;
    <div className="service-category-selection">;
      {/* Header Section */}
      <div className="header-section">;
        <h1>Professional Aircon Services</h1>;
        <p className="subtitle">Choose from our range of expert services</p>;
      </div>;
      {/* Trust Indicators */}
      <TrustIndicators features={features} />;
      {/* Service Categories Grid */}
      <div className="service-categories-grid">;
        {categories.map((category) => (;
          <motion.div;
            key={category.id}
            className={`service-card ${category.popular ? 'popular' : ''}`}
            whileHover={{  scale;
            whileTap={{  scale;
            onClick={() => handleCategorySelect(category.id, category.price)}
          >;
            {category.popular && <div className="popular-badge">Most Popular</div>}
            <div className="card-header">;
              <category.icon className="category-icon" />;
              <h3>{category.name}</h3>;
            </div>;
            <p className="description">{category.description}</p>;
            <div className="service-details">;
              {category.price !== null ? (;
                <div className="price">From ${category.price}</div>;
              ) : (;
                <div className="price amc">AMC Package</div>;
              )}
              {category.duration && (;
                <div className="duration">;
                  <Clock className="icon" />;
                  {category.duration}
                </div>;
              )}
              {category.rating && (;
                <div className="rating">;
                  <Star className="icon" />;
                  {category.rating} ({category.reviewCount});
                </div>;
              )}
            </div>;
          </motion.div>;
        ))}
      </div>;
      {/* Testimonials Section */}
      <div className="testimonials-section">;
        <h2>What Our Customers Say</h2>;
        <div className="testimonials-grid">;
          {testimonials.map((testimonial) => (;
            <motion.div;
              key={testimonial.id}
              className="testimonial-card";
              initial={{  opacity;
              animate={{  opacity;
              transition={{  duration;
            >;
              <div className="testimonial-rating">;
                {[...Array(testimonial.rating)].map((_, i) => (;
                  <Star key={i} className="star-icon filled" />;
                ))}
              </div>;
              <p className="testimonial-text">{testimonial.text}</p>;
              <div className="testimonial-author">;
                <strong>{testimonial.name}</strong>;
                <span className="testimonial-date">{testimonial.date}</span>;
              </div>;
            </motion.div>;
          ))}
        </div>;
      </div>;
      {/* Rating Dialog */}
      {showRating && (;
        <ServiceRating;
          onSubmit={handleRatingSubmit}
          onClose={() => setShowRating(false)}
        />;
      )}
    </div>;
  )
};
const ServiceCategorySelection_snapshot = () => {
  return null
};

// Additional exports;

// Additional exports;
{ ServiceCategorySelection, navigate, isAmcCustomer, completedVisits, counterRef, getDaysUntilService, nextService, today, days, daysUntilService, categories, features, testimonials, handleCategorySelect, appointmentType, handleRatingClick, handleRatingSubmit, shouldReview, observer, ServiceCategorySelection_snapshot };

// Type exports;
{ ServiceCategorySelection_snapshot };
ServiceCategorySelection_snapshot;
;
export { ServiceCategorySelection, ServiceCategorySelection_snapshot, navigate, isAmcCustomer, completedVisits, counterRef, getDaysUntilService, nextService, today, days, daysUntilService, categories, features, testimonials, handleCategorySelect, appointmentType, handleRatingClick, handleRatingSubmit, shouldReview, observer };

export type { PricingTier, ServiceCategory };

