generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

model Payment {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  paymentIntentId String    @map("payment_intent_id") @db.VarChar
  amount          Decimal   @db.Decimal(10, 2)
  tip_amount      Decimal?  @default(0) @db.Decimal(10, 2)
  currency        String?   @default("sgd") @db.VarChar
  status          String?   @default("pending") @db.VarChar
  serviceId       String?   @map("service_id") @db.Uuid
  customerId      String?   @map("customer_id") @db.Uuid
  bookingId       String?   @map("booking_id") @db.Uuid
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  booking         Booking?  @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer        Profile?  @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service         Service?  @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("payments")
  @@schema("public")
}

model Booking {
  id                  String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt           DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  status              String
  serviceId           String              @map("service_id") @db.Uuid
  customer_info       Json?
  service_title       String?             @db.VarChar
  service_price       Decimal?            @db.Decimal(10, 2)
  service_duration    String?             @db.VarChar
  service_description String?
  brands              String[]            @db.VarChar
  issues              String[]            @db.VarChar
  other_issue         String?
  is_amc              Boolean?            @default(false)
  scheduled_datetime  DateTime?           @db.Timestamptz(6)
  scheduled_timeslot  String?             @db.VarChar
  payment_status      String?             @db.VarChar
  payment_intent_id   String?             @db.VarChar
  total_amount        Decimal?            @db.Decimal(10, 2)
  tip_amount          Decimal?            @default(0) @db.Decimal(10, 2)
  metadata            Json?
  address_id          String?             @db.Uuid
  address_snapshot    Json?
  booking_reference   BookingReference?
  address             Address?            @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service             Service             @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments            Payment[]
  reviews            Review[]

  @@index([payment_status], map: "idx_bookings_payment_status")
  @@index([scheduled_datetime], map: "idx_bookings_scheduled_datetime")
  @@index([status], map: "idx_bookings_status")
  @@map("bookings")
  @@schema("public")
}

model Service {
  id                  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title               String
  description         String
  price               Int
  duration            String
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  appointment_type_id String?   @unique @db.VarChar
  usual_price         Decimal?  @db.Decimal(10, 2)
  is_premium          Boolean?  @default(false)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)
  bookings            Booking[]
  payments            Payment[]

  @@index([appointment_type_id], map: "idx_services_appointment_type_id")
  @@map("services")
  @@schema("public")
}

model Review {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rating     Int
  comment    String?
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  bookingId  String    @map("booking_id") @db.Uuid
  customerId String    @map("customer_id") @db.Uuid
  booking    Booking   @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer   User      @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("reviews")
  @@schema("public")
}

model User {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email      String    @unique
  firstName  String    @map("first_name")
  lastName   String    @map("last_name")
  mobile     String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  reviews    Review[]

  @@map("users")
  @@schema("public")
}

model Profile {
  id         String    @id @db.Uuid
  firstName  String?   @map("first_name")
  lastName   String?   @map("last_name")
  email      String?   @unique
  phone      String?
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  role       UserRole  @default(customer)
  addresses  Address[]
  payments   Payment[]

  @@map("profiles")
  @@schema("public")
}

model Address {
  id                   String    @id @db.Uuid
  userId               String?   @map("user_id") @db.Uuid
  blockStreet          String?   @map("block_street")
  floorUnit            String?   @map("floor_unit")
  postalCode           String?   @map("postal_code")
  isDefault            Boolean?  @default(false) @map("is_default")
  createdAt            DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  condoName            String?   @map("condo_name")
  lobbyTower           String?   @map("lobby_tower")
  specialInstructions  String?   @map("special_instructions")
  updatedAt            DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  isVerified           Boolean?  @default(false) @map("is_verified")
  googlePlaceId        String?   @map("google_place_id")
  formattedAddress     String?   @map("formatted_address")
  profile              Profile?  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookings             Booking[]

  @@map("addresses")
  @@schema("public")
}

model BookingReference {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firebaseId  String    @unique @map("firebase_id")
  supabaseId  String    @unique @db.Uuid
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  booking     Booking   @relation(fields: [supabaseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("booking_references")
  @@schema("public")
}

enum UserRole {
  admin
  service_provider
  customer
  technician

  @@schema("public")
}
