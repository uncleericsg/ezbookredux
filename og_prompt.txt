Develop a **iAircon Easy Booking** web app for **iAircon**, branded as the **iAircon Easy Booking**. The app will streamline appointment bookings, annual maintenance contract (AMC) management for iAircon customers, featuring appointment scheduling with **Acuity Scheduling and other list of Integrations**, service tracking, notifications, announcements, and branding customization. The app will have a **dark mode-only design**, optimized for mobile devices, adhering to the latest **industry standards**.

---

### **Key Features**

#### **1. Branding Customization**
- **UI Color and Logo Adjustments:**
  - Allow admins to customize the app's primary and secondary colors via the admin panel.
  - Enable logo updates to reflect branding changes or campaigns.
  - Provide a **real-time preview** of branding updates before publishing.

---

#### **2. Announcement Function**
- **User-Facing Announcement Dialog:**
  - Display announcements in a **modal dialog box** on the user dashboard immediately after login.
  - Users can dismiss the announcement by clicking an "OK" button.
  - Store dismissed announcements locally to avoid showing the same announcement repeatedly unless updated.

- **Admin-Controlled Announcements:**
  - Add a section in the admin panel for creating, updating, and deleting announcements.
  - Fields:
    - **Title**: Brief heading for the announcement.
    - **Message**: Full announcement details.
    - **Display Dates**: Set start and end dates for announcement visibility.

---

#### **3. Social Media Links**
- **Social Media Icons in Footer:**
  - Allow admins to add, edit, or remove social media links via the admin panel.
  - Supported platforms (in order of appearance):
    1. **Facebook**
    2. **TikTok**
    3. **Instagram**
    4. **YouTube**
  - Dynamically display icons in the app footer, linking to the respective profiles.

---

#### **4. Acuity Scheduling Integration**
- **Real-Time Appointment Booking:**
  - Integrate **Acuity Scheduling API** to display real-time availability.
  - Allow users to book services directly from the app based on Acuity's availability.
  - Automatically update the Acuity calendar when users book or reschedule.

- **Customizable Scheduling Logic:**
  - Allow admins to set default appointment intervals (e.g., every 10 weeks for AMC customers).
  - Auto-suggest next appointment dates based on the user's service history.

- **Admin Panel Settings for Acuity Integration:**
  - Input fields for:
    - **Acuity API Key**
    - **Acuity User ID**
  - Enable/disable Acuity integration from the admin panel.

**Acuity API Integration Example:**
```javascript
const fetchAvailability = async () => {
  const apiKey = 'YOUR_ACUITY_API_KEY';
  const userId = 'YOUR_ACUITY_USER_ID';

  const response = await fetch(`https://acuityscheduling.com/api/v1/availability?userId=${userId}`, {
    method: 'GET',
    headers: {
      Authorization: `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
  });

  const availability = await response.json();
  return availability; // Return available slots to the frontend
};
```

**Appointment Booking Example:**
```javascript
const bookAppointment = async (timeSlotId, userDetails) => {
  const apiKey = 'YOUR_ACUITY_API_KEY';

  const response = await fetch('https://acuityscheduling.com/api/v1/appointments', {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      appointmentTypeID: timeSlotId,
      firstName: userDetails.firstName,
      lastName: userDetails.lastName,
      email: userDetails.email,
    }),
  });

  const result = await response.json();
  return result; // Confirmation of the booking
};
```

---

#### **5. AMC Management**
- **Custom Renewal Page:**
  - Display user-specific AMC packages with clear pricing and benefits.
  - Allow secure payment processing via **Stripe integration**.
- **Visit Tracking:**
  - Admins can label service visits (e.g., #1ST VISIT, #2ND VISIT).
  - Auto-increment labels until renewal and reset the count after renewal.

---

#### **6. Service Scheduling**
- **Smart Scheduling:**
  - Provide real-time availability via Acuity Scheduling.
  - Enable users to book and reschedule appointments.
  - Adhere to a 24-hour cutoff for rescheduling.
- **Service History Tracking:**
  - Display **recent 5 service reports** in the user dashboard.
  - Include a **"View All" button** to load the full service history.
  - Fetch service reports from the **RepairShopr API**, capturing the last updated comment in resolved tickets.

---

#### **7. Notifications**
- **Smart Reminders:**
  - Automate **75-day reminders** for service bookings based on the last appointment date.
- **Escalation Notifications:**
  - Escalate missed reminders with email alerts and admin follow-ups.
- **Notification History:**
  - Allow users to mark notifications as read and view past notifications.

---

#### **8. Admin Dashboard**
- **User Management:**
  - View, deactivate, or update user accounts.
  - Input API keys and manage integrations for:
    - **RepairShopr API** (for service tracking).
    - **Acuity Scheduling API** (for appointment management).
    - **Stripe API** (for AMC payments).
- **Analytics:**
  - Provide service and booking analytics, including trends and user feedback.
- **Branding Management:**
  - Adjust the app's colors and logo dynamically while maintaining the dark mode design.
  - Preview branding updates before publishing.

---

### **Technical Implementation**

#### **Dark Mode Design**
- Use a base color palette with:
  - Background: `#121212`
  - Text: `#FFFFFF`
  - Accent: Customizable via admin panel.

#### **Acuity Scheduling Integration Backend**
- **API for Availability:**
  - `GET /api/v1/availability`: Fetch real-time available slots.
- **API for Booking:**
  - `POST /api/v1/appointments`: Create new bookings.
- **Admin Settings:**
  - Enable input fields for Acuity API Key and User ID.

#### **Social Media Links Backend**
- **API for Social Media Links:**
  - `POST /api/social-media`: Update social media links.
  - `GET /api/social-media`: Fetch saved links for the footer.

---

### **Technical Stack**
- **Frontend:** React + TypeScript with Tailwind CSS.
- **Backend:** Firebase Firestore, Functions, and Authentication.
- **Notifications:** Firebase Cloud Messaging.
- **Payment:** Stripe API.
- **Integrations:** RepairShopr API, Acuity Scheduling API.
- **Testing:** Cypress for end-to-end testing.
- **Performance:** Optimized for Core Web Vitals.